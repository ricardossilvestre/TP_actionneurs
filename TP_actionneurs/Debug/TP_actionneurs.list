
TP_actionneurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a194  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0800a374  0800a374  0001a374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8a4  0800a8a4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8a4  0800a8a4  0001a8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8ac  0800a8ac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8ac  0800a8ac  0001a8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8b0  0800a8b0  0001a8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a8b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000074  0800a928  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  0800a928  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b72b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003340  00000000  00000000  0003b7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  0003eb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001468  00000000  00000000  000400d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e93  00000000  00000000  00041538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c9f  00000000  00000000  0006b3cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113ec9  00000000  00000000  0008506a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00198f33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006888  00000000  00000000  00198f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a35c 	.word	0x0800a35c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	0800a35c 	.word	0x0800a35c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	; 0x30
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2220      	movs	r2, #32
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f008 fbe7 	bl	8008dd0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000602:	4b32      	ldr	r3, [pc, #200]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000604:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000608:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800060a:	4b30      	ldr	r3, [pc, #192]	; (80006cc <MX_ADC1_Init+0xe8>)
 800060c:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000610:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000612:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000618:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <MX_ADC1_Init+0xe8>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061e:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000624:	4b29      	ldr	r3, [pc, #164]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062a:	4b28      	ldr	r3, [pc, #160]	; (80006cc <MX_ADC1_Init+0xe8>)
 800062c:	2204      	movs	r2, #4
 800062e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000632:	2200      	movs	r2, #0
 8000634:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000638:	2200      	movs	r2, #0
 800063a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <MX_ADC1_Init+0xe8>)
 800063e:	2201      	movs	r2, #1
 8000640:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000642:	4b22      	ldr	r3, [pc, #136]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064a:	4b20      	ldr	r3, [pc, #128]	; (80006cc <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000652:	2200      	movs	r2, #0
 8000654:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000656:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	4817      	ldr	r0, [pc, #92]	; (80006cc <MX_ADC1_Init+0xe8>)
 800066e:	f001 fad3 	bl	8001c18 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000678:	f000 fbb8 	bl	8000dec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000684:	4619      	mov	r1, r3
 8000686:	4811      	ldr	r0, [pc, #68]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000688:	f002 fb48 	bl	8002d1c <HAL_ADCEx_MultiModeConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000692:	f000 fbab 	bl	8000dec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_ADC1_Init+0xec>)
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069a:	2306      	movs	r3, #6
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800069e:	2307      	movs	r3, #7
 80006a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a2:	237f      	movs	r3, #127	; 0x7f
 80006a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a6:	2304      	movs	r3, #4
 80006a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <MX_ADC1_Init+0xe8>)
 80006b4:	f001 fe6a 	bl	800238c <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006be:	f000 fb95 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	3730      	adds	r7, #48	; 0x30
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000090 	.word	0x20000090
 80006d0:	04300002 	.word	0x04300002

080006d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b09e      	sub	sp, #120	; 0x78
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	2254      	movs	r2, #84	; 0x54
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f008 fb6b 	bl	8008dd0 <memset>
  if(adcHandle->Instance==ADC1)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000702:	d134      	bne.n	800076e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000704:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000708:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800070a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800070e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	4618      	mov	r0, r3
 8000716:	f003 fd71 	bl	80041fc <HAL_RCCEx_PeriphCLKConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000720:	f000 fb64 	bl	8000dec <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <HAL_ADC_MspInit+0xa4>)
 8000726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000728:	4a13      	ldr	r2, [pc, #76]	; (8000778 <HAL_ADC_MspInit+0xa4>)
 800072a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800072e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <HAL_ADC_MspInit+0xa4>)
 8000732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <HAL_ADC_MspInit+0xa4>)
 800073e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <HAL_ADC_MspInit+0xa4>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <HAL_ADC_MspInit+0xa4>)
 800074a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_CURRENT_Pin;
 8000754:	2301      	movs	r3, #1
 8000756:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000758:	2303      	movs	r3, #3
 800075a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(ADC_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000764:	4619      	mov	r1, r3
 8000766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076a:	f002 fd7f 	bl	800326c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800076e:	bf00      	nop
 8000770:	3778      	adds	r7, #120	; 0x78
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000

0800077c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	4b33      	ldr	r3, [pc, #204]	; (8000860 <MX_GPIO_Init+0xe4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a32      	ldr	r2, [pc, #200]	; (8000860 <MX_GPIO_Init+0xe4>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b30      	ldr	r3, [pc, #192]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a2c      	ldr	r2, [pc, #176]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007b0:	f043 0320 	orr.w	r3, r3, #32
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0320 	and.w	r3, r3, #32
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b27      	ldr	r3, [pc, #156]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a26      	ldr	r2, [pc, #152]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2108      	movs	r1, #8
 80007de:	4821      	ldr	r0, [pc, #132]	; (8000864 <MX_GPIO_Init+0xe8>)
 80007e0:	f002 fec6 	bl	8003570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2120      	movs	r1, #32
 80007e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ec:	f002 fec0 	bl	8003570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80007f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4619      	mov	r1, r3
 8000806:	4817      	ldr	r0, [pc, #92]	; (8000864 <MX_GPIO_Init+0xe8>)
 8000808:	f002 fd30 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 800080c:	2308      	movs	r3, #8
 800080e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	4810      	ldr	r0, [pc, #64]	; (8000864 <MX_GPIO_Init+0xe8>)
 8000824:	f002 fd22 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000828:	2320      	movs	r3, #32
 800082a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	4619      	mov	r1, r3
 800083e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000842:	f002 fd13 	bl	800326c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2028      	movs	r0, #40	; 0x28
 800084c:	f002 fc26 	bl	800309c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000850:	2028      	movs	r0, #40	; 0x28
 8000852:	f002 fc3d 	bl	80030d0 <HAL_NVIC_EnableIRQ>

}
 8000856:	bf00      	nop
 8000858:	3720      	adds	r7, #32
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000
 8000864:	48000800 	.word	0x48000800

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b0a2      	sub	sp, #136	; 0x88
 800086c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char	 	cmd[CMD_BUFFER_SIZE];
	int 		idxCmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	67bb      	str	r3, [r7, #120]	; 0x78
	char*		token;
	int 		newCmdReady = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	673b      	str	r3, [r7, #112]	; 0x70
	int		speed = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint16_t  CCR1 = 5312;
 800087a:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 800087e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	uint16_t  CCR2 = 5312;
 8000882:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 8000886:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

	uint16_t AD_RES = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000890:	f000 ff39 	bl	8001706 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000894:	f000 f9fc 	bl	8000c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000898:	f7ff ff70 	bl	800077c <MX_GPIO_Init>
  MX_TIM1_Init();
 800089c:	f000 fc6c 	bl	8001178 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80008a0:	f000 fe5c 	bl	800155c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008a4:	f7ff fe9e 	bl	80005e4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80008a8:	f000 fd24 	bl	80012f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008ac:	2100      	movs	r1, #0
 80008ae:	48a6      	ldr	r0, [pc, #664]	; (8000b48 <main+0x2e0>)
 80008b0:	f004 f824 	bl	80048fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80008b4:	2104      	movs	r1, #4
 80008b6:	48a4      	ldr	r0, [pc, #656]	; (8000b48 <main+0x2e0>)
 80008b8:	f004 f820 	bl	80048fc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80008bc:	2100      	movs	r1, #0
 80008be:	48a2      	ldr	r0, [pc, #648]	; (8000b48 <main+0x2e0>)
 80008c0:	f005 ff6c 	bl	800679c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80008c4:	2104      	movs	r1, #4
 80008c6:	48a0      	ldr	r0, [pc, #640]	; (8000b48 <main+0x2e0>)
 80008c8:	f005 ff68 	bl	800679c <HAL_TIMEx_PWMN_Start>

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80008cc:	2100      	movs	r1, #0
 80008ce:	489f      	ldr	r0, [pc, #636]	; (8000b4c <main+0x2e4>)
 80008d0:	f004 fa8c 	bl	8004dec <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 80008d4:	2104      	movs	r1, #4
 80008d6:	489d      	ldr	r0, [pc, #628]	; (8000b4c <main+0x2e4>)
 80008d8:	f004 f984 	bl	8004be4 <HAL_TIM_IC_Start>

	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 80008dc:	463b      	mov	r3, r7
 80008de:	2224      	movs	r2, #36	; 0x24
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f008 fa74 	bl	8008dd0 <memset>
	memset(cmd,NULL,CMD_BUFFER_SIZE*sizeof(char));
 80008e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ec:	2240      	movs	r2, #64	; 0x40
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f008 fa6d 	bl	8008dd0 <memset>
 80008f6:	4b96      	ldr	r3, [pc, #600]	; (8000b50 <main+0x2e8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 80008fc:	2240      	movs	r2, #64	; 0x40
 80008fe:	2100      	movs	r1, #0
 8000900:	4894      	ldr	r0, [pc, #592]	; (8000b54 <main+0x2ec>)
 8000902:	f008 fa65 	bl	8008dd0 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000906:	2201      	movs	r2, #1
 8000908:	4991      	ldr	r1, [pc, #580]	; (8000b50 <main+0x2e8>)
 800090a:	4893      	ldr	r0, [pc, #588]	; (8000b58 <main+0x2f0>)
 800090c:	f006 faa2 	bl	8006e54 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8000910:	200a      	movs	r0, #10
 8000912:	f000 ff2f 	bl	8001774 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	2266      	movs	r2, #102	; 0x66
 800091c:	498f      	ldr	r1, [pc, #572]	; (8000b5c <main+0x2f4>)
 800091e:	488e      	ldr	r0, [pc, #568]	; (8000b58 <main+0x2f0>)
 8000920:	f006 fa01 	bl	8006d26 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	2218      	movs	r2, #24
 800092a:	498d      	ldr	r1, [pc, #564]	; (8000b60 <main+0x2f8>)
 800092c:	488a      	ldr	r0, [pc, #552]	; (8000b58 <main+0x2f0>)
 800092e:	f006 f9fa 	bl	8006d26 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 2
		if(uartRxReceived){
 8000932:	4b8c      	ldr	r3, [pc, #560]	; (8000b64 <main+0x2fc>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d058      	beq.n	80009ec <main+0x184>
			switch(uartRxBuffer[0]){
 800093a:	4b85      	ldr	r3, [pc, #532]	; (8000b50 <main+0x2e8>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b0d      	cmp	r3, #13
 8000940:	d002      	beq.n	8000948 <main+0xe0>
 8000942:	2b7f      	cmp	r3, #127	; 0x7f
 8000944:	d02f      	beq.n	80009a6 <main+0x13e>
 8000946:	e03e      	b.n	80009c6 <main+0x15e>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newLine, sizeof(newLine), HAL_MAX_DELAY);
 8000948:	f04f 33ff 	mov.w	r3, #4294967295
 800094c:	2203      	movs	r2, #3
 800094e:	4986      	ldr	r1, [pc, #536]	; (8000b68 <main+0x300>)
 8000950:	4881      	ldr	r0, [pc, #516]	; (8000b58 <main+0x2f0>)
 8000952:	f006 f9e8 	bl	8006d26 <HAL_UART_Transmit>
				cmd[idxCmd] = '\0';
 8000956:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800095a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800095c:	4413      	add	r3, r2
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
				argc = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	67bb      	str	r3, [r7, #120]	; 0x78
				token = strtok(cmd, separators);
 8000966:	4b81      	ldr	r3, [pc, #516]	; (8000b6c <main+0x304>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	4611      	mov	r1, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f008 fa55 	bl	8008e20 <strtok>
 8000976:	6778      	str	r0, [r7, #116]	; 0x74
				while(token!=NULL){
 8000978:	e00d      	b.n	8000996 <main+0x12e>
					argv[argc++] = token;
 800097a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	67ba      	str	r2, [r7, #120]	; 0x78
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	3380      	adds	r3, #128	; 0x80
 8000984:	443b      	add	r3, r7
 8000986:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000988:	f843 2c80 	str.w	r2, [r3, #-128]
					token = strtok(NULL, " ");
 800098c:	4978      	ldr	r1, [pc, #480]	; (8000b70 <main+0x308>)
 800098e:	2000      	movs	r0, #0
 8000990:	f008 fa46 	bl	8008e20 <strtok>
 8000994:	6778      	str	r0, [r7, #116]	; 0x74
				while(token!=NULL){
 8000996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1ee      	bne.n	800097a <main+0x112>
				}

				idxCmd = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	67fb      	str	r3, [r7, #124]	; 0x7c
				newCmdReady = 1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	673b      	str	r3, [r7, #112]	; 0x70
				break;
 80009a4:	e01f      	b.n	80009e6 <main+0x17e>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmd[idxCmd--] = '\0';
 80009a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80009a8:	1e5a      	subs	r2, r3, #1
 80009aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80009ac:	3380      	adds	r3, #128	; 0x80
 80009ae:	443b      	add	r3, r7
 80009b0:	2200      	movs	r2, #0
 80009b2:	f803 2c5c 	strb.w	r2, [r3, #-92]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	2201      	movs	r2, #1
 80009bc:	4964      	ldr	r1, [pc, #400]	; (8000b50 <main+0x2e8>)
 80009be:	4866      	ldr	r0, [pc, #408]	; (8000b58 <main+0x2f0>)
 80009c0:	f006 f9b1 	bl	8006d26 <HAL_UART_Transmit>
				break;
 80009c4:	e00f      	b.n	80009e6 <main+0x17e>
				// Nouveau caractère
			default:
				cmd[idxCmd++] = uartRxBuffer[0];
 80009c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80009cc:	4a60      	ldr	r2, [pc, #384]	; (8000b50 <main+0x2e8>)
 80009ce:	7812      	ldrb	r2, [r2, #0]
 80009d0:	3380      	adds	r3, #128	; 0x80
 80009d2:	443b      	add	r3, r7
 80009d4:	f803 2c5c 	strb.w	r2, [r3, #-92]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
 80009dc:	2201      	movs	r2, #1
 80009de:	495c      	ldr	r1, [pc, #368]	; (8000b50 <main+0x2e8>)
 80009e0:	485d      	ldr	r0, [pc, #372]	; (8000b58 <main+0x2f0>)
 80009e2:	f006 f9a0 	bl	8006d26 <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 80009e6:	4b5f      	ldr	r3, [pc, #380]	; (8000b64 <main+0x2fc>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
		}


		if(newCmdReady){
 80009ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 8135 	beq.w	8000c5e <main+0x3f6>
			if(strcmp(argv[0],"set")==0){
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	495f      	ldr	r1, [pc, #380]	; (8000b74 <main+0x30c>)
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fc11 	bl	8000220 <strcmp>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d12d      	bne.n	8000a60 <main+0x1f8>
				if(strcmp(argv[1],"PA5")==0){
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	495c      	ldr	r1, [pc, #368]	; (8000b78 <main+0x310>)
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fc09 	bl	8000220 <strcmp>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d11d      	bne.n	8000a50 <main+0x1e8>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f008 f9ac 	bl	8008d74 <atoi>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	461a      	mov	r2, r3
 8000a22:	2120      	movs	r1, #32
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f002 fda2 	bl	8003570 <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f008 f9a0 	bl	8008d74 <atoi>
 8000a34:	4603      	mov	r3, r0
 8000a36:	461a      	mov	r2, r3
 8000a38:	4950      	ldr	r1, [pc, #320]	; (8000b7c <main+0x314>)
 8000a3a:	4846      	ldr	r0, [pc, #280]	; (8000b54 <main+0x2ec>)
 8000a3c:	f008 f9d0 	bl	8008de0 <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295
 8000a44:	2220      	movs	r2, #32
 8000a46:	4943      	ldr	r1, [pc, #268]	; (8000b54 <main+0x2ec>)
 8000a48:	4843      	ldr	r0, [pc, #268]	; (8000b58 <main+0x2f0>)
 8000a4a:	f006 f96c 	bl	8006d26 <HAL_UART_Transmit>
 8000a4e:	e0fd      	b.n	8000c4c <main+0x3e4>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000a50:	f04f 33ff 	mov.w	r3, #4294967295
 8000a54:	2214      	movs	r2, #20
 8000a56:	494a      	ldr	r1, [pc, #296]	; (8000b80 <main+0x318>)
 8000a58:	483f      	ldr	r0, [pc, #252]	; (8000b58 <main+0x2f0>)
 8000a5a:	f006 f964 	bl	8006d26 <HAL_UART_Transmit>
 8000a5e:	e0f5      	b.n	8000c4c <main+0x3e4>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	4948      	ldr	r1, [pc, #288]	; (8000b84 <main+0x31c>)
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fbdb 	bl	8000220 <strcmp>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d128      	bne.n	8000ac2 <main+0x25a>
			{
				// Read The ADC Conversion Result & Map It To PWM DutyCycle
				AD_RES = ((3300*HAL_ADC_GetValue(&hadc1)/4096)-2500)*12;
 8000a70:	4845      	ldr	r0, [pc, #276]	; (8000b88 <main+0x320>)
 8000a72:	f001 fc7d 	bl	8002370 <HAL_ADC_GetValue>
 8000a76:	4603      	mov	r3, r0
 8000a78:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000a7c:	fb02 f303 	mul.w	r3, r2, r3
 8000a80:	0b1b      	lsrs	r3, r3, #12
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	461a      	mov	r2, r3
 8000a86:	0052      	lsls	r2, r2, #1
 8000a88:	4413      	add	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000a92:	3b30      	subs	r3, #48	; 0x30
 8000a94:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				//AD_RES = ((HAL_ADC_GetValue(&hadc1)*3300)/4096-2500)*12;
				sprintf(uartTxBuffer,"ADC = %d | Freq = %d \r\n",AD_RES,(int) frequency);
 8000a98:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8000a9c:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <main+0x324>)
 8000a9e:	edd3 7a00 	vldr	s15, [r3]
 8000aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aa6:	ee17 3a90 	vmov	r3, s15
 8000aaa:	4939      	ldr	r1, [pc, #228]	; (8000b90 <main+0x328>)
 8000aac:	4829      	ldr	r0, [pc, #164]	; (8000b54 <main+0x2ec>)
 8000aae:	f008 f997 	bl	8008de0 <siprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	2240      	movs	r2, #64	; 0x40
 8000ab8:	4926      	ldr	r1, [pc, #152]	; (8000b54 <main+0x2ec>)
 8000aba:	4827      	ldr	r0, [pc, #156]	; (8000b58 <main+0x2f0>)
 8000abc:	f006 f933 	bl	8006d26 <HAL_UART_Transmit>
 8000ac0:	e0c4      	b.n	8000c4c <main+0x3e4>

			}
			else if(strcmp(argv[0],"help")==0)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	4933      	ldr	r1, [pc, #204]	; (8000b94 <main+0x32c>)
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fbaa 	bl	8000220 <strcmp>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d107      	bne.n	8000ae2 <main+0x27a>
			{
				HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad6:	229e      	movs	r2, #158	; 0x9e
 8000ad8:	492f      	ldr	r1, [pc, #188]	; (8000b98 <main+0x330>)
 8000ada:	481f      	ldr	r0, [pc, #124]	; (8000b58 <main+0x2f0>)
 8000adc:	f006 f923 	bl	8006d26 <HAL_UART_Transmit>
 8000ae0:	e0b4      	b.n	8000c4c <main+0x3e4>
			}
			else if(strcmp(argv[0],"pinout")==0)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	492d      	ldr	r1, [pc, #180]	; (8000b9c <main+0x334>)
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fb9a 	bl	8000220 <strcmp>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d107      	bne.n	8000b02 <main+0x29a>
			{
				HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
 8000af6:	226b      	movs	r2, #107	; 0x6b
 8000af8:	4929      	ldr	r1, [pc, #164]	; (8000ba0 <main+0x338>)
 8000afa:	4817      	ldr	r0, [pc, #92]	; (8000b58 <main+0x2f0>)
 8000afc:	f006 f913 	bl	8006d26 <HAL_UART_Transmit>
 8000b00:	e0a4      	b.n	8000c4c <main+0x3e4>
			}
			else if(strcmp(argv[0],"start")==0)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	4927      	ldr	r1, [pc, #156]	; (8000ba4 <main+0x33c>)
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fb8a 	bl	8000220 <strcmp>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d109      	bne.n	8000b26 <main+0x2be>
			{
				powerUpSequence();
 8000b12:	f000 f91d 	bl	8000d50 <powerUpSequence>
				HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	2232      	movs	r2, #50	; 0x32
 8000b1c:	4922      	ldr	r1, [pc, #136]	; (8000ba8 <main+0x340>)
 8000b1e:	480e      	ldr	r0, [pc, #56]	; (8000b58 <main+0x2f0>)
 8000b20:	f006 f901 	bl	8006d26 <HAL_UART_Transmit>
 8000b24:	e092      	b.n	8000c4c <main+0x3e4>
			}
			else if(strcmp(argv[0],"stop")==0)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	4920      	ldr	r1, [pc, #128]	; (8000bac <main+0x344>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fb78 	bl	8000220 <strcmp>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d13e      	bne.n	8000bb4 <main+0x34c>
			{
				HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	2233      	movs	r2, #51	; 0x33
 8000b3c:	491c      	ldr	r1, [pc, #112]	; (8000bb0 <main+0x348>)
 8000b3e:	4806      	ldr	r0, [pc, #24]	; (8000b58 <main+0x2f0>)
 8000b40:	f006 f8f1 	bl	8006d26 <HAL_UART_Transmit>
 8000b44:	e082      	b.n	8000c4c <main+0x3e4>
 8000b46:	bf00      	nop
 8000b48:	20000198 	.word	0x20000198
 8000b4c:	200001e4 	.word	0x200001e4
 8000b50:	20000100 	.word	0x20000100
 8000b54:	20000104 	.word	0x20000104
 8000b58:	20000230 	.word	0x20000230
 8000b5c:	0800a428 	.word	0x0800a428
 8000b60:	0800a410 	.word	0x0800a410
 8000b64:	200000fc 	.word	0x200000fc
 8000b68:	0800a490 	.word	0x0800a490
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	0800a378 	.word	0x0800a378
 8000b74:	0800a37c 	.word	0x0800a37c
 8000b78:	0800a380 	.word	0x0800a380
 8000b7c:	0800a384 	.word	0x0800a384
 8000b80:	0800a494 	.word	0x0800a494
 8000b84:	0800a3a0 	.word	0x0800a3a0
 8000b88:	20000090 	.word	0x20000090
 8000b8c:	20000144 	.word	0x20000144
 8000b90:	0800a3a4 	.word	0x0800a3a4
 8000b94:	0800a3bc 	.word	0x0800a3bc
 8000b98:	0800a4a8 	.word	0x0800a4a8
 8000b9c:	0800a3c4 	.word	0x0800a3c4
 8000ba0:	0800a548 	.word	0x0800a548
 8000ba4:	0800a3cc 	.word	0x0800a3cc
 8000ba8:	0800a5b4 	.word	0x0800a5b4
 8000bac:	0800a3d4 	.word	0x0800a3d4
 8000bb0:	0800a5e8 	.word	0x0800a5e8
			}
			else if(strcmp(argv[0],"speed")==0){
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	492e      	ldr	r1, [pc, #184]	; (8000c70 <main+0x408>)
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fb31 	bl	8000220 <strcmp>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d13c      	bne.n	8000c3e <main+0x3d6>
				speed = atoi(argv[1]);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f008 f8d4 	bl	8008d74 <atoi>
 8000bcc:	66f8      	str	r0, [r7, #108]	; 0x6c
				if (speed > SPEED_MAX)	speed = SPEED_MAX;
 8000bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bd4:	dd02      	ble.n	8000bdc <main+0x374>
 8000bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bda:	66fb      	str	r3, [r7, #108]	; 0x6c
				CCR1=5312*(SPEED_MAX+speed)/(2*SPEED_MAX);
 8000bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bde:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000be2:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8000be6:	fb02 f303 	mul.w	r3, r2, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	da01      	bge.n	8000bf2 <main+0x38a>
 8000bee:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000bf2:	129b      	asrs	r3, r3, #10
 8000bf4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
				CCR2=5312-CCR1;
 8000bf8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8000bfc:	f5c3 53a6 	rsb	r3, r3, #5312	; 0x14c0
 8000c00:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,CCR1);
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <main+0x40c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8000c0c:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,CCR2);
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <main+0x40c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8000c16:	639a      	str	r2, [r3, #56]	; 0x38
				sprintf(uartTxBuffer,"Speed set to : %d | CCR1 = %d | CCR2= %d \r\n",speed,CCR1,CCR2);
 8000c18:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8000c1c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	4613      	mov	r3, r2
 8000c24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000c26:	4914      	ldr	r1, [pc, #80]	; (8000c78 <main+0x410>)
 8000c28:	4814      	ldr	r0, [pc, #80]	; (8000c7c <main+0x414>)
 8000c2a:	f008 f8d9 	bl	8008de0 <siprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	2240      	movs	r2, #64	; 0x40
 8000c34:	4911      	ldr	r1, [pc, #68]	; (8000c7c <main+0x414>)
 8000c36:	4812      	ldr	r0, [pc, #72]	; (8000c80 <main+0x418>)
 8000c38:	f006 f875 	bl	8006d26 <HAL_UART_Transmit>
 8000c3c:	e006      	b.n	8000c4c <main+0x3e4>
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	2214      	movs	r2, #20
 8000c44:	490f      	ldr	r1, [pc, #60]	; (8000c84 <main+0x41c>)
 8000c46:	480e      	ldr	r0, [pc, #56]	; (8000c80 <main+0x418>)
 8000c48:	f006 f86d 	bl	8006d26 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c50:	2218      	movs	r2, #24
 8000c52:	490d      	ldr	r1, [pc, #52]	; (8000c88 <main+0x420>)
 8000c54:	480a      	ldr	r0, [pc, #40]	; (8000c80 <main+0x418>)
 8000c56:	f006 f866 	bl	8006d26 <HAL_UART_Transmit>
			newCmdReady = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	673b      	str	r3, [r7, #112]	; 0x70
		}

		// Start ADC Conversion
		HAL_ADC_Start(&hadc1);
 8000c5e:	480b      	ldr	r0, [pc, #44]	; (8000c8c <main+0x424>)
 8000c60:	f001 f99c 	bl	8001f9c <HAL_ADC_Start>
		// Poll ADC1 Perihperal & TimeOut = 1mSec
		HAL_ADC_PollForConversion(&hadc1, 100);
 8000c64:	2164      	movs	r1, #100	; 0x64
 8000c66:	4809      	ldr	r0, [pc, #36]	; (8000c8c <main+0x424>)
 8000c68:	f001 fa7c 	bl	8002164 <HAL_ADC_PollForConversion>
		if(uartRxReceived){
 8000c6c:	e661      	b.n	8000932 <main+0xca>
 8000c6e:	bf00      	nop
 8000c70:	0800a3dc 	.word	0x0800a3dc
 8000c74:	20000198 	.word	0x20000198
 8000c78:	0800a3e4 	.word	0x0800a3e4
 8000c7c:	20000104 	.word	0x20000104
 8000c80:	20000230 	.word	0x20000230
 8000c84:	0800a494 	.word	0x0800a494
 8000c88:	0800a410 	.word	0x0800a410
 8000c8c:	20000090 	.word	0x20000090

08000c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b094      	sub	sp, #80	; 0x50
 8000c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c96:	f107 0318 	add.w	r3, r7, #24
 8000c9a:	2238      	movs	r2, #56	; 0x38
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f008 f896 	bl	8008dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f002 fc98 	bl	80035e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000cca:	2306      	movs	r3, #6
 8000ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cce:	2355      	movs	r3, #85	; 0x55
 8000cd0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cde:	f107 0318 	add.w	r3, r7, #24
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f002 fd24 	bl	8003730 <HAL_RCC_OscConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000cee:	f000 f87d 	bl	8000dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf2:	230f      	movs	r3, #15
 8000cf4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2104      	movs	r1, #4
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f003 f828 	bl	8003d60 <HAL_RCC_ClockConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d16:	f000 f869 	bl	8000dec <Error_Handler>
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	3750      	adds	r7, #80	; 0x50
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <HAL_UART_RxCpltCallback+0x20>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000d32:	2201      	movs	r2, #1
 8000d34:	4904      	ldr	r1, [pc, #16]	; (8000d48 <HAL_UART_RxCpltCallback+0x24>)
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <HAL_UART_RxCpltCallback+0x28>)
 8000d38:	f006 f88c 	bl	8006e54 <HAL_UART_Receive_IT>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200000fc 	.word	0x200000fc
 8000d48:	20000100 	.word	0x20000100
 8000d4c:	20000230 	.word	0x20000230

08000d50 <powerUpSequence>:

void powerUpSequence (void){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2108      	movs	r1, #8
 8000d58:	4806      	ldr	r0, [pc, #24]	; (8000d74 <powerUpSequence+0x24>)
 8000d5a:	f002 fc09 	bl	8003570 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f000 fd08 	bl	8001774 <HAL_Delay>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2108      	movs	r1, #8
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <powerUpSequence+0x24>)
 8000d6a:	f002 fc01 	bl	8003570 <HAL_GPIO_WritePin>
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	48000800 	.word	0x48000800

08000d78 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d88:	d116      	bne.n	8000db8 <HAL_TIM_IC_CaptureCallback+0x40>
		uint32_t cl = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f004 fe05 	bl	800599c <HAL_TIM_ReadCapturedValue>
 8000d92:	60f8      	str	r0, [r7, #12]
		uint32_t ch = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000d94:	2104      	movs	r1, #4
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f004 fe00 	bl	800599c <HAL_TIM_ReadCapturedValue>
 8000d9c:	60b8      	str	r0, [r7, #8]

		frequency = (float) TIMCLOCK / (cl + 1);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	3301      	adds	r3, #1
 8000da2:	ee07 3a90 	vmov	s15, r3
 8000da6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000daa:	eddf 6a05 	vldr	s13, [pc, #20]	; 8000dc0 <HAL_TIM_IC_CaptureCallback+0x48>
 8000dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000db4:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	4d221fe8 	.word	0x4d221fe8
 8000dc4:	20000144 	.word	0x20000144

08000dc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d101      	bne.n	8000dde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dda:	f000 fcad 	bl	8001738 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40001000 	.word	0x40001000

08000dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000df4:	e7fe      	b.n	8000df4 <Error_Handler+0x8>
	...

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_MspInit+0x44>)
 8000e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e02:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <HAL_MspInit+0x44>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6613      	str	r3, [r2, #96]	; 0x60
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_MspInit+0x44>)
 8000e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_MspInit+0x44>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <HAL_MspInit+0x44>)
 8000e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e20:	6593      	str	r3, [r2, #88]	; 0x58
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_MspInit+0x44>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000

08000e40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08c      	sub	sp, #48	; 0x30
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e56:	4b2d      	ldr	r3, [pc, #180]	; (8000f0c <HAL_InitTick+0xcc>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5a:	4a2c      	ldr	r2, [pc, #176]	; (8000f0c <HAL_InitTick+0xcc>)
 8000e5c:	f043 0310 	orr.w	r3, r3, #16
 8000e60:	6593      	str	r3, [r2, #88]	; 0x58
 8000e62:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <HAL_InitTick+0xcc>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e6e:	f107 020c 	add.w	r2, r7, #12
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f003 f947 	bl	800410c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e7e:	f003 f919 	bl	80040b4 <HAL_RCC_GetPCLK1Freq>
 8000e82:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e86:	4a22      	ldr	r2, [pc, #136]	; (8000f10 <HAL_InitTick+0xd0>)
 8000e88:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8c:	0c9b      	lsrs	r3, r3, #18
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e92:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <HAL_InitTick+0xd4>)
 8000e94:	4a20      	ldr	r2, [pc, #128]	; (8000f18 <HAL_InitTick+0xd8>)
 8000e96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e98:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <HAL_InitTick+0xd4>)
 8000e9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e9e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ea0:	4a1c      	ldr	r2, [pc, #112]	; (8000f14 <HAL_InitTick+0xd4>)
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <HAL_InitTick+0xd4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <HAL_InitTick+0xd4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000eb2:	4818      	ldr	r0, [pc, #96]	; (8000f14 <HAL_InitTick+0xd4>)
 8000eb4:	f003 fbf0 	bl	8004698 <HAL_TIM_Base_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ebe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d11b      	bne.n	8000efe <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ec6:	4813      	ldr	r0, [pc, #76]	; (8000f14 <HAL_InitTick+0xd4>)
 8000ec8:	f003 fc3e 	bl	8004748 <HAL_TIM_Base_Start_IT>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d111      	bne.n	8000efe <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000eda:	2036      	movs	r0, #54	; 0x36
 8000edc:	f002 f8f8 	bl	80030d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b0f      	cmp	r3, #15
 8000ee4:	d808      	bhi.n	8000ef8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	2036      	movs	r0, #54	; 0x36
 8000eec:	f002 f8d6 	bl	800309c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <HAL_InitTick+0xdc>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	e002      	b.n	8000efe <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000efe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3730      	adds	r7, #48	; 0x30
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	431bde83 	.word	0x431bde83
 8000f14:	20000148 	.word	0x20000148
 8000f18:	40001000 	.word	0x40001000
 8000f1c:	20000008 	.word	0x20000008

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <TIM2_IRQHandler+0x10>)
 8000f7e:	f004 f885 	bl	800508c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200001e4 	.word	0x200001e4

08000f8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <USART2_IRQHandler+0x10>)
 8000f92:	f005 ffb5 	bl	8006f00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000230 	.word	0x20000230

08000fa0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000fa4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fa8:	f002 fafa 	bl	80035a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
	powerUpSequence();
 8000fac:	f7ff fed0 	bl	8000d50 <powerUpSequence>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <TIM6_DAC_IRQHandler+0x10>)
 8000fba:	f004 f867 	bl	800508c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000148 	.word	0x20000148

08000fc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
	return 1;
 8000fcc:	2301      	movs	r3, #1
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_kill>:

int _kill(int pid, int sig)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fe2:	f007 fecb 	bl	8008d7c <__errno>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2216      	movs	r2, #22
 8000fea:	601a      	str	r2, [r3, #0]
	return -1;
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <_exit>:

void _exit (int status)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ffe7 	bl	8000fd8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800100a:	e7fe      	b.n	800100a <_exit+0x12>

0800100c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	e00a      	b.n	8001034 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800101e:	f3af 8000 	nop.w
 8001022:	4601      	mov	r1, r0
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	60ba      	str	r2, [r7, #8]
 800102a:	b2ca      	uxtb	r2, r1
 800102c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	429a      	cmp	r2, r3
 800103a:	dbf0      	blt.n	800101e <_read+0x12>
	}

return len;
 800103c:	687b      	ldr	r3, [r7, #4]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e009      	b.n	800106c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	60ba      	str	r2, [r7, #8]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbf1      	blt.n	8001058 <_write+0x12>
	}
	return len;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <_close>:

int _close(int file)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
	return -1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a6:	605a      	str	r2, [r3, #4]
	return 0;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_isatty>:

int _isatty(int file)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
	return 1;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	return 0;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <_sbrk+0x5c>)
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <_sbrk+0x60>)
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <_sbrk+0x64>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <_sbrk+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	429a      	cmp	r2, r3
 8001116:	d207      	bcs.n	8001128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001118:	f007 fe30 	bl	8008d7c <__errno>
 800111c:	4603      	mov	r3, r0
 800111e:	220c      	movs	r2, #12
 8001120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	e009      	b.n	800113c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <_sbrk+0x64>)
 8001138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20020000 	.word	0x20020000
 8001148:	00000400 	.word	0x00000400
 800114c:	20000194 	.word	0x20000194
 8001150:	200002d8 	.word	0x200002d8

08001154 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <SystemInit+0x20>)
 800115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <SystemInit+0x20>)
 8001160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b09c      	sub	sp, #112	; 0x70
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001198:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
 80011a8:	615a      	str	r2, [r3, #20]
 80011aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	2234      	movs	r2, #52	; 0x34
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f007 fe0c 	bl	8008dd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011b8:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <MX_TIM1_Init+0x174>)
 80011ba:	4a4d      	ldr	r2, [pc, #308]	; (80012f0 <MX_TIM1_Init+0x178>)
 80011bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011be:	4b4b      	ldr	r3, [pc, #300]	; (80012ec <MX_TIM1_Init+0x174>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80011c4:	4b49      	ldr	r3, [pc, #292]	; (80012ec <MX_TIM1_Init+0x174>)
 80011c6:	2220      	movs	r2, #32
 80011c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5312;
 80011ca:	4b48      	ldr	r3, [pc, #288]	; (80012ec <MX_TIM1_Init+0x174>)
 80011cc:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 80011d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d2:	4b46      	ldr	r3, [pc, #280]	; (80012ec <MX_TIM1_Init+0x174>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011d8:	4b44      	ldr	r3, [pc, #272]	; (80012ec <MX_TIM1_Init+0x174>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011de:	4b43      	ldr	r3, [pc, #268]	; (80012ec <MX_TIM1_Init+0x174>)
 80011e0:	2280      	movs	r2, #128	; 0x80
 80011e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011e4:	4841      	ldr	r0, [pc, #260]	; (80012ec <MX_TIM1_Init+0x174>)
 80011e6:	f003 fa57 	bl	8004698 <HAL_TIM_Base_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011f0:	f7ff fdfc 	bl	8000dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011fe:	4619      	mov	r1, r3
 8001200:	483a      	ldr	r0, [pc, #232]	; (80012ec <MX_TIM1_Init+0x174>)
 8001202:	f004 fa73 	bl	80056ec <HAL_TIM_ConfigClockSource>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800120c:	f7ff fdee 	bl	8000dec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001210:	4836      	ldr	r0, [pc, #216]	; (80012ec <MX_TIM1_Init+0x174>)
 8001212:	f003 fb11 	bl	8004838 <HAL_TIM_PWM_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800121c:	f7ff fde6 	bl	8000dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001224:	2300      	movs	r3, #0
 8001226:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800122c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001230:	4619      	mov	r1, r3
 8001232:	482e      	ldr	r0, [pc, #184]	; (80012ec <MX_TIM1_Init+0x174>)
 8001234:	f005 fb74 	bl	8006920 <HAL_TIMEx_MasterConfigSynchronization>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800123e:	f7ff fdd5 	bl	8000dec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001242:	2360      	movs	r3, #96	; 0x60
 8001244:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2656;
 8001246:	f44f 6326 	mov.w	r3, #2656	; 0xa60
 800124a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800124c:	2300      	movs	r3, #0
 800124e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001250:	2300      	movs	r3, #0
 8001252:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800125c:	2300      	movs	r3, #0
 800125e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001260:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001264:	2200      	movs	r2, #0
 8001266:	4619      	mov	r1, r3
 8001268:	4820      	ldr	r0, [pc, #128]	; (80012ec <MX_TIM1_Init+0x174>)
 800126a:	f004 f92b 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001274:	f7ff fdba 	bl	8000dec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001278:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800127c:	2204      	movs	r2, #4
 800127e:	4619      	mov	r1, r3
 8001280:	481a      	ldr	r0, [pc, #104]	; (80012ec <MX_TIM1_Init+0x174>)
 8001282:	f004 f91f 	bl	80054c4 <HAL_TIM_PWM_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800128c:	f7ff fdae 	bl	8000dec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 222;
 800129c:	23de      	movs	r3, #222	; 0xde
 800129e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80012c0:	2300      	movs	r3, #0
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	4619      	mov	r1, r3
 80012cc:	4807      	ldr	r0, [pc, #28]	; (80012ec <MX_TIM1_Init+0x174>)
 80012ce:	f005 fbbd 	bl	8006a4c <HAL_TIMEx_ConfigBreakDeadTime>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 80012d8:	f7ff fd88 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012dc:	4803      	ldr	r0, [pc, #12]	; (80012ec <MX_TIM1_Init+0x174>)
 80012de:	f000 f905 	bl	80014ec <HAL_TIM_MspPostInit>

}
 80012e2:	bf00      	nop
 80012e4:	3770      	adds	r7, #112	; 0x70
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000198 	.word	0x20000198
 80012f0:	40012c00 	.word	0x40012c00

080012f4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b090      	sub	sp, #64	; 0x40
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001326:	463b      	mov	r3, r7
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001330:	4b3e      	ldr	r3, [pc, #248]	; (800142c <MX_TIM2_Init+0x138>)
 8001332:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001336:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001338:	4b3c      	ldr	r3, [pc, #240]	; (800142c <MX_TIM2_Init+0x138>)
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133e:	4b3b      	ldr	r3, [pc, #236]	; (800142c <MX_TIM2_Init+0x138>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001344:	4b39      	ldr	r3, [pc, #228]	; (800142c <MX_TIM2_Init+0x138>)
 8001346:	f04f 32ff 	mov.w	r2, #4294967295
 800134a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134c:	4b37      	ldr	r3, [pc, #220]	; (800142c <MX_TIM2_Init+0x138>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001352:	4b36      	ldr	r3, [pc, #216]	; (800142c <MX_TIM2_Init+0x138>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001358:	4834      	ldr	r0, [pc, #208]	; (800142c <MX_TIM2_Init+0x138>)
 800135a:	f003 f99d 	bl	8004698 <HAL_TIM_Base_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001364:	f7ff fd42 	bl	8000dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800136e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001372:	4619      	mov	r1, r3
 8001374:	482d      	ldr	r0, [pc, #180]	; (800142c <MX_TIM2_Init+0x138>)
 8001376:	f004 f9b9 	bl	80056ec <HAL_TIM_ConfigClockSource>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001380:	f7ff fd34 	bl	8000dec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001384:	4829      	ldr	r0, [pc, #164]	; (800142c <MX_TIM2_Init+0x138>)
 8001386:	f003 fbcb 	bl	8004b20 <HAL_TIM_IC_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001390:	f7ff fd2c 	bl	8000dec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001394:	2304      	movs	r3, #4
 8001396:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001398:	2350      	movs	r3, #80	; 0x50
 800139a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	481f      	ldr	r0, [pc, #124]	; (800142c <MX_TIM2_Init+0x138>)
 80013b0:	f004 fab2 	bl	8005918 <HAL_TIM_SlaveConfigSynchro>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80013ba:	f7ff fd17 	bl	8000dec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013c2:	2301      	movs	r3, #1
 80013c4:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	2200      	movs	r2, #0
 80013d4:	4619      	mov	r1, r3
 80013d6:	4815      	ldr	r0, [pc, #84]	; (800142c <MX_TIM2_Init+0x138>)
 80013d8:	f003 ffd7 	bl	800538a <HAL_TIM_IC_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80013e2:	f7ff fd03 	bl	8000dec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80013e6:	2302      	movs	r3, #2
 80013e8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80013ea:	2302      	movs	r3, #2
 80013ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	2204      	movs	r2, #4
 80013f4:	4619      	mov	r1, r3
 80013f6:	480d      	ldr	r0, [pc, #52]	; (800142c <MX_TIM2_Init+0x138>)
 80013f8:	f003 ffc7 	bl	800538a <HAL_TIM_IC_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8001402:	f7ff fcf3 	bl	8000dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800140e:	463b      	mov	r3, r7
 8001410:	4619      	mov	r1, r3
 8001412:	4806      	ldr	r0, [pc, #24]	; (800142c <MX_TIM2_Init+0x138>)
 8001414:	f005 fa84 	bl	8006920 <HAL_TIMEx_MasterConfigSynchronization>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 800141e:	f7ff fce5 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	3740      	adds	r7, #64	; 0x40
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200001e4 	.word	0x200001e4

08001430 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a25      	ldr	r2, [pc, #148]	; (80014e4 <HAL_TIM_Base_MspInit+0xb4>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d10c      	bne.n	800146c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001452:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <HAL_TIM_Base_MspInit+0xb8>)
 8001454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001456:	4a24      	ldr	r2, [pc, #144]	; (80014e8 <HAL_TIM_Base_MspInit+0xb8>)
 8001458:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800145c:	6613      	str	r3, [r2, #96]	; 0x60
 800145e:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <HAL_TIM_Base_MspInit+0xb8>)
 8001460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800146a:	e036      	b.n	80014da <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001474:	d131      	bne.n	80014da <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <HAL_TIM_Base_MspInit+0xb8>)
 8001478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147a:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <HAL_TIM_Base_MspInit+0xb8>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6593      	str	r3, [r2, #88]	; 0x58
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_TIM_Base_MspInit+0xb8>)
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_TIM_Base_MspInit+0xb8>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <HAL_TIM_Base_MspInit+0xb8>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <HAL_TIM_Base_MspInit+0xb8>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014b8:	2301      	movs	r3, #1
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c6:	f001 fed1 	bl	800326c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	201c      	movs	r0, #28
 80014d0:	f001 fde4 	bl	800309c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014d4:	201c      	movs	r0, #28
 80014d6:	f001 fdfb 	bl	80030d0 <HAL_NVIC_EnableIRQ>
}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40012c00 	.word	0x40012c00
 80014e8:	40021000 	.word	0x40021000

080014ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a12      	ldr	r2, [pc, #72]	; (8001554 <HAL_TIM_MspPostInit+0x68>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d11d      	bne.n	800154a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_TIM_MspPostInit+0x6c>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a11      	ldr	r2, [pc, #68]	; (8001558 <HAL_TIM_MspPostInit+0x6c>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <HAL_TIM_MspPostInit+0x6c>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001526:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800152a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001538:	2306      	movs	r3, #6
 800153a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	4619      	mov	r1, r3
 8001542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001546:	f001 fe91 	bl	800326c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800154a:	bf00      	nop
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40012c00 	.word	0x40012c00
 8001558:	40021000 	.word	0x40021000

0800155c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001560:	4b22      	ldr	r3, [pc, #136]	; (80015ec <MX_USART2_UART_Init+0x90>)
 8001562:	4a23      	ldr	r2, [pc, #140]	; (80015f0 <MX_USART2_UART_Init+0x94>)
 8001564:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <MX_USART2_UART_Init+0x90>)
 8001568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800156c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <MX_USART2_UART_Init+0x90>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <MX_USART2_UART_Init+0x90>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <MX_USART2_UART_Init+0x90>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <MX_USART2_UART_Init+0x90>)
 8001582:	220c      	movs	r2, #12
 8001584:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <MX_USART2_UART_Init+0x90>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <MX_USART2_UART_Init+0x90>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <MX_USART2_UART_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <MX_USART2_UART_Init+0x90>)
 800159a:	2200      	movs	r2, #0
 800159c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800159e:	4b13      	ldr	r3, [pc, #76]	; (80015ec <MX_USART2_UART_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a4:	4811      	ldr	r0, [pc, #68]	; (80015ec <MX_USART2_UART_Init+0x90>)
 80015a6:	f005 fb6e 	bl	8006c86 <HAL_UART_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015b0:	f7ff fc1c 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015b4:	2100      	movs	r1, #0
 80015b6:	480d      	ldr	r0, [pc, #52]	; (80015ec <MX_USART2_UART_Init+0x90>)
 80015b8:	f007 fb11 	bl	8008bde <HAL_UARTEx_SetTxFifoThreshold>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015c2:	f7ff fc13 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c6:	2100      	movs	r1, #0
 80015c8:	4808      	ldr	r0, [pc, #32]	; (80015ec <MX_USART2_UART_Init+0x90>)
 80015ca:	f007 fb46 	bl	8008c5a <HAL_UARTEx_SetRxFifoThreshold>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015d4:	f7ff fc0a 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <MX_USART2_UART_Init+0x90>)
 80015da:	f007 fac7 	bl	8008b6c <HAL_UARTEx_DisableFifoMode>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015e4:	f7ff fc02 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000230 	.word	0x20000230
 80015f0:	40004400 	.word	0x40004400

080015f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b09e      	sub	sp, #120	; 0x78
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	2254      	movs	r2, #84	; 0x54
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f007 fbdb 	bl	8008dd0 <memset>
  if(uartHandle->Instance==USART2)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a23      	ldr	r2, [pc, #140]	; (80016ac <HAL_UART_MspInit+0xb8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d13e      	bne.n	80016a2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001624:	2302      	movs	r3, #2
 8001626:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	4618      	mov	r0, r3
 8001632:	f002 fde3 	bl	80041fc <HAL_RCCEx_PeriphCLKConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800163c:	f7ff fbd6 	bl	8000dec <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_UART_MspInit+0xbc>)
 8001642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001644:	4a1a      	ldr	r2, [pc, #104]	; (80016b0 <HAL_UART_MspInit+0xbc>)
 8001646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164a:	6593      	str	r3, [r2, #88]	; 0x58
 800164c:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <HAL_UART_MspInit+0xbc>)
 800164e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_UART_MspInit+0xbc>)
 800165a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165c:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <HAL_UART_MspInit+0xbc>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_UART_MspInit+0xbc>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001670:	230c      	movs	r3, #12
 8001672:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001680:	2307      	movs	r3, #7
 8001682:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001688:	4619      	mov	r1, r3
 800168a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168e:	f001 fded 	bl	800326c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	2026      	movs	r0, #38	; 0x26
 8001698:	f001 fd00 	bl	800309c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800169c:	2026      	movs	r0, #38	; 0x26
 800169e:	f001 fd17 	bl	80030d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016a2:	bf00      	nop
 80016a4:	3778      	adds	r7, #120	; 0x78
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40004400 	.word	0x40004400
 80016b0:	40021000 	.word	0x40021000

080016b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b8:	480d      	ldr	r0, [pc, #52]	; (80016f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80016ba:	490e      	ldr	r1, [pc, #56]	; (80016f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016bc:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <LoopForever+0xe>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016c0:	e002      	b.n	80016c8 <LoopCopyDataInit>

080016c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c6:	3304      	adds	r3, #4

080016c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016cc:	d3f9      	bcc.n	80016c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016d0:	4c0b      	ldr	r4, [pc, #44]	; (8001700 <LoopForever+0x16>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d4:	e001      	b.n	80016da <LoopFillZerobss>

080016d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d8:	3204      	adds	r2, #4

080016da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016dc:	d3fb      	bcc.n	80016d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016de:	f7ff fd39 	bl	8001154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e2:	f007 fb51 	bl	8008d88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016e6:	f7ff f8bf 	bl	8000868 <main>

080016ea <LoopForever>:

LoopForever:
    b LoopForever
 80016ea:	e7fe      	b.n	80016ea <LoopForever>
  ldr   r0, =_estack
 80016ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80016f8:	0800a8b4 	.word	0x0800a8b4
  ldr r2, =_sbss
 80016fc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001700:	200002d4 	.word	0x200002d4

08001704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001704:	e7fe      	b.n	8001704 <ADC1_2_IRQHandler>

08001706 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001710:	2003      	movs	r0, #3
 8001712:	f001 fcb8 	bl	8003086 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001716:	200f      	movs	r0, #15
 8001718:	f7ff fb92 	bl	8000e40 <HAL_InitTick>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	71fb      	strb	r3, [r7, #7]
 8001726:	e001      	b.n	800172c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001728:	f7ff fb66 	bl	8000df8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800172c:	79fb      	ldrb	r3, [r7, #7]

}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_IncTick+0x1c>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_IncTick+0x20>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4413      	add	r3, r2
 8001746:	4a03      	ldr	r2, [pc, #12]	; (8001754 <HAL_IncTick+0x1c>)
 8001748:	6013      	str	r3, [r2, #0]
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	200002c0 	.word	0x200002c0
 8001758:	2000000c 	.word	0x2000000c

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	200002c0 	.word	0x200002c0

08001774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff ffee 	bl	800175c <HAL_GetTick>
 8001780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178c:	d004      	beq.n	8001798 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_Delay+0x40>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	4413      	add	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001798:	bf00      	nop
 800179a:	f7ff ffdf 	bl	800175c <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d8f7      	bhi.n	800179a <HAL_Delay+0x26>
  {
  }
}
 80017aa:	bf00      	nop
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2000000c 	.word	0x2000000c

080017b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	609a      	str	r2, [r3, #8]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	609a      	str	r2, [r3, #8]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3360      	adds	r3, #96	; 0x60
 8001832:	461a      	mov	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <LL_ADC_SetOffset+0x44>)
 8001842:	4013      	ands	r3, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	4313      	orrs	r3, r2
 8001850:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001858:	bf00      	nop
 800185a:	371c      	adds	r7, #28
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	03fff000 	.word	0x03fff000

08001868 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3360      	adds	r3, #96	; 0x60
 8001876:	461a      	mov	r2, r3
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001888:	4618      	mov	r0, r3
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3360      	adds	r3, #96	; 0x60
 80018a4:	461a      	mov	r2, r3
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018be:	bf00      	nop
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b087      	sub	sp, #28
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3360      	adds	r3, #96	; 0x60
 80018da:	461a      	mov	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80018f4:	bf00      	nop
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001900:	b480      	push	{r7}
 8001902:	b087      	sub	sp, #28
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3360      	adds	r3, #96	; 0x60
 8001910:	461a      	mov	r2, r3
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	431a      	orrs	r2, r3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800192a:	bf00      	nop
 800192c:	371c      	adds	r7, #28
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	615a      	str	r2, [r3, #20]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001982:	b480      	push	{r7}
 8001984:	b087      	sub	sp, #28
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3330      	adds	r3, #48	; 0x30
 8001992:	461a      	mov	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	4413      	add	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	211f      	movs	r1, #31
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	401a      	ands	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	0e9b      	lsrs	r3, r3, #26
 80019ba:	f003 011f 	and.w	r1, r3, #31
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	431a      	orrs	r2, r3
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019ce:	bf00      	nop
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019da:	b480      	push	{r7}
 80019dc:	b087      	sub	sp, #28
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3314      	adds	r3, #20
 80019ea:	461a      	mov	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	0e5b      	lsrs	r3, r3, #25
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	4413      	add	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	0d1b      	lsrs	r3, r3, #20
 8001a02:	f003 031f 	and.w	r3, r3, #31
 8001a06:	2107      	movs	r1, #7
 8001a08:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	401a      	ands	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	0d1b      	lsrs	r3, r3, #20
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a24:	bf00      	nop
 8001a26:	371c      	adds	r7, #28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a0f      	ldr	r2, [pc, #60]	; (8001a7c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d10a      	bne.n	8001a5a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a50:	431a      	orrs	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001a58:	e00a      	b.n	8001a70 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a66:	43db      	mvns	r3, r3
 8001a68:	401a      	ands	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	407f0000 	.word	0x407f0000

08001a80 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 031f 	and.w	r3, r3, #31
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ac8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6093      	str	r3, [r2, #8]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001af0:	d101      	bne.n	8001af6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b40:	d101      	bne.n	8001b46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b68:	f043 0201 	orr.w	r2, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <LL_ADC_IsEnabled+0x18>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <LL_ADC_IsEnabled+0x1a>
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bb6:	f043 0204 	orr.w	r2, r3, #4
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d101      	bne.n	8001be2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d101      	bne.n	8001c08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e1af      	b.n	8001f92 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d109      	bne.n	8001c54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7fe fd47 	bl	80006d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff3f 	bl	8001adc <LL_ADC_IsDeepPowerDownEnabled>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d004      	beq.n	8001c6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff25 	bl	8001ab8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff5a 	bl	8001b2c <LL_ADC_IsInternalRegulatorEnabled>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d115      	bne.n	8001caa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff3e 	bl	8001b04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c88:	4b9f      	ldr	r3, [pc, #636]	; (8001f08 <HAL_ADC_Init+0x2f0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	099b      	lsrs	r3, r3, #6
 8001c8e:	4a9f      	ldr	r2, [pc, #636]	; (8001f0c <HAL_ADC_Init+0x2f4>)
 8001c90:	fba2 2303 	umull	r2, r3, r2, r3
 8001c94:	099b      	lsrs	r3, r3, #6
 8001c96:	3301      	adds	r3, #1
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c9c:	e002      	b.n	8001ca4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f9      	bne.n	8001c9e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff3c 	bl	8001b2c <LL_ADC_IsInternalRegulatorEnabled>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10d      	bne.n	8001cd6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbe:	f043 0210 	orr.w	r2, r3, #16
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cca:	f043 0201 	orr.w	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff75 	bl	8001bca <LL_ADC_REG_IsConversionOngoing>
 8001ce0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f040 8148 	bne.w	8001f80 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f040 8144 	bne.w	8001f80 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d00:	f043 0202 	orr.w	r2, r3, #2
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff35 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d141      	bne.n	8001d9c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d20:	d004      	beq.n	8001d2c <HAL_ADC_Init+0x114>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a7a      	ldr	r2, [pc, #488]	; (8001f10 <HAL_ADC_Init+0x2f8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d10f      	bne.n	8001d4c <HAL_ADC_Init+0x134>
 8001d2c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001d30:	f7ff ff24 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d34:	4604      	mov	r4, r0
 8001d36:	4876      	ldr	r0, [pc, #472]	; (8001f10 <HAL_ADC_Init+0x2f8>)
 8001d38:	f7ff ff20 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4323      	orrs	r3, r4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	bf0c      	ite	eq
 8001d44:	2301      	moveq	r3, #1
 8001d46:	2300      	movne	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	e012      	b.n	8001d72 <HAL_ADC_Init+0x15a>
 8001d4c:	4871      	ldr	r0, [pc, #452]	; (8001f14 <HAL_ADC_Init+0x2fc>)
 8001d4e:	f7ff ff15 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d52:	4604      	mov	r4, r0
 8001d54:	4870      	ldr	r0, [pc, #448]	; (8001f18 <HAL_ADC_Init+0x300>)
 8001d56:	f7ff ff11 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	431c      	orrs	r4, r3
 8001d5e:	486f      	ldr	r0, [pc, #444]	; (8001f1c <HAL_ADC_Init+0x304>)
 8001d60:	f7ff ff0c 	bl	8001b7c <LL_ADC_IsEnabled>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4323      	orrs	r3, r4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf0c      	ite	eq
 8001d6c:	2301      	moveq	r3, #1
 8001d6e:	2300      	movne	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d012      	beq.n	8001d9c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d7e:	d004      	beq.n	8001d8a <HAL_ADC_Init+0x172>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a62      	ldr	r2, [pc, #392]	; (8001f10 <HAL_ADC_Init+0x2f8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d101      	bne.n	8001d8e <HAL_ADC_Init+0x176>
 8001d8a:	4a65      	ldr	r2, [pc, #404]	; (8001f20 <HAL_ADC_Init+0x308>)
 8001d8c:	e000      	b.n	8001d90 <HAL_ADC_Init+0x178>
 8001d8e:	4a65      	ldr	r2, [pc, #404]	; (8001f24 <HAL_ADC_Init+0x30c>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4619      	mov	r1, r3
 8001d96:	4610      	mov	r0, r2
 8001d98:	f7ff fd0e 	bl	80017b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7f5b      	ldrb	r3, [r3, #29]
 8001da0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001da6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001dac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001db2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d106      	bne.n	8001dd8 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	045b      	lsls	r3, r3, #17
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d009      	beq.n	8001df4 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	4b4b      	ldr	r3, [pc, #300]	; (8001f28 <HAL_ADC_Init+0x310>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	69b9      	ldr	r1, [r7, #24]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fed1 	bl	8001bca <LL_ADC_REG_IsConversionOngoing>
 8001e28:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fede 	bl	8001bf0 <LL_ADC_INJ_IsConversionOngoing>
 8001e34:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d17f      	bne.n	8001f3c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d17c      	bne.n	8001f3c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e46:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e4e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e5e:	f023 0302 	bic.w	r3, r3, #2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	69b9      	ldr	r1, [r7, #24]
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d017      	beq.n	8001ea4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e82:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e8c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6911      	ldr	r1, [r2, #16]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001ea2:	e013      	b.n	8001ecc <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691a      	ldr	r2, [r3, #16]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001eb2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ec4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d12a      	bne.n	8001f2c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ee0:	f023 0304 	bic.w	r3, r3, #4
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001eec:	4311      	orrs	r1, r2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ef2:	4311      	orrs	r1, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0201 	orr.w	r2, r2, #1
 8001f04:	611a      	str	r2, [r3, #16]
 8001f06:	e019      	b.n	8001f3c <HAL_ADC_Init+0x324>
 8001f08:	20000004 	.word	0x20000004
 8001f0c:	053e2d63 	.word	0x053e2d63
 8001f10:	50000100 	.word	0x50000100
 8001f14:	50000400 	.word	0x50000400
 8001f18:	50000500 	.word	0x50000500
 8001f1c:	50000600 	.word	0x50000600
 8001f20:	50000300 	.word	0x50000300
 8001f24:	50000700 	.word	0x50000700
 8001f28:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0201 	bic.w	r2, r2, #1
 8001f3a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d10c      	bne.n	8001f5e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f023 010f 	bic.w	r1, r3, #15
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	1e5a      	subs	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f5c:	e007      	b.n	8001f6e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 020f 	bic.w	r2, r2, #15
 8001f6c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	f023 0303 	bic.w	r3, r3, #3
 8001f76:	f043 0201 	orr.w	r2, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f7e:	e007      	b.n	8001f90 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f84:	f043 0210 	orr.w	r2, r3, #16
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f90:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3724      	adds	r7, #36	; 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd90      	pop	{r4, r7, pc}
 8001f9a:	bf00      	nop

08001f9c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fac:	d004      	beq.n	8001fb8 <HAL_ADC_Start+0x1c>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a67      	ldr	r2, [pc, #412]	; (8002150 <HAL_ADC_Start+0x1b4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d101      	bne.n	8001fbc <HAL_ADC_Start+0x20>
 8001fb8:	4b66      	ldr	r3, [pc, #408]	; (8002154 <HAL_ADC_Start+0x1b8>)
 8001fba:	e000      	b.n	8001fbe <HAL_ADC_Start+0x22>
 8001fbc:	4b66      	ldr	r3, [pc, #408]	; (8002158 <HAL_ADC_Start+0x1bc>)
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fd5e 	bl	8001a80 <LL_ADC_GetMultimode>
 8001fc4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fdfd 	bl	8001bca <LL_ADC_REG_IsConversionOngoing>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f040 80b4 	bne.w	8002140 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_ADC_Start+0x4a>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e0af      	b.n	8002146 <HAL_ADC_Start+0x1aa>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fe0c 	bl	8002c0c <ADC_Enable>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ff8:	7dfb      	ldrb	r3, [r7, #23]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f040 809b 	bne.w	8002136 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002004:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a4d      	ldr	r2, [pc, #308]	; (8002150 <HAL_ADC_Start+0x1b4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d009      	beq.n	8002032 <HAL_ADC_Start+0x96>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a4e      	ldr	r2, [pc, #312]	; (800215c <HAL_ADC_Start+0x1c0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d002      	beq.n	800202e <HAL_ADC_Start+0x92>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	e003      	b.n	8002036 <HAL_ADC_Start+0x9a>
 800202e:	4b4c      	ldr	r3, [pc, #304]	; (8002160 <HAL_ADC_Start+0x1c4>)
 8002030:	e001      	b.n	8002036 <HAL_ADC_Start+0x9a>
 8002032:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	4293      	cmp	r3, r2
 800203c:	d002      	beq.n	8002044 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d105      	bne.n	8002050 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002048:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002054:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800205c:	d106      	bne.n	800206c <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002062:	f023 0206 	bic.w	r2, r3, #6
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	661a      	str	r2, [r3, #96]	; 0x60
 800206a:	e002      	b.n	8002072 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	221c      	movs	r2, #28
 8002078:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a32      	ldr	r2, [pc, #200]	; (8002150 <HAL_ADC_Start+0x1b4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d009      	beq.n	80020a0 <HAL_ADC_Start+0x104>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a32      	ldr	r2, [pc, #200]	; (800215c <HAL_ADC_Start+0x1c0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d002      	beq.n	800209c <HAL_ADC_Start+0x100>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	e003      	b.n	80020a4 <HAL_ADC_Start+0x108>
 800209c:	4b30      	ldr	r3, [pc, #192]	; (8002160 <HAL_ADC_Start+0x1c4>)
 800209e:	e001      	b.n	80020a4 <HAL_ADC_Start+0x108>
 80020a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d008      	beq.n	80020be <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	2b05      	cmp	r3, #5
 80020b6:	d002      	beq.n	80020be <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	2b09      	cmp	r3, #9
 80020bc:	d114      	bne.n	80020e8 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d007      	beq.n	80020dc <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fd5e 	bl	8001ba2 <LL_ADC_REG_StartConversion>
 80020e6:	e02d      	b.n	8002144 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a15      	ldr	r2, [pc, #84]	; (8002150 <HAL_ADC_Start+0x1b4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d009      	beq.n	8002112 <HAL_ADC_Start+0x176>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a16      	ldr	r2, [pc, #88]	; (800215c <HAL_ADC_Start+0x1c0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d002      	beq.n	800210e <HAL_ADC_Start+0x172>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	e003      	b.n	8002116 <HAL_ADC_Start+0x17a>
 800210e:	4b14      	ldr	r3, [pc, #80]	; (8002160 <HAL_ADC_Start+0x1c4>)
 8002110:	e001      	b.n	8002116 <HAL_ADC_Start+0x17a>
 8002112:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002116:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00f      	beq.n	8002144 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002128:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800212c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	65da      	str	r2, [r3, #92]	; 0x5c
 8002134:	e006      	b.n	8002144 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800213e:	e001      	b.n	8002144 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002140:	2302      	movs	r3, #2
 8002142:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002144:	7dfb      	ldrb	r3, [r7, #23]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	50000100 	.word	0x50000100
 8002154:	50000300 	.word	0x50000300
 8002158:	50000700 	.word	0x50000700
 800215c:	50000500 	.word	0x50000500
 8002160:	50000400 	.word	0x50000400

08002164 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002176:	d004      	beq.n	8002182 <HAL_ADC_PollForConversion+0x1e>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a77      	ldr	r2, [pc, #476]	; (800235c <HAL_ADC_PollForConversion+0x1f8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d101      	bne.n	8002186 <HAL_ADC_PollForConversion+0x22>
 8002182:	4b77      	ldr	r3, [pc, #476]	; (8002360 <HAL_ADC_PollForConversion+0x1fc>)
 8002184:	e000      	b.n	8002188 <HAL_ADC_PollForConversion+0x24>
 8002186:	4b77      	ldr	r3, [pc, #476]	; (8002364 <HAL_ADC_PollForConversion+0x200>)
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fc79 	bl	8001a80 <LL_ADC_GetMultimode>
 800218e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b08      	cmp	r3, #8
 8002196:	d102      	bne.n	800219e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002198:	2308      	movs	r3, #8
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	e037      	b.n	800220e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2b05      	cmp	r3, #5
 80021a8:	d002      	beq.n	80021b0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2b09      	cmp	r3, #9
 80021ae:	d111      	bne.n	80021d4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d007      	beq.n	80021ce <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c2:	f043 0220 	orr.w	r2, r3, #32
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e0c1      	b.n	8002352 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80021ce:	2304      	movs	r3, #4
 80021d0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80021d2:	e01c      	b.n	800220e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021dc:	d004      	beq.n	80021e8 <HAL_ADC_PollForConversion+0x84>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a5e      	ldr	r2, [pc, #376]	; (800235c <HAL_ADC_PollForConversion+0x1f8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_PollForConversion+0x88>
 80021e8:	4b5d      	ldr	r3, [pc, #372]	; (8002360 <HAL_ADC_PollForConversion+0x1fc>)
 80021ea:	e000      	b.n	80021ee <HAL_ADC_PollForConversion+0x8a>
 80021ec:	4b5d      	ldr	r3, [pc, #372]	; (8002364 <HAL_ADC_PollForConversion+0x200>)
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fc54 	bl	8001a9c <LL_ADC_GetMultiDMATransfer>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fe:	f043 0220 	orr.w	r2, r3, #32
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0a3      	b.n	8002352 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800220a:	2304      	movs	r3, #4
 800220c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800220e:	f7ff faa5 	bl	800175c <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002214:	e021      	b.n	800225a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221c:	d01d      	beq.n	800225a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800221e:	f7ff fa9d 	bl	800175c <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d302      	bcc.n	8002234 <HAL_ADC_PollForConversion+0xd0>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d112      	bne.n	800225a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10b      	bne.n	800225a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002246:	f043 0204 	orr.w	r2, r3, #4
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e07b      	b.n	8002352 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	4013      	ands	r3, r2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0d6      	beq.n	8002216 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fb6f 	bl	800195c <LL_ADC_REG_IsTriggerSourceSWStart>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01c      	beq.n	80022be <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	7f5b      	ldrb	r3, [r3, #29]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d118      	bne.n	80022be <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b08      	cmp	r3, #8
 8002298:	d111      	bne.n	80022be <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d105      	bne.n	80022be <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b6:	f043 0201 	orr.w	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a26      	ldr	r2, [pc, #152]	; (800235c <HAL_ADC_PollForConversion+0x1f8>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d009      	beq.n	80022dc <HAL_ADC_PollForConversion+0x178>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a26      	ldr	r2, [pc, #152]	; (8002368 <HAL_ADC_PollForConversion+0x204>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d002      	beq.n	80022d8 <HAL_ADC_PollForConversion+0x174>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	e003      	b.n	80022e0 <HAL_ADC_PollForConversion+0x17c>
 80022d8:	4b24      	ldr	r3, [pc, #144]	; (800236c <HAL_ADC_PollForConversion+0x208>)
 80022da:	e001      	b.n	80022e0 <HAL_ADC_PollForConversion+0x17c>
 80022dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d008      	beq.n	80022fa <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d002      	beq.n	80022fa <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2b09      	cmp	r3, #9
 80022f8:	d104      	bne.n	8002304 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	e014      	b.n	800232e <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a14      	ldr	r2, [pc, #80]	; (800235c <HAL_ADC_PollForConversion+0x1f8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d009      	beq.n	8002322 <HAL_ADC_PollForConversion+0x1be>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a15      	ldr	r2, [pc, #84]	; (8002368 <HAL_ADC_PollForConversion+0x204>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d002      	beq.n	800231e <HAL_ADC_PollForConversion+0x1ba>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	e003      	b.n	8002326 <HAL_ADC_PollForConversion+0x1c2>
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <HAL_ADC_PollForConversion+0x208>)
 8002320:	e001      	b.n	8002326 <HAL_ADC_PollForConversion+0x1c2>
 8002322:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002326:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	2b08      	cmp	r3, #8
 8002332:	d104      	bne.n	800233e <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2208      	movs	r2, #8
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	e008      	b.n	8002350 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d103      	bne.n	8002350 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	220c      	movs	r2, #12
 800234e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3720      	adds	r7, #32
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	50000100 	.word	0x50000100
 8002360:	50000300 	.word	0x50000300
 8002364:	50000700 	.word	0x50000700
 8002368:	50000500 	.word	0x50000500
 800236c:	50000400 	.word	0x50000400

08002370 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b0b6      	sub	sp, #216	; 0xd8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d102      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x24>
 80023aa:	2302      	movs	r3, #2
 80023ac:	f000 bc13 	b.w	8002bd6 <HAL_ADC_ConfigChannel+0x84a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fc04 	bl	8001bca <LL_ADC_REG_IsConversionOngoing>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f040 83f3 	bne.w	8002bb0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6859      	ldr	r1, [r3, #4]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	f7ff fad3 	bl	8001982 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fbf2 	bl	8001bca <LL_ADC_REG_IsConversionOngoing>
 80023e6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fbfe 	bl	8001bf0 <LL_ADC_INJ_IsConversionOngoing>
 80023f4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f040 81d9 	bne.w	80027b4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002402:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002406:	2b00      	cmp	r3, #0
 8002408:	f040 81d4 	bne.w	80027b4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002414:	d10f      	bne.n	8002436 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2200      	movs	r2, #0
 8002420:	4619      	mov	r1, r3
 8002422:	f7ff fada 	bl	80019da <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fa81 	bl	8001936 <LL_ADC_SetSamplingTimeCommonConfig>
 8002434:	e00e      	b.n	8002454 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6819      	ldr	r1, [r3, #0]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	461a      	mov	r2, r3
 8002444:	f7ff fac9 	bl	80019da <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fa71 	bl	8001936 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	08db      	lsrs	r3, r3, #3
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b04      	cmp	r3, #4
 8002474:	d022      	beq.n	80024bc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6919      	ldr	r1, [r3, #16]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002486:	f7ff f9cb 	bl	8001820 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6919      	ldr	r1, [r3, #16]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	461a      	mov	r2, r3
 8002498:	f7ff fa17 	bl	80018ca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6919      	ldr	r1, [r3, #16]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	7f1b      	ldrb	r3, [r3, #28]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d102      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x126>
 80024ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024b0:	e000      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x128>
 80024b2:	2300      	movs	r3, #0
 80024b4:	461a      	mov	r2, r3
 80024b6:	f7ff fa23 	bl	8001900 <LL_ADC_SetOffsetSaturation>
 80024ba:	e17b      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff f9d0 	bl	8001868 <LL_ADC_GetOffsetChannel>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10a      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x15c>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff f9c5 	bl	8001868 <LL_ADC_GetOffsetChannel>
 80024de:	4603      	mov	r3, r0
 80024e0:	0e9b      	lsrs	r3, r3, #26
 80024e2:	f003 021f 	and.w	r2, r3, #31
 80024e6:	e01e      	b.n	8002526 <HAL_ADC_ConfigChannel+0x19a>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff f9ba 	bl	8001868 <LL_ADC_GetOffsetChannel>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002506:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800250a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800250e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002516:	2320      	movs	r3, #32
 8002518:	e004      	b.n	8002524 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800251a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252e:	2b00      	cmp	r3, #0
 8002530:	d105      	bne.n	800253e <HAL_ADC_ConfigChannel+0x1b2>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	0e9b      	lsrs	r3, r3, #26
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	e018      	b.n	8002570 <HAL_ADC_ConfigChannel+0x1e4>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002556:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800255a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002562:	2320      	movs	r3, #32
 8002564:	e004      	b.n	8002570 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002566:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002570:	429a      	cmp	r2, r3
 8002572:	d106      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2200      	movs	r2, #0
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff f989 	bl	8001894 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2101      	movs	r1, #1
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff f96d 	bl	8001868 <LL_ADC_GetOffsetChannel>
 800258e:	4603      	mov	r3, r0
 8002590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10a      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x222>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2101      	movs	r1, #1
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff f962 	bl	8001868 <LL_ADC_GetOffsetChannel>
 80025a4:	4603      	mov	r3, r0
 80025a6:	0e9b      	lsrs	r3, r3, #26
 80025a8:	f003 021f 	and.w	r2, r3, #31
 80025ac:	e01e      	b.n	80025ec <HAL_ADC_ConfigChannel+0x260>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2101      	movs	r1, #1
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff f957 	bl	8001868 <LL_ADC_GetOffsetChannel>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80025cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80025d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80025dc:	2320      	movs	r3, #32
 80025de:	e004      	b.n	80025ea <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80025e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025e4:	fab3 f383 	clz	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x278>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	0e9b      	lsrs	r3, r3, #26
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	e018      	b.n	8002636 <HAL_ADC_ConfigChannel+0x2aa>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002618:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800261c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002620:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002628:	2320      	movs	r3, #32
 800262a:	e004      	b.n	8002636 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800262c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002636:	429a      	cmp	r2, r3
 8002638:	d106      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2200      	movs	r2, #0
 8002640:	2101      	movs	r1, #1
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff f926 	bl	8001894 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2102      	movs	r1, #2
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff f90a 	bl	8001868 <LL_ADC_GetOffsetChannel>
 8002654:	4603      	mov	r3, r0
 8002656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10a      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x2e8>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2102      	movs	r1, #2
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff f8ff 	bl	8001868 <LL_ADC_GetOffsetChannel>
 800266a:	4603      	mov	r3, r0
 800266c:	0e9b      	lsrs	r3, r3, #26
 800266e:	f003 021f 	and.w	r2, r3, #31
 8002672:	e01e      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x326>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2102      	movs	r1, #2
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff f8f4 	bl	8001868 <LL_ADC_GetOffsetChannel>
 8002680:	4603      	mov	r3, r0
 8002682:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002692:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002696:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800269a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80026a2:	2320      	movs	r3, #32
 80026a4:	e004      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80026a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d105      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x33e>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	0e9b      	lsrs	r3, r3, #26
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	e016      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x36c>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80026dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80026e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80026ea:	2320      	movs	r3, #32
 80026ec:	e004      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80026ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d106      	bne.n	800270a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2200      	movs	r2, #0
 8002702:	2102      	movs	r1, #2
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff f8c5 	bl	8001894 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2103      	movs	r1, #3
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff f8a9 	bl	8001868 <LL_ADC_GetOffsetChannel>
 8002716:	4603      	mov	r3, r0
 8002718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x3aa>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2103      	movs	r1, #3
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff f89e 	bl	8001868 <LL_ADC_GetOffsetChannel>
 800272c:	4603      	mov	r3, r0
 800272e:	0e9b      	lsrs	r3, r3, #26
 8002730:	f003 021f 	and.w	r2, r3, #31
 8002734:	e017      	b.n	8002766 <HAL_ADC_ConfigChannel+0x3da>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2103      	movs	r1, #3
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff f893 	bl	8001868 <LL_ADC_GetOffsetChannel>
 8002742:	4603      	mov	r3, r0
 8002744:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800274e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002750:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002752:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002758:	2320      	movs	r3, #32
 800275a:	e003      	b.n	8002764 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800275c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276e:	2b00      	cmp	r3, #0
 8002770:	d105      	bne.n	800277e <HAL_ADC_ConfigChannel+0x3f2>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	0e9b      	lsrs	r3, r3, #26
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	e011      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x416>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800278c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800278e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002796:	2320      	movs	r3, #32
 8002798:	e003      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800279a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279c:	fab3 f383 	clz	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d106      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2200      	movs	r2, #0
 80027ac:	2103      	movs	r1, #3
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff f870 	bl	8001894 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff f9df 	bl	8001b7c <LL_ADC_IsEnabled>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f040 813d 	bne.w	8002a40 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6819      	ldr	r1, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	461a      	mov	r2, r3
 80027d4:	f7ff f92c 	bl	8001a30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4aa2      	ldr	r2, [pc, #648]	; (8002a68 <HAL_ADC_ConfigChannel+0x6dc>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	f040 812e 	bne.w	8002a40 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10b      	bne.n	800280c <HAL_ADC_ConfigChannel+0x480>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	0e9b      	lsrs	r3, r3, #26
 80027fa:	3301      	adds	r3, #1
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	2b09      	cmp	r3, #9
 8002802:	bf94      	ite	ls
 8002804:	2301      	movls	r3, #1
 8002806:	2300      	movhi	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	e019      	b.n	8002840 <HAL_ADC_ConfigChannel+0x4b4>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800281a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800281c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800281e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e003      	b.n	8002830 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	3301      	adds	r3, #1
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	2b09      	cmp	r3, #9
 8002838:	bf94      	ite	ls
 800283a:	2301      	movls	r3, #1
 800283c:	2300      	movhi	r3, #0
 800283e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002840:	2b00      	cmp	r3, #0
 8002842:	d079      	beq.n	8002938 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284c:	2b00      	cmp	r3, #0
 800284e:	d107      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x4d4>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0e9b      	lsrs	r3, r3, #26
 8002856:	3301      	adds	r3, #1
 8002858:	069b      	lsls	r3, r3, #26
 800285a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800285e:	e015      	b.n	800288c <HAL_ADC_ConfigChannel+0x500>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800286e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002870:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002878:	2320      	movs	r3, #32
 800287a:	e003      	b.n	8002884 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800287c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	3301      	adds	r3, #1
 8002886:	069b      	lsls	r3, r3, #26
 8002888:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002894:	2b00      	cmp	r3, #0
 8002896:	d109      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x520>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	0e9b      	lsrs	r3, r3, #26
 800289e:	3301      	adds	r3, #1
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	2101      	movs	r1, #1
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	e017      	b.n	80028dc <HAL_ADC_ConfigChannel+0x550>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80028ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80028be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80028c4:	2320      	movs	r3, #32
 80028c6:	e003      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80028c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	2101      	movs	r1, #1
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	ea42 0103 	orr.w	r1, r2, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10a      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x576>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	3301      	adds	r3, #1
 80028f4:	f003 021f 	and.w	r2, r3, #31
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	051b      	lsls	r3, r3, #20
 8002900:	e018      	b.n	8002934 <HAL_ADC_ConfigChannel+0x5a8>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290a:	fa93 f3a3 	rbit	r3, r3
 800290e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002912:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800291a:	2320      	movs	r3, #32
 800291c:	e003      	b.n	8002926 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800291e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002920:	fab3 f383 	clz	r3, r3
 8002924:	b2db      	uxtb	r3, r3
 8002926:	3301      	adds	r3, #1
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	4613      	mov	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002934:	430b      	orrs	r3, r1
 8002936:	e07e      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002940:	2b00      	cmp	r3, #0
 8002942:	d107      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x5c8>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	0e9b      	lsrs	r3, r3, #26
 800294a:	3301      	adds	r3, #1
 800294c:	069b      	lsls	r3, r3, #26
 800294e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002952:	e015      	b.n	8002980 <HAL_ADC_ConfigChannel+0x5f4>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002964:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800296c:	2320      	movs	r3, #32
 800296e:	e003      	b.n	8002978 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	3301      	adds	r3, #1
 800297a:	069b      	lsls	r3, r3, #26
 800297c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002988:	2b00      	cmp	r3, #0
 800298a:	d109      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x614>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0e9b      	lsrs	r3, r3, #26
 8002992:	3301      	adds	r3, #1
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2101      	movs	r1, #1
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	e017      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x644>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	61fb      	str	r3, [r7, #28]
  return result;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80029b8:	2320      	movs	r3, #32
 80029ba:	e003      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	2101      	movs	r1, #1
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	ea42 0103 	orr.w	r1, r2, r3
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10d      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x670>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	0e9b      	lsrs	r3, r3, #26
 80029e6:	3301      	adds	r3, #1
 80029e8:	f003 021f 	and.w	r2, r3, #31
 80029ec:	4613      	mov	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4413      	add	r3, r2
 80029f2:	3b1e      	subs	r3, #30
 80029f4:	051b      	lsls	r3, r3, #20
 80029f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029fa:	e01b      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x6a8>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	fa93 f3a3 	rbit	r3, r3
 8002a08:	613b      	str	r3, [r7, #16]
  return result;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002a14:	2320      	movs	r3, #32
 8002a16:	e003      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	3301      	adds	r3, #1
 8002a22:	f003 021f 	and.w	r2, r3, #31
 8002a26:	4613      	mov	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3b1e      	subs	r3, #30
 8002a2e:	051b      	lsls	r3, r3, #20
 8002a30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a34:	430b      	orrs	r3, r1
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	6892      	ldr	r2, [r2, #8]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	f7fe ffcd 	bl	80019da <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_ADC_ConfigChannel+0x6e0>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80be 	beq.w	8002bca <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a56:	d004      	beq.n	8002a62 <HAL_ADC_ConfigChannel+0x6d6>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <HAL_ADC_ConfigChannel+0x6e4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d10a      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x6ec>
 8002a62:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <HAL_ADC_ConfigChannel+0x6e8>)
 8002a64:	e009      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x6ee>
 8002a66:	bf00      	nop
 8002a68:	407f0000 	.word	0x407f0000
 8002a6c:	80080000 	.word	0x80080000
 8002a70:	50000100 	.word	0x50000100
 8002a74:	50000300 	.word	0x50000300
 8002a78:	4b59      	ldr	r3, [pc, #356]	; (8002be0 <HAL_ADC_ConfigChannel+0x854>)
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fec2 	bl	8001804 <LL_ADC_GetCommonPathInternalCh>
 8002a80:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a56      	ldr	r2, [pc, #344]	; (8002be4 <HAL_ADC_ConfigChannel+0x858>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_ADC_ConfigChannel+0x70c>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a55      	ldr	r2, [pc, #340]	; (8002be8 <HAL_ADC_ConfigChannel+0x85c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d13a      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d134      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aac:	d005      	beq.n	8002aba <HAL_ADC_ConfigChannel+0x72e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a4e      	ldr	r2, [pc, #312]	; (8002bec <HAL_ADC_ConfigChannel+0x860>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	f040 8085 	bne.w	8002bc4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac2:	d004      	beq.n	8002ace <HAL_ADC_ConfigChannel+0x742>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a49      	ldr	r2, [pc, #292]	; (8002bf0 <HAL_ADC_ConfigChannel+0x864>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x746>
 8002ace:	4a49      	ldr	r2, [pc, #292]	; (8002bf4 <HAL_ADC_ConfigChannel+0x868>)
 8002ad0:	e000      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x748>
 8002ad2:	4a43      	ldr	r2, [pc, #268]	; (8002be0 <HAL_ADC_ConfigChannel+0x854>)
 8002ad4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ad8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002adc:	4619      	mov	r1, r3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f7fe fe7d 	bl	80017de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ae4:	4b44      	ldr	r3, [pc, #272]	; (8002bf8 <HAL_ADC_ConfigChannel+0x86c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	099b      	lsrs	r3, r3, #6
 8002aea:	4a44      	ldr	r2, [pc, #272]	; (8002bfc <HAL_ADC_ConfigChannel+0x870>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	099b      	lsrs	r3, r3, #6
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002afe:	e002      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1f9      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b0c:	e05a      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a3b      	ldr	r2, [pc, #236]	; (8002c00 <HAL_ADC_ConfigChannel+0x874>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d125      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x7d8>
 8002b18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d11f      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a31      	ldr	r2, [pc, #196]	; (8002bf0 <HAL_ADC_ConfigChannel+0x864>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d104      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x7ac>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a34      	ldr	r2, [pc, #208]	; (8002c04 <HAL_ADC_ConfigChannel+0x878>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d047      	beq.n	8002bc8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b40:	d004      	beq.n	8002b4c <HAL_ADC_ConfigChannel+0x7c0>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a2a      	ldr	r2, [pc, #168]	; (8002bf0 <HAL_ADC_ConfigChannel+0x864>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x7c4>
 8002b4c:	4a29      	ldr	r2, [pc, #164]	; (8002bf4 <HAL_ADC_ConfigChannel+0x868>)
 8002b4e:	e000      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x7c6>
 8002b50:	4a23      	ldr	r2, [pc, #140]	; (8002be0 <HAL_ADC_ConfigChannel+0x854>)
 8002b52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	f7fe fe3e 	bl	80017de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b62:	e031      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a27      	ldr	r2, [pc, #156]	; (8002c08 <HAL_ADC_ConfigChannel+0x87c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d12d      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d127      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a1c      	ldr	r2, [pc, #112]	; (8002bf0 <HAL_ADC_ConfigChannel+0x864>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d022      	beq.n	8002bca <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b8c:	d004      	beq.n	8002b98 <HAL_ADC_ConfigChannel+0x80c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <HAL_ADC_ConfigChannel+0x864>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d101      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x810>
 8002b98:	4a16      	ldr	r2, [pc, #88]	; (8002bf4 <HAL_ADC_ConfigChannel+0x868>)
 8002b9a:	e000      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x812>
 8002b9c:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <HAL_ADC_ConfigChannel+0x854>)
 8002b9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ba2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4610      	mov	r0, r2
 8002baa:	f7fe fe18 	bl	80017de <LL_ADC_SetCommonPathInternalCh>
 8002bae:	e00c      	b.n	8002bca <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	f043 0220 	orr.w	r2, r3, #32
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002bc2:	e002      	b.n	8002bca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bc4:	bf00      	nop
 8002bc6:	e000      	b.n	8002bca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bc8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002bd2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	37d8      	adds	r7, #216	; 0xd8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	50000700 	.word	0x50000700
 8002be4:	c3210000 	.word	0xc3210000
 8002be8:	90c00010 	.word	0x90c00010
 8002bec:	50000600 	.word	0x50000600
 8002bf0:	50000100 	.word	0x50000100
 8002bf4:	50000300 	.word	0x50000300
 8002bf8:	20000004 	.word	0x20000004
 8002bfc:	053e2d63 	.word	0x053e2d63
 8002c00:	c7520000 	.word	0xc7520000
 8002c04:	50000500 	.word	0x50000500
 8002c08:	cb840000 	.word	0xcb840000

08002c0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe ffaf 	bl	8001b7c <LL_ADC_IsEnabled>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d14d      	bne.n	8002cc0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <ADC_Enable+0xc0>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00d      	beq.n	8002c4e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	f043 0210 	orr.w	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c42:	f043 0201 	orr.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e039      	b.n	8002cc2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe ff7e 	bl	8001b54 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c58:	f7fe fd80 	bl	800175c <HAL_GetTick>
 8002c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c5e:	e028      	b.n	8002cb2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe ff89 	bl	8001b7c <LL_ADC_IsEnabled>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d104      	bne.n	8002c7a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fe ff6d 	bl	8001b54 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c7a:	f7fe fd6f 	bl	800175c <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d914      	bls.n	8002cb2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d00d      	beq.n	8002cb2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9a:	f043 0210 	orr.w	r2, r3, #16
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca6:	f043 0201 	orr.w	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e007      	b.n	8002cc2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d1cf      	bne.n	8002c60 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	8000003f 	.word	0x8000003f

08002cd0 <LL_ADC_IsEnabled>:
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <LL_ADC_IsEnabled+0x18>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <LL_ADC_IsEnabled+0x1a>
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d101      	bne.n	8002d0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b0a1      	sub	sp, #132	; 0x84
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e0e7      	b.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002d42:	2300      	movs	r3, #0
 8002d44:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002d46:	2300      	movs	r3, #0
 8002d48:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d52:	d102      	bne.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d54:	4b6f      	ldr	r3, [pc, #444]	; (8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	e009      	b.n	8002d6e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a6e      	ldr	r2, [pc, #440]	; (8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d102      	bne.n	8002d6a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002d64:	4b6d      	ldr	r3, [pc, #436]	; (8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	e001      	b.n	8002d6e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10b      	bne.n	8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	f043 0220 	orr.w	r2, r3, #32
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0be      	b.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ffb1 	bl	8002cf6 <LL_ADC_REG_IsConversionOngoing>
 8002d94:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ffab 	bl	8002cf6 <LL_ADC_REG_IsConversionOngoing>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f040 80a0 	bne.w	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f040 809c 	bne.w	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002db8:	d004      	beq.n	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a55      	ldr	r2, [pc, #340]	; (8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002dc4:	4b56      	ldr	r3, [pc, #344]	; (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002dc6:	e000      	b.n	8002dca <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002dc8:	4b56      	ldr	r3, [pc, #344]	; (8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002dca:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d04b      	beq.n	8002e6c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	6859      	ldr	r1, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002de6:	035b      	lsls	r3, r3, #13
 8002de8:	430b      	orrs	r3, r1
 8002dea:	431a      	orrs	r2, r3
 8002dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002df8:	d004      	beq.n	8002e04 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a45      	ldr	r2, [pc, #276]	; (8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d10f      	bne.n	8002e24 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002e04:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e08:	f7ff ff62 	bl	8002cd0 <LL_ADC_IsEnabled>
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	4841      	ldr	r0, [pc, #260]	; (8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e10:	f7ff ff5e 	bl	8002cd0 <LL_ADC_IsEnabled>
 8002e14:	4603      	mov	r3, r0
 8002e16:	4323      	orrs	r3, r4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	e012      	b.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002e24:	483c      	ldr	r0, [pc, #240]	; (8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002e26:	f7ff ff53 	bl	8002cd0 <LL_ADC_IsEnabled>
 8002e2a:	4604      	mov	r4, r0
 8002e2c:	483b      	ldr	r0, [pc, #236]	; (8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002e2e:	f7ff ff4f 	bl	8002cd0 <LL_ADC_IsEnabled>
 8002e32:	4603      	mov	r3, r0
 8002e34:	431c      	orrs	r4, r3
 8002e36:	483c      	ldr	r0, [pc, #240]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002e38:	f7ff ff4a 	bl	8002cd0 <LL_ADC_IsEnabled>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	4323      	orrs	r3, r4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d056      	beq.n	8002efc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e56:	f023 030f 	bic.w	r3, r3, #15
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	6811      	ldr	r1, [r2, #0]
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	6892      	ldr	r2, [r2, #8]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	431a      	orrs	r2, r3
 8002e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e68:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e6a:	e047      	b.n	8002efc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e76:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e80:	d004      	beq.n	8002e8c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a23      	ldr	r2, [pc, #140]	; (8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d10f      	bne.n	8002eac <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002e8c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e90:	f7ff ff1e 	bl	8002cd0 <LL_ADC_IsEnabled>
 8002e94:	4604      	mov	r4, r0
 8002e96:	481f      	ldr	r0, [pc, #124]	; (8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e98:	f7ff ff1a 	bl	8002cd0 <LL_ADC_IsEnabled>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4323      	orrs	r3, r4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	e012      	b.n	8002ed2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002eac:	481a      	ldr	r0, [pc, #104]	; (8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002eae:	f7ff ff0f 	bl	8002cd0 <LL_ADC_IsEnabled>
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	4819      	ldr	r0, [pc, #100]	; (8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002eb6:	f7ff ff0b 	bl	8002cd0 <LL_ADC_IsEnabled>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	431c      	orrs	r4, r3
 8002ebe:	481a      	ldr	r0, [pc, #104]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002ec0:	f7ff ff06 	bl	8002cd0 <LL_ADC_IsEnabled>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4323      	orrs	r3, r4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d012      	beq.n	8002efc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ede:	f023 030f 	bic.w	r3, r3, #15
 8002ee2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ee4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ee6:	e009      	b.n	8002efc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eec:	f043 0220 	orr.w	r2, r3, #32
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002efa:	e000      	b.n	8002efe <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002efc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f06:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3784      	adds	r7, #132	; 0x84
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd90      	pop	{r4, r7, pc}
 8002f12:	bf00      	nop
 8002f14:	50000100 	.word	0x50000100
 8002f18:	50000400 	.word	0x50000400
 8002f1c:	50000500 	.word	0x50000500
 8002f20:	50000300 	.word	0x50000300
 8002f24:	50000700 	.word	0x50000700
 8002f28:	50000600 	.word	0x50000600

08002f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <__NVIC_SetPriorityGrouping+0x44>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5e:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <__NVIC_SetPriorityGrouping+0x44>)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	60d3      	str	r3, [r2, #12]
}
 8002f64:	bf00      	nop
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <__NVIC_GetPriorityGrouping+0x18>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	f003 0307 	and.w	r3, r3, #7
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	db0b      	blt.n	8002fba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	f003 021f 	and.w	r2, r3, #31
 8002fa8:	4907      	ldr	r1, [pc, #28]	; (8002fc8 <__NVIC_EnableIRQ+0x38>)
 8002faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	e000e100 	.word	0xe000e100

08002fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	6039      	str	r1, [r7, #0]
 8002fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	db0a      	blt.n	8002ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	490c      	ldr	r1, [pc, #48]	; (8003018 <__NVIC_SetPriority+0x4c>)
 8002fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fea:	0112      	lsls	r2, r2, #4
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	440b      	add	r3, r1
 8002ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff4:	e00a      	b.n	800300c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	4908      	ldr	r1, [pc, #32]	; (800301c <__NVIC_SetPriority+0x50>)
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	3b04      	subs	r3, #4
 8003004:	0112      	lsls	r2, r2, #4
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	440b      	add	r3, r1
 800300a:	761a      	strb	r2, [r3, #24]
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	e000e100 	.word	0xe000e100
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003020:	b480      	push	{r7}
 8003022:	b089      	sub	sp, #36	; 0x24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f1c3 0307 	rsb	r3, r3, #7
 800303a:	2b04      	cmp	r3, #4
 800303c:	bf28      	it	cs
 800303e:	2304      	movcs	r3, #4
 8003040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3304      	adds	r3, #4
 8003046:	2b06      	cmp	r3, #6
 8003048:	d902      	bls.n	8003050 <NVIC_EncodePriority+0x30>
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	3b03      	subs	r3, #3
 800304e:	e000      	b.n	8003052 <NVIC_EncodePriority+0x32>
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003054:	f04f 32ff 	mov.w	r2, #4294967295
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43da      	mvns	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	401a      	ands	r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003068:	f04f 31ff 	mov.w	r1, #4294967295
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	fa01 f303 	lsl.w	r3, r1, r3
 8003072:	43d9      	mvns	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003078:	4313      	orrs	r3, r2
         );
}
 800307a:	4618      	mov	r0, r3
 800307c:	3724      	adds	r7, #36	; 0x24
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7ff ff4c 	bl	8002f2c <__NVIC_SetPriorityGrouping>
}
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030aa:	f7ff ff63 	bl	8002f74 <__NVIC_GetPriorityGrouping>
 80030ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	6978      	ldr	r0, [r7, #20]
 80030b6:	f7ff ffb3 	bl	8003020 <NVIC_EncodePriority>
 80030ba:	4602      	mov	r2, r0
 80030bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff ff82 	bl	8002fcc <__NVIC_SetPriority>
}
 80030c8:	bf00      	nop
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff ff56 	bl	8002f90 <__NVIC_EnableIRQ>
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d005      	beq.n	8003110 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2204      	movs	r2, #4
 8003108:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
 800310e:	e037      	b.n	8003180 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 020e 	bic.w	r2, r2, #14
 800311e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800312e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0201 	bic.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	f003 021f 	and.w	r2, r3, #31
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	2101      	movs	r1, #1
 800314e:	fa01 f202 	lsl.w	r2, r1, r2
 8003152:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800315c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00c      	beq.n	8003180 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003174:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800317e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003190:	7bfb      	ldrb	r3, [r7, #15]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d00d      	beq.n	80031d2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2204      	movs	r2, #4
 80031ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
 80031d0:	e047      	b.n	8003262 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 020e 	bic.w	r2, r2, #14
 80031e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0201 	bic.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003200:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	f003 021f 	and.w	r2, r3, #31
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	2101      	movs	r1, #1
 8003210:	fa01 f202 	lsl.w	r2, r1, r2
 8003214:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800321e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00c      	beq.n	8003242 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003236:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003240:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	4798      	blx	r3
    }
  }
  return status;
 8003262:	7bfb      	ldrb	r3, [r7, #15]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800327a:	e15a      	b.n	8003532 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	2101      	movs	r1, #1
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	fa01 f303 	lsl.w	r3, r1, r3
 8003288:	4013      	ands	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 814c 	beq.w	800352c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d005      	beq.n	80032ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d130      	bne.n	800330e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2203      	movs	r2, #3
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4013      	ands	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032e2:	2201      	movs	r2, #1
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4013      	ands	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	091b      	lsrs	r3, r3, #4
 80032f8:	f003 0201 	and.w	r2, r3, #1
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	2b03      	cmp	r3, #3
 8003318:	d017      	beq.n	800334a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	2203      	movs	r2, #3
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d123      	bne.n	800339e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	08da      	lsrs	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3208      	adds	r2, #8
 800335e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003362:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	220f      	movs	r2, #15
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4013      	ands	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	08da      	lsrs	r2, r3, #3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3208      	adds	r2, #8
 8003398:	6939      	ldr	r1, [r7, #16]
 800339a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	2203      	movs	r2, #3
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4013      	ands	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0203 	and.w	r2, r3, #3
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80a6 	beq.w	800352c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e0:	4b5b      	ldr	r3, [pc, #364]	; (8003550 <HAL_GPIO_Init+0x2e4>)
 80033e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e4:	4a5a      	ldr	r2, [pc, #360]	; (8003550 <HAL_GPIO_Init+0x2e4>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	6613      	str	r3, [r2, #96]	; 0x60
 80033ec:	4b58      	ldr	r3, [pc, #352]	; (8003550 <HAL_GPIO_Init+0x2e4>)
 80033ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033f8:	4a56      	ldr	r2, [pc, #344]	; (8003554 <HAL_GPIO_Init+0x2e8>)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	089b      	lsrs	r3, r3, #2
 80033fe:	3302      	adds	r3, #2
 8003400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003404:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	220f      	movs	r2, #15
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4013      	ands	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003422:	d01f      	beq.n	8003464 <HAL_GPIO_Init+0x1f8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a4c      	ldr	r2, [pc, #304]	; (8003558 <HAL_GPIO_Init+0x2ec>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d019      	beq.n	8003460 <HAL_GPIO_Init+0x1f4>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a4b      	ldr	r2, [pc, #300]	; (800355c <HAL_GPIO_Init+0x2f0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d013      	beq.n	800345c <HAL_GPIO_Init+0x1f0>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a4a      	ldr	r2, [pc, #296]	; (8003560 <HAL_GPIO_Init+0x2f4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00d      	beq.n	8003458 <HAL_GPIO_Init+0x1ec>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a49      	ldr	r2, [pc, #292]	; (8003564 <HAL_GPIO_Init+0x2f8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d007      	beq.n	8003454 <HAL_GPIO_Init+0x1e8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a48      	ldr	r2, [pc, #288]	; (8003568 <HAL_GPIO_Init+0x2fc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d101      	bne.n	8003450 <HAL_GPIO_Init+0x1e4>
 800344c:	2305      	movs	r3, #5
 800344e:	e00a      	b.n	8003466 <HAL_GPIO_Init+0x1fa>
 8003450:	2306      	movs	r3, #6
 8003452:	e008      	b.n	8003466 <HAL_GPIO_Init+0x1fa>
 8003454:	2304      	movs	r3, #4
 8003456:	e006      	b.n	8003466 <HAL_GPIO_Init+0x1fa>
 8003458:	2303      	movs	r3, #3
 800345a:	e004      	b.n	8003466 <HAL_GPIO_Init+0x1fa>
 800345c:	2302      	movs	r3, #2
 800345e:	e002      	b.n	8003466 <HAL_GPIO_Init+0x1fa>
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <HAL_GPIO_Init+0x1fa>
 8003464:	2300      	movs	r3, #0
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	f002 0203 	and.w	r2, r2, #3
 800346c:	0092      	lsls	r2, r2, #2
 800346e:	4093      	lsls	r3, r2
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003476:	4937      	ldr	r1, [pc, #220]	; (8003554 <HAL_GPIO_Init+0x2e8>)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	3302      	adds	r3, #2
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003484:	4b39      	ldr	r3, [pc, #228]	; (800356c <HAL_GPIO_Init+0x300>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	43db      	mvns	r3, r3
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4013      	ands	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034a8:	4a30      	ldr	r2, [pc, #192]	; (800356c <HAL_GPIO_Init+0x300>)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034ae:	4b2f      	ldr	r3, [pc, #188]	; (800356c <HAL_GPIO_Init+0x300>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4013      	ands	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034d2:	4a26      	ldr	r2, [pc, #152]	; (800356c <HAL_GPIO_Init+0x300>)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80034d8:	4b24      	ldr	r3, [pc, #144]	; (800356c <HAL_GPIO_Init+0x300>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034fc:	4a1b      	ldr	r2, [pc, #108]	; (800356c <HAL_GPIO_Init+0x300>)
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003502:	4b1a      	ldr	r3, [pc, #104]	; (800356c <HAL_GPIO_Init+0x300>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	43db      	mvns	r3, r3
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003526:	4a11      	ldr	r2, [pc, #68]	; (800356c <HAL_GPIO_Init+0x300>)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3301      	adds	r3, #1
 8003530:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	f47f ae9d 	bne.w	800327c <HAL_GPIO_Init+0x10>
  }
}
 8003542:	bf00      	nop
 8003544:	bf00      	nop
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	40021000 	.word	0x40021000
 8003554:	40010000 	.word	0x40010000
 8003558:	48000400 	.word	0x48000400
 800355c:	48000800 	.word	0x48000800
 8003560:	48000c00 	.word	0x48000c00
 8003564:	48001000 	.word	0x48001000
 8003568:	48001400 	.word	0x48001400
 800356c:	40010400 	.word	0x40010400

08003570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	807b      	strh	r3, [r7, #2]
 800357c:	4613      	mov	r3, r2
 800357e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003580:	787b      	ldrb	r3, [r7, #1]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003586:	887a      	ldrh	r2, [r7, #2]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800358c:	e002      	b.n	8003594 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800358e:	887a      	ldrh	r2, [r7, #2]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035aa:	4b08      	ldr	r3, [pc, #32]	; (80035cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d006      	beq.n	80035c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035b6:	4a05      	ldr	r2, [pc, #20]	; (80035cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035b8:	88fb      	ldrh	r3, [r7, #6]
 80035ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 f806 	bl	80035d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80035c4:	bf00      	nop
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40010400 	.word	0x40010400

080035d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d141      	bne.n	800367a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035f6:	4b4b      	ldr	r3, [pc, #300]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003602:	d131      	bne.n	8003668 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003604:	4b47      	ldr	r3, [pc, #284]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800360a:	4a46      	ldr	r2, [pc, #280]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800360c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003610:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003614:	4b43      	ldr	r3, [pc, #268]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800361c:	4a41      	ldr	r2, [pc, #260]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003622:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003624:	4b40      	ldr	r3, [pc, #256]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2232      	movs	r2, #50	; 0x32
 800362a:	fb02 f303 	mul.w	r3, r2, r3
 800362e:	4a3f      	ldr	r2, [pc, #252]	; (800372c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003630:	fba2 2303 	umull	r2, r3, r2, r3
 8003634:	0c9b      	lsrs	r3, r3, #18
 8003636:	3301      	adds	r3, #1
 8003638:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800363a:	e002      	b.n	8003642 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	3b01      	subs	r3, #1
 8003640:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003642:	4b38      	ldr	r3, [pc, #224]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364e:	d102      	bne.n	8003656 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f2      	bne.n	800363c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003656:	4b33      	ldr	r3, [pc, #204]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003662:	d158      	bne.n	8003716 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e057      	b.n	8003718 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003668:	4b2e      	ldr	r3, [pc, #184]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800366e:	4a2d      	ldr	r2, [pc, #180]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003674:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003678:	e04d      	b.n	8003716 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003680:	d141      	bne.n	8003706 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003682:	4b28      	ldr	r3, [pc, #160]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800368a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368e:	d131      	bne.n	80036f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003690:	4b24      	ldr	r3, [pc, #144]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003696:	4a23      	ldr	r2, [pc, #140]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036a0:	4b20      	ldr	r3, [pc, #128]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036a8:	4a1e      	ldr	r2, [pc, #120]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036b0:	4b1d      	ldr	r3, [pc, #116]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2232      	movs	r2, #50	; 0x32
 80036b6:	fb02 f303 	mul.w	r3, r2, r3
 80036ba:	4a1c      	ldr	r2, [pc, #112]	; (800372c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036bc:	fba2 2303 	umull	r2, r3, r2, r3
 80036c0:	0c9b      	lsrs	r3, r3, #18
 80036c2:	3301      	adds	r3, #1
 80036c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036c6:	e002      	b.n	80036ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036da:	d102      	bne.n	80036e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f2      	bne.n	80036c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036e2:	4b10      	ldr	r3, [pc, #64]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ee:	d112      	bne.n	8003716 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e011      	b.n	8003718 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036f4:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036fa:	4a0a      	ldr	r2, [pc, #40]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003700:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003704:	e007      	b.n	8003716 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003706:	4b07      	ldr	r3, [pc, #28]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800370e:	4a05      	ldr	r2, [pc, #20]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003710:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003714:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40007000 	.word	0x40007000
 8003728:	20000004 	.word	0x20000004
 800372c:	431bde83 	.word	0x431bde83

08003730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e306      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d075      	beq.n	800383a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800374e:	4b97      	ldr	r3, [pc, #604]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 030c 	and.w	r3, r3, #12
 8003756:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003758:	4b94      	ldr	r3, [pc, #592]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	2b0c      	cmp	r3, #12
 8003766:	d102      	bne.n	800376e <HAL_RCC_OscConfig+0x3e>
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2b03      	cmp	r3, #3
 800376c:	d002      	beq.n	8003774 <HAL_RCC_OscConfig+0x44>
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b08      	cmp	r3, #8
 8003772:	d10b      	bne.n	800378c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003774:	4b8d      	ldr	r3, [pc, #564]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d05b      	beq.n	8003838 <HAL_RCC_OscConfig+0x108>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d157      	bne.n	8003838 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e2e1      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003794:	d106      	bne.n	80037a4 <HAL_RCC_OscConfig+0x74>
 8003796:	4b85      	ldr	r3, [pc, #532]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a84      	ldr	r2, [pc, #528]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 800379c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	e01d      	b.n	80037e0 <HAL_RCC_OscConfig+0xb0>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037ac:	d10c      	bne.n	80037c8 <HAL_RCC_OscConfig+0x98>
 80037ae:	4b7f      	ldr	r3, [pc, #508]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a7e      	ldr	r2, [pc, #504]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 80037b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	4b7c      	ldr	r3, [pc, #496]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a7b      	ldr	r2, [pc, #492]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 80037c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	e00b      	b.n	80037e0 <HAL_RCC_OscConfig+0xb0>
 80037c8:	4b78      	ldr	r3, [pc, #480]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a77      	ldr	r2, [pc, #476]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 80037ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	4b75      	ldr	r3, [pc, #468]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a74      	ldr	r2, [pc, #464]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 80037da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d013      	beq.n	8003810 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e8:	f7fd ffb8 	bl	800175c <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f0:	f7fd ffb4 	bl	800175c <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b64      	cmp	r3, #100	; 0x64
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e2a6      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003802:	4b6a      	ldr	r3, [pc, #424]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCC_OscConfig+0xc0>
 800380e:	e014      	b.n	800383a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003810:	f7fd ffa4 	bl	800175c <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003818:	f7fd ffa0 	bl	800175c <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b64      	cmp	r3, #100	; 0x64
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e292      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800382a:	4b60      	ldr	r3, [pc, #384]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f0      	bne.n	8003818 <HAL_RCC_OscConfig+0xe8>
 8003836:	e000      	b.n	800383a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d075      	beq.n	8003932 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003846:	4b59      	ldr	r3, [pc, #356]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 030c 	and.w	r3, r3, #12
 800384e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003850:	4b56      	ldr	r3, [pc, #344]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b0c      	cmp	r3, #12
 800385e:	d102      	bne.n	8003866 <HAL_RCC_OscConfig+0x136>
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d002      	beq.n	800386c <HAL_RCC_OscConfig+0x13c>
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	2b04      	cmp	r3, #4
 800386a:	d11f      	bne.n	80038ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800386c:	4b4f      	ldr	r3, [pc, #316]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_OscConfig+0x154>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e265      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003884:	4b49      	ldr	r3, [pc, #292]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	061b      	lsls	r3, r3, #24
 8003892:	4946      	ldr	r1, [pc, #280]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003898:	4b45      	ldr	r3, [pc, #276]	; (80039b0 <HAL_RCC_OscConfig+0x280>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f7fd facf 	bl	8000e40 <HAL_InitTick>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d043      	beq.n	8003930 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e251      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d023      	beq.n	80038fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b4:	4b3d      	ldr	r3, [pc, #244]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a3c      	ldr	r2, [pc, #240]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 80038ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c0:	f7fd ff4c 	bl	800175c <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c8:	f7fd ff48 	bl	800175c <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e23a      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038da:	4b34      	ldr	r3, [pc, #208]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e6:	4b31      	ldr	r3, [pc, #196]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	061b      	lsls	r3, r3, #24
 80038f4:	492d      	ldr	r1, [pc, #180]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	604b      	str	r3, [r1, #4]
 80038fa:	e01a      	b.n	8003932 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038fc:	4b2b      	ldr	r3, [pc, #172]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a2a      	ldr	r2, [pc, #168]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 8003902:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7fd ff28 	bl	800175c <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003910:	f7fd ff24 	bl	800175c <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e216      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003922:	4b22      	ldr	r3, [pc, #136]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0x1e0>
 800392e:	e000      	b.n	8003932 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003930:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d041      	beq.n	80039c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d01c      	beq.n	8003980 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003946:	4b19      	ldr	r3, [pc, #100]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 8003948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800394c:	4a17      	ldr	r2, [pc, #92]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003956:	f7fd ff01 	bl	800175c <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800395e:	f7fd fefd 	bl	800175c <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e1ef      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003970:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 8003972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0ef      	beq.n	800395e <HAL_RCC_OscConfig+0x22e>
 800397e:	e020      	b.n	80039c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003980:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 8003982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003986:	4a09      	ldr	r2, [pc, #36]	; (80039ac <HAL_RCC_OscConfig+0x27c>)
 8003988:	f023 0301 	bic.w	r3, r3, #1
 800398c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003990:	f7fd fee4 	bl	800175c <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003996:	e00d      	b.n	80039b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003998:	f7fd fee0 	bl	800175c <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d906      	bls.n	80039b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e1d2      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
 80039b0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039b4:	4b8c      	ldr	r3, [pc, #560]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 80039b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1ea      	bne.n	8003998 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80a6 	beq.w	8003b1c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039d0:	2300      	movs	r3, #0
 80039d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039d4:	4b84      	ldr	r3, [pc, #528]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 80039d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_RCC_OscConfig+0x2b4>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <HAL_RCC_OscConfig+0x2b6>
 80039e4:	2300      	movs	r3, #0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00d      	beq.n	8003a06 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ea:	4b7f      	ldr	r3, [pc, #508]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 80039ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ee:	4a7e      	ldr	r2, [pc, #504]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 80039f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f4:	6593      	str	r3, [r2, #88]	; 0x58
 80039f6:	4b7c      	ldr	r3, [pc, #496]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 80039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a02:	2301      	movs	r3, #1
 8003a04:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a06:	4b79      	ldr	r3, [pc, #484]	; (8003bec <HAL_RCC_OscConfig+0x4bc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d118      	bne.n	8003a44 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a12:	4b76      	ldr	r3, [pc, #472]	; (8003bec <HAL_RCC_OscConfig+0x4bc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a75      	ldr	r2, [pc, #468]	; (8003bec <HAL_RCC_OscConfig+0x4bc>)
 8003a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a1e:	f7fd fe9d 	bl	800175c <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a26:	f7fd fe99 	bl	800175c <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e18b      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a38:	4b6c      	ldr	r3, [pc, #432]	; (8003bec <HAL_RCC_OscConfig+0x4bc>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d108      	bne.n	8003a5e <HAL_RCC_OscConfig+0x32e>
 8003a4c:	4b66      	ldr	r3, [pc, #408]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a52:	4a65      	ldr	r2, [pc, #404]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a5c:	e024      	b.n	8003aa8 <HAL_RCC_OscConfig+0x378>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d110      	bne.n	8003a88 <HAL_RCC_OscConfig+0x358>
 8003a66:	4b60      	ldr	r3, [pc, #384]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6c:	4a5e      	ldr	r2, [pc, #376]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003a6e:	f043 0304 	orr.w	r3, r3, #4
 8003a72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a76:	4b5c      	ldr	r3, [pc, #368]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7c:	4a5a      	ldr	r2, [pc, #360]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a86:	e00f      	b.n	8003aa8 <HAL_RCC_OscConfig+0x378>
 8003a88:	4b57      	ldr	r3, [pc, #348]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8e:	4a56      	ldr	r2, [pc, #344]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a98:	4b53      	ldr	r3, [pc, #332]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9e:	4a52      	ldr	r2, [pc, #328]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003aa0:	f023 0304 	bic.w	r3, r3, #4
 8003aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d016      	beq.n	8003ade <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab0:	f7fd fe54 	bl	800175c <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab6:	e00a      	b.n	8003ace <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab8:	f7fd fe50 	bl	800175c <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e140      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ace:	4b46      	ldr	r3, [pc, #280]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ed      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x388>
 8003adc:	e015      	b.n	8003b0a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ade:	f7fd fe3d 	bl	800175c <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ae4:	e00a      	b.n	8003afc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7fd fe39 	bl	800175c <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e129      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003afc:	4b3a      	ldr	r3, [pc, #232]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1ed      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b0a:	7ffb      	ldrb	r3, [r7, #31]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d105      	bne.n	8003b1c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b10:	4b35      	ldr	r3, [pc, #212]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b14:	4a34      	ldr	r2, [pc, #208]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d03c      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01c      	beq.n	8003b6a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b30:	4b2d      	ldr	r3, [pc, #180]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003b32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b36:	4a2c      	ldr	r2, [pc, #176]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b40:	f7fd fe0c 	bl	800175c <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b48:	f7fd fe08 	bl	800175c <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e0fa      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b5a:	4b23      	ldr	r3, [pc, #140]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003b5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0ef      	beq.n	8003b48 <HAL_RCC_OscConfig+0x418>
 8003b68:	e01b      	b.n	8003ba2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b6a:	4b1f      	ldr	r3, [pc, #124]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003b6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b70:	4a1d      	ldr	r2, [pc, #116]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003b72:	f023 0301 	bic.w	r3, r3, #1
 8003b76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7a:	f7fd fdef 	bl	800175c <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b82:	f7fd fdeb 	bl	800175c <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e0dd      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b94:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1ef      	bne.n	8003b82 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 80d1 	beq.w	8003d4e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bac:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 030c 	and.w	r3, r3, #12
 8003bb4:	2b0c      	cmp	r3, #12
 8003bb6:	f000 808b 	beq.w	8003cd0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d15e      	bne.n	8003c80 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc2:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a08      	ldr	r2, [pc, #32]	; (8003be8 <HAL_RCC_OscConfig+0x4b8>)
 8003bc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bce:	f7fd fdc5 	bl	800175c <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd4:	e00c      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd6:	f7fd fdc1 	bl	800175c <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d905      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e0b3      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf0:	4b59      	ldr	r3, [pc, #356]	; (8003d58 <HAL_RCC_OscConfig+0x628>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ec      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bfc:	4b56      	ldr	r3, [pc, #344]	; (8003d58 <HAL_RCC_OscConfig+0x628>)
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	4b56      	ldr	r3, [pc, #344]	; (8003d5c <HAL_RCC_OscConfig+0x62c>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6a11      	ldr	r1, [r2, #32]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c0c:	3a01      	subs	r2, #1
 8003c0e:	0112      	lsls	r2, r2, #4
 8003c10:	4311      	orrs	r1, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c16:	0212      	lsls	r2, r2, #8
 8003c18:	4311      	orrs	r1, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c1e:	0852      	lsrs	r2, r2, #1
 8003c20:	3a01      	subs	r2, #1
 8003c22:	0552      	lsls	r2, r2, #21
 8003c24:	4311      	orrs	r1, r2
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c2a:	0852      	lsrs	r2, r2, #1
 8003c2c:	3a01      	subs	r2, #1
 8003c2e:	0652      	lsls	r2, r2, #25
 8003c30:	4311      	orrs	r1, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c36:	06d2      	lsls	r2, r2, #27
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	4947      	ldr	r1, [pc, #284]	; (8003d58 <HAL_RCC_OscConfig+0x628>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c40:	4b45      	ldr	r3, [pc, #276]	; (8003d58 <HAL_RCC_OscConfig+0x628>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a44      	ldr	r2, [pc, #272]	; (8003d58 <HAL_RCC_OscConfig+0x628>)
 8003c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c4a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c4c:	4b42      	ldr	r3, [pc, #264]	; (8003d58 <HAL_RCC_OscConfig+0x628>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	4a41      	ldr	r2, [pc, #260]	; (8003d58 <HAL_RCC_OscConfig+0x628>)
 8003c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fd fd80 	bl	800175c <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c60:	f7fd fd7c 	bl	800175c <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e06e      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c72:	4b39      	ldr	r3, [pc, #228]	; (8003d58 <HAL_RCC_OscConfig+0x628>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCC_OscConfig+0x530>
 8003c7e:	e066      	b.n	8003d4e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c80:	4b35      	ldr	r3, [pc, #212]	; (8003d58 <HAL_RCC_OscConfig+0x628>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a34      	ldr	r2, [pc, #208]	; (8003d58 <HAL_RCC_OscConfig+0x628>)
 8003c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c8a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c8c:	4b32      	ldr	r3, [pc, #200]	; (8003d58 <HAL_RCC_OscConfig+0x628>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	4a31      	ldr	r2, [pc, #196]	; (8003d58 <HAL_RCC_OscConfig+0x628>)
 8003c92:	f023 0303 	bic.w	r3, r3, #3
 8003c96:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003c98:	4b2f      	ldr	r3, [pc, #188]	; (8003d58 <HAL_RCC_OscConfig+0x628>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4a2e      	ldr	r2, [pc, #184]	; (8003d58 <HAL_RCC_OscConfig+0x628>)
 8003c9e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fd fd58 	bl	800175c <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fd fd54 	bl	800175c <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e046      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc2:	4b25      	ldr	r3, [pc, #148]	; (8003d58 <HAL_RCC_OscConfig+0x628>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x580>
 8003cce:	e03e      	b.n	8003d4e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e039      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003cdc:	4b1e      	ldr	r3, [pc, #120]	; (8003d58 <HAL_RCC_OscConfig+0x628>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f003 0203 	and.w	r2, r3, #3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d12c      	bne.n	8003d4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d123      	bne.n	8003d4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d11b      	bne.n	8003d4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d113      	bne.n	8003d4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	085b      	lsrs	r3, r3, #1
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d109      	bne.n	8003d4a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d40:	085b      	lsrs	r3, r3, #1
 8003d42:	3b01      	subs	r3, #1
 8003d44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d001      	beq.n	8003d4e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3720      	adds	r7, #32
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	019f800c 	.word	0x019f800c

08003d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e11e      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d78:	4b91      	ldr	r3, [pc, #580]	; (8003fc0 <HAL_RCC_ClockConfig+0x260>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d910      	bls.n	8003da8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b8e      	ldr	r3, [pc, #568]	; (8003fc0 <HAL_RCC_ClockConfig+0x260>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 020f 	bic.w	r2, r3, #15
 8003d8e:	498c      	ldr	r1, [pc, #560]	; (8003fc0 <HAL_RCC_ClockConfig+0x260>)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d96:	4b8a      	ldr	r3, [pc, #552]	; (8003fc0 <HAL_RCC_ClockConfig+0x260>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e106      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d073      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d129      	bne.n	8003e10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dbc:	4b81      	ldr	r3, [pc, #516]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0f4      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003dcc:	f000 f9d0 	bl	8004170 <RCC_GetSysClockFreqFromPLLSource>
 8003dd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4a7c      	ldr	r2, [pc, #496]	; (8003fc8 <HAL_RCC_ClockConfig+0x268>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d93f      	bls.n	8003e5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003dda:	4b7a      	ldr	r3, [pc, #488]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d033      	beq.n	8003e5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d12f      	bne.n	8003e5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003dfa:	4b72      	ldr	r3, [pc, #456]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e02:	4a70      	ldr	r2, [pc, #448]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e0a:	2380      	movs	r3, #128	; 0x80
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	e024      	b.n	8003e5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d107      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e18:	4b6a      	ldr	r3, [pc, #424]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d109      	bne.n	8003e38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0c6      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e28:	4b66      	ldr	r3, [pc, #408]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0be      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e38:	f000 f8ce 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8003e3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	4a61      	ldr	r2, [pc, #388]	; (8003fc8 <HAL_RCC_ClockConfig+0x268>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d909      	bls.n	8003e5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e46:	4b5f      	ldr	r3, [pc, #380]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e4e:	4a5d      	ldr	r2, [pc, #372]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e56:	2380      	movs	r3, #128	; 0x80
 8003e58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e5a:	4b5a      	ldr	r3, [pc, #360]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f023 0203 	bic.w	r2, r3, #3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	4957      	ldr	r1, [pc, #348]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e6c:	f7fd fc76 	bl	800175c <HAL_GetTick>
 8003e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e72:	e00a      	b.n	8003e8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e74:	f7fd fc72 	bl	800175c <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e095      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8a:	4b4e      	ldr	r3, [pc, #312]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 020c 	and.w	r2, r3, #12
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d1eb      	bne.n	8003e74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d023      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eb4:	4b43      	ldr	r3, [pc, #268]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	4a42      	ldr	r2, [pc, #264]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003eba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ebe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ecc:	4b3d      	ldr	r3, [pc, #244]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ed4:	4a3b      	ldr	r2, [pc, #236]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003ed6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003eda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003edc:	4b39      	ldr	r3, [pc, #228]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4936      	ldr	r1, [pc, #216]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2b80      	cmp	r3, #128	; 0x80
 8003ef4:	d105      	bne.n	8003f02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ef6:	4b33      	ldr	r3, [pc, #204]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	4a32      	ldr	r2, [pc, #200]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003efc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f02:	4b2f      	ldr	r3, [pc, #188]	; (8003fc0 <HAL_RCC_ClockConfig+0x260>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d21d      	bcs.n	8003f4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f10:	4b2b      	ldr	r3, [pc, #172]	; (8003fc0 <HAL_RCC_ClockConfig+0x260>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f023 020f 	bic.w	r2, r3, #15
 8003f18:	4929      	ldr	r1, [pc, #164]	; (8003fc0 <HAL_RCC_ClockConfig+0x260>)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f20:	f7fd fc1c 	bl	800175c <HAL_GetTick>
 8003f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f26:	e00a      	b.n	8003f3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f28:	f7fd fc18 	bl	800175c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e03b      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3e:	4b20      	ldr	r3, [pc, #128]	; (8003fc0 <HAL_RCC_ClockConfig+0x260>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d1ed      	bne.n	8003f28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f58:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4917      	ldr	r1, [pc, #92]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f76:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	490f      	ldr	r1, [pc, #60]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f8a:	f000 f825 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <HAL_RCC_ClockConfig+0x264>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	490c      	ldr	r1, [pc, #48]	; (8003fcc <HAL_RCC_ClockConfig+0x26c>)
 8003f9c:	5ccb      	ldrb	r3, [r1, r3]
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa6:	4a0a      	ldr	r2, [pc, #40]	; (8003fd0 <HAL_RCC_ClockConfig+0x270>)
 8003fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003faa:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <HAL_RCC_ClockConfig+0x274>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fc ff46 	bl	8000e40 <HAL_InitTick>
 8003fb4:	4603      	mov	r3, r0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40022000 	.word	0x40022000
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	04c4b400 	.word	0x04c4b400
 8003fcc:	0800a61c 	.word	0x0800a61c
 8003fd0:	20000004 	.word	0x20000004
 8003fd4:	20000008 	.word	0x20000008

08003fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003fde:	4b2c      	ldr	r3, [pc, #176]	; (8004090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d102      	bne.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fea:	4b2a      	ldr	r3, [pc, #168]	; (8004094 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fec:	613b      	str	r3, [r7, #16]
 8003fee:	e047      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ff0:	4b27      	ldr	r3, [pc, #156]	; (8004090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 030c 	and.w	r3, r3, #12
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d102      	bne.n	8004002 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ffc:	4b26      	ldr	r3, [pc, #152]	; (8004098 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	e03e      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004002:	4b23      	ldr	r3, [pc, #140]	; (8004090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 030c 	and.w	r3, r3, #12
 800400a:	2b0c      	cmp	r3, #12
 800400c:	d136      	bne.n	800407c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800400e:	4b20      	ldr	r3, [pc, #128]	; (8004090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004018:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <HAL_RCC_GetSysClockFreq+0xb8>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	091b      	lsrs	r3, r3, #4
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	3301      	adds	r3, #1
 8004024:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b03      	cmp	r3, #3
 800402a:	d10c      	bne.n	8004046 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800402c:	4a1a      	ldr	r2, [pc, #104]	; (8004098 <HAL_RCC_GetSysClockFreq+0xc0>)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	fbb2 f3f3 	udiv	r3, r2, r3
 8004034:	4a16      	ldr	r2, [pc, #88]	; (8004090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004036:	68d2      	ldr	r2, [r2, #12]
 8004038:	0a12      	lsrs	r2, r2, #8
 800403a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800403e:	fb02 f303 	mul.w	r3, r2, r3
 8004042:	617b      	str	r3, [r7, #20]
      break;
 8004044:	e00c      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004046:	4a13      	ldr	r2, [pc, #76]	; (8004094 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	fbb2 f3f3 	udiv	r3, r2, r3
 800404e:	4a10      	ldr	r2, [pc, #64]	; (8004090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004050:	68d2      	ldr	r2, [r2, #12]
 8004052:	0a12      	lsrs	r2, r2, #8
 8004054:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004058:	fb02 f303 	mul.w	r3, r2, r3
 800405c:	617b      	str	r3, [r7, #20]
      break;
 800405e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	0e5b      	lsrs	r3, r3, #25
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	3301      	adds	r3, #1
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	fbb2 f3f3 	udiv	r3, r2, r3
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	e001      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004080:	693b      	ldr	r3, [r7, #16]
}
 8004082:	4618      	mov	r0, r3
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000
 8004094:	00f42400 	.word	0x00f42400
 8004098:	016e3600 	.word	0x016e3600

0800409c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a0:	4b03      	ldr	r3, [pc, #12]	; (80040b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040a2:	681b      	ldr	r3, [r3, #0]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	20000004 	.word	0x20000004

080040b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040b8:	f7ff fff0 	bl	800409c <HAL_RCC_GetHCLKFreq>
 80040bc:	4602      	mov	r2, r0
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	0a1b      	lsrs	r3, r3, #8
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	4904      	ldr	r1, [pc, #16]	; (80040dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80040ca:	5ccb      	ldrb	r3, [r1, r3]
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40021000 	.word	0x40021000
 80040dc:	0800a62c 	.word	0x0800a62c

080040e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040e4:	f7ff ffda 	bl	800409c <HAL_RCC_GetHCLKFreq>
 80040e8:	4602      	mov	r2, r0
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	0adb      	lsrs	r3, r3, #11
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	4904      	ldr	r1, [pc, #16]	; (8004108 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040f6:	5ccb      	ldrb	r3, [r1, r3]
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004100:	4618      	mov	r0, r3
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40021000 	.word	0x40021000
 8004108:	0800a62c 	.word	0x0800a62c

0800410c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	220f      	movs	r2, #15
 800411a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800411c:	4b12      	ldr	r3, [pc, #72]	; (8004168 <HAL_RCC_GetClockConfig+0x5c>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 0203 	and.w	r2, r3, #3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004128:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <HAL_RCC_GetClockConfig+0x5c>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004134:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <HAL_RCC_GetClockConfig+0x5c>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004140:	4b09      	ldr	r3, [pc, #36]	; (8004168 <HAL_RCC_GetClockConfig+0x5c>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	08db      	lsrs	r3, r3, #3
 8004146:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800414e:	4b07      	ldr	r3, [pc, #28]	; (800416c <HAL_RCC_GetClockConfig+0x60>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 020f 	and.w	r2, r3, #15
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	601a      	str	r2, [r3, #0]
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000
 800416c:	40022000 	.word	0x40022000

08004170 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004176:	4b1e      	ldr	r3, [pc, #120]	; (80041f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004180:	4b1b      	ldr	r3, [pc, #108]	; (80041f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	091b      	lsrs	r3, r3, #4
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	3301      	adds	r3, #1
 800418c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d10c      	bne.n	80041ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004194:	4a17      	ldr	r2, [pc, #92]	; (80041f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	fbb2 f3f3 	udiv	r3, r2, r3
 800419c:	4a14      	ldr	r2, [pc, #80]	; (80041f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800419e:	68d2      	ldr	r2, [r2, #12]
 80041a0:	0a12      	lsrs	r2, r2, #8
 80041a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041a6:	fb02 f303 	mul.w	r3, r2, r3
 80041aa:	617b      	str	r3, [r7, #20]
    break;
 80041ac:	e00c      	b.n	80041c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041ae:	4a12      	ldr	r2, [pc, #72]	; (80041f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b6:	4a0e      	ldr	r2, [pc, #56]	; (80041f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041b8:	68d2      	ldr	r2, [r2, #12]
 80041ba:	0a12      	lsrs	r2, r2, #8
 80041bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041c0:	fb02 f303 	mul.w	r3, r2, r3
 80041c4:	617b      	str	r3, [r7, #20]
    break;
 80041c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041c8:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	0e5b      	lsrs	r3, r3, #25
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	3301      	adds	r3, #1
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80041e2:	687b      	ldr	r3, [r7, #4]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	371c      	adds	r7, #28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	40021000 	.word	0x40021000
 80041f4:	016e3600 	.word	0x016e3600
 80041f8:	00f42400 	.word	0x00f42400

080041fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004204:	2300      	movs	r3, #0
 8004206:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004208:	2300      	movs	r3, #0
 800420a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8098 	beq.w	800434a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800421a:	2300      	movs	r3, #0
 800421c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800421e:	4b43      	ldr	r3, [pc, #268]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10d      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422a:	4b40      	ldr	r3, [pc, #256]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800422c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422e:	4a3f      	ldr	r2, [pc, #252]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004234:	6593      	str	r3, [r2, #88]	; 0x58
 8004236:	4b3d      	ldr	r3, [pc, #244]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423e:	60bb      	str	r3, [r7, #8]
 8004240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004242:	2301      	movs	r3, #1
 8004244:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004246:	4b3a      	ldr	r3, [pc, #232]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a39      	ldr	r2, [pc, #228]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800424c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004250:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004252:	f7fd fa83 	bl	800175c <HAL_GetTick>
 8004256:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004258:	e009      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425a:	f7fd fa7f 	bl	800175c <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d902      	bls.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	74fb      	strb	r3, [r7, #19]
        break;
 800426c:	e005      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800426e:	4b30      	ldr	r3, [pc, #192]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0ef      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800427a:	7cfb      	ldrb	r3, [r7, #19]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d159      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004280:	4b2a      	ldr	r3, [pc, #168]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01e      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	429a      	cmp	r2, r3
 800429a:	d019      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800429c:	4b23      	ldr	r3, [pc, #140]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042a8:	4b20      	ldr	r3, [pc, #128]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ae:	4a1f      	ldr	r2, [pc, #124]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042b8:	4b1c      	ldr	r3, [pc, #112]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	4a1b      	ldr	r2, [pc, #108]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042c8:	4a18      	ldr	r2, [pc, #96]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d016      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042da:	f7fd fa3f 	bl	800175c <HAL_GetTick>
 80042de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e0:	e00b      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e2:	f7fd fa3b 	bl	800175c <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d902      	bls.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	74fb      	strb	r3, [r7, #19]
            break;
 80042f8:	e006      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042fa:	4b0c      	ldr	r3, [pc, #48]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0ec      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10b      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800430e:	4b07      	ldr	r3, [pc, #28]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004314:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431c:	4903      	ldr	r1, [pc, #12]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004324:	e008      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004326:	7cfb      	ldrb	r3, [r7, #19]
 8004328:	74bb      	strb	r3, [r7, #18]
 800432a:	e005      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800432c:	40021000 	.word	0x40021000
 8004330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004334:	7cfb      	ldrb	r3, [r7, #19]
 8004336:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004338:	7c7b      	ldrb	r3, [r7, #17]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d105      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800433e:	4ba7      	ldr	r3, [pc, #668]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004342:	4aa6      	ldr	r2, [pc, #664]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004348:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004356:	4ba1      	ldr	r3, [pc, #644]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435c:	f023 0203 	bic.w	r2, r3, #3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	499d      	ldr	r1, [pc, #628]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004378:	4b98      	ldr	r3, [pc, #608]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f023 020c 	bic.w	r2, r3, #12
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	4995      	ldr	r1, [pc, #596]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800439a:	4b90      	ldr	r3, [pc, #576]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	498c      	ldr	r1, [pc, #560]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043bc:	4b87      	ldr	r3, [pc, #540]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	4984      	ldr	r1, [pc, #528]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043de:	4b7f      	ldr	r3, [pc, #508]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	497b      	ldr	r1, [pc, #492]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004400:	4b76      	ldr	r3, [pc, #472]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004406:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	4973      	ldr	r1, [pc, #460]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004422:	4b6e      	ldr	r3, [pc, #440]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	496a      	ldr	r1, [pc, #424]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004444:	4b65      	ldr	r3, [pc, #404]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	4962      	ldr	r1, [pc, #392]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004466:	4b5d      	ldr	r3, [pc, #372]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	4959      	ldr	r1, [pc, #356]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004488:	4b54      	ldr	r3, [pc, #336]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800448a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800448e:	f023 0203 	bic.w	r2, r3, #3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	4951      	ldr	r1, [pc, #324]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044aa:	4b4c      	ldr	r3, [pc, #304]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	4948      	ldr	r1, [pc, #288]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d015      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044cc:	4b43      	ldr	r3, [pc, #268]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	4940      	ldr	r1, [pc, #256]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ea:	d105      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044ec:	4b3b      	ldr	r3, [pc, #236]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4a3a      	ldr	r2, [pc, #232]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004500:	2b00      	cmp	r3, #0
 8004502:	d015      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004504:	4b35      	ldr	r3, [pc, #212]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004512:	4932      	ldr	r1, [pc, #200]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004522:	d105      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004524:	4b2d      	ldr	r3, [pc, #180]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	4a2c      	ldr	r2, [pc, #176]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800452a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800452e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d015      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800453c:	4b27      	ldr	r3, [pc, #156]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004542:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	4924      	ldr	r1, [pc, #144]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800455a:	d105      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800455c:	4b1f      	ldr	r3, [pc, #124]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	4a1e      	ldr	r2, [pc, #120]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004566:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d015      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004574:	4b19      	ldr	r3, [pc, #100]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004582:	4916      	ldr	r1, [pc, #88]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004592:	d105      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004594:	4b11      	ldr	r3, [pc, #68]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	4a10      	ldr	r2, [pc, #64]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800459e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d019      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	4908      	ldr	r1, [pc, #32]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045ca:	d109      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045cc:	4b03      	ldr	r3, [pc, #12]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	4a02      	ldr	r2, [pc, #8]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045d6:	60d3      	str	r3, [r2, #12]
 80045d8:	e002      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80045da:	bf00      	nop
 80045dc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d015      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045ec:	4b29      	ldr	r3, [pc, #164]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	4926      	ldr	r1, [pc, #152]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800460a:	d105      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800460c:	4b21      	ldr	r3, [pc, #132]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4a20      	ldr	r2, [pc, #128]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004616:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d015      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004624:	4b1b      	ldr	r3, [pc, #108]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004632:	4918      	ldr	r1, [pc, #96]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800463e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004642:	d105      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004644:	4b13      	ldr	r3, [pc, #76]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4a12      	ldr	r2, [pc, #72]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800464a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800464e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d015      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800465c:	4b0d      	ldr	r3, [pc, #52]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800465e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004662:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800466a:	490a      	ldr	r1, [pc, #40]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004676:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800467a:	d105      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4a04      	ldr	r2, [pc, #16]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004686:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004688:	7cbb      	ldrb	r3, [r7, #18]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40021000 	.word	0x40021000

08004698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e049      	b.n	800473e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fc feb6 	bl	8001430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3304      	adds	r3, #4
 80046d4:	4619      	mov	r1, r3
 80046d6:	4610      	mov	r0, r2
 80046d8:	f001 f9c2 	bl	8005a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	d001      	beq.n	8004760 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e054      	b.n	800480a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a26      	ldr	r2, [pc, #152]	; (8004818 <HAL_TIM_Base_Start_IT+0xd0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d022      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478a:	d01d      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a22      	ldr	r2, [pc, #136]	; (800481c <HAL_TIM_Base_Start_IT+0xd4>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d018      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a21      	ldr	r2, [pc, #132]	; (8004820 <HAL_TIM_Base_Start_IT+0xd8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d013      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1f      	ldr	r2, [pc, #124]	; (8004824 <HAL_TIM_Base_Start_IT+0xdc>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00e      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1e      	ldr	r2, [pc, #120]	; (8004828 <HAL_TIM_Base_Start_IT+0xe0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d009      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1c      	ldr	r2, [pc, #112]	; (800482c <HAL_TIM_Base_Start_IT+0xe4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d004      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1b      	ldr	r2, [pc, #108]	; (8004830 <HAL_TIM_Base_Start_IT+0xe8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d115      	bne.n	80047f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	4b19      	ldr	r3, [pc, #100]	; (8004834 <HAL_TIM_Base_Start_IT+0xec>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b06      	cmp	r3, #6
 80047d8:	d015      	beq.n	8004806 <HAL_TIM_Base_Start_IT+0xbe>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e0:	d011      	beq.n	8004806 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0201 	orr.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f2:	e008      	b.n	8004806 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	e000      	b.n	8004808 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004806:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40012c00 	.word	0x40012c00
 800481c:	40000400 	.word	0x40000400
 8004820:	40000800 	.word	0x40000800
 8004824:	40000c00 	.word	0x40000c00
 8004828:	40013400 	.word	0x40013400
 800482c:	40014000 	.word	0x40014000
 8004830:	40015000 	.word	0x40015000
 8004834:	00010007 	.word	0x00010007

08004838 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e049      	b.n	80048de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f841 	bl	80048e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3304      	adds	r3, #4
 8004874:	4619      	mov	r1, r3
 8004876:	4610      	mov	r0, r2
 8004878:	f001 f8f2 	bl	8005a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
	...

080048fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d109      	bne.n	8004920 <HAL_TIM_PWM_Start+0x24>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	bf14      	ite	ne
 8004918:	2301      	movne	r3, #1
 800491a:	2300      	moveq	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	e03c      	b.n	800499a <HAL_TIM_PWM_Start+0x9e>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b04      	cmp	r3, #4
 8004924:	d109      	bne.n	800493a <HAL_TIM_PWM_Start+0x3e>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b01      	cmp	r3, #1
 8004930:	bf14      	ite	ne
 8004932:	2301      	movne	r3, #1
 8004934:	2300      	moveq	r3, #0
 8004936:	b2db      	uxtb	r3, r3
 8004938:	e02f      	b.n	800499a <HAL_TIM_PWM_Start+0x9e>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b08      	cmp	r3, #8
 800493e:	d109      	bne.n	8004954 <HAL_TIM_PWM_Start+0x58>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	bf14      	ite	ne
 800494c:	2301      	movne	r3, #1
 800494e:	2300      	moveq	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	e022      	b.n	800499a <HAL_TIM_PWM_Start+0x9e>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b0c      	cmp	r3, #12
 8004958:	d109      	bne.n	800496e <HAL_TIM_PWM_Start+0x72>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b01      	cmp	r3, #1
 8004964:	bf14      	ite	ne
 8004966:	2301      	movne	r3, #1
 8004968:	2300      	moveq	r3, #0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	e015      	b.n	800499a <HAL_TIM_PWM_Start+0x9e>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b10      	cmp	r3, #16
 8004972:	d109      	bne.n	8004988 <HAL_TIM_PWM_Start+0x8c>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	bf14      	ite	ne
 8004980:	2301      	movne	r3, #1
 8004982:	2300      	moveq	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	e008      	b.n	800499a <HAL_TIM_PWM_Start+0x9e>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	bf14      	ite	ne
 8004994:	2301      	movne	r3, #1
 8004996:	2300      	moveq	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e0a6      	b.n	8004af0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d104      	bne.n	80049b2 <HAL_TIM_PWM_Start+0xb6>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b0:	e023      	b.n	80049fa <HAL_TIM_PWM_Start+0xfe>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d104      	bne.n	80049c2 <HAL_TIM_PWM_Start+0xc6>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049c0:	e01b      	b.n	80049fa <HAL_TIM_PWM_Start+0xfe>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d104      	bne.n	80049d2 <HAL_TIM_PWM_Start+0xd6>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049d0:	e013      	b.n	80049fa <HAL_TIM_PWM_Start+0xfe>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b0c      	cmp	r3, #12
 80049d6:	d104      	bne.n	80049e2 <HAL_TIM_PWM_Start+0xe6>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049e0:	e00b      	b.n	80049fa <HAL_TIM_PWM_Start+0xfe>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d104      	bne.n	80049f2 <HAL_TIM_PWM_Start+0xf6>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049f0:	e003      	b.n	80049fa <HAL_TIM_PWM_Start+0xfe>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2202      	movs	r2, #2
 80049f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2201      	movs	r2, #1
 8004a00:	6839      	ldr	r1, [r7, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f001 fea4 	bl	8006750 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a3a      	ldr	r2, [pc, #232]	; (8004af8 <HAL_TIM_PWM_Start+0x1fc>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d018      	beq.n	8004a44 <HAL_TIM_PWM_Start+0x148>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a39      	ldr	r2, [pc, #228]	; (8004afc <HAL_TIM_PWM_Start+0x200>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d013      	beq.n	8004a44 <HAL_TIM_PWM_Start+0x148>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a37      	ldr	r2, [pc, #220]	; (8004b00 <HAL_TIM_PWM_Start+0x204>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00e      	beq.n	8004a44 <HAL_TIM_PWM_Start+0x148>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a36      	ldr	r2, [pc, #216]	; (8004b04 <HAL_TIM_PWM_Start+0x208>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d009      	beq.n	8004a44 <HAL_TIM_PWM_Start+0x148>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a34      	ldr	r2, [pc, #208]	; (8004b08 <HAL_TIM_PWM_Start+0x20c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d004      	beq.n	8004a44 <HAL_TIM_PWM_Start+0x148>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a33      	ldr	r2, [pc, #204]	; (8004b0c <HAL_TIM_PWM_Start+0x210>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d101      	bne.n	8004a48 <HAL_TIM_PWM_Start+0x14c>
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <HAL_TIM_PWM_Start+0x14e>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d007      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a25      	ldr	r2, [pc, #148]	; (8004af8 <HAL_TIM_PWM_Start+0x1fc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d022      	beq.n	8004aae <HAL_TIM_PWM_Start+0x1b2>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a70:	d01d      	beq.n	8004aae <HAL_TIM_PWM_Start+0x1b2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a26      	ldr	r2, [pc, #152]	; (8004b10 <HAL_TIM_PWM_Start+0x214>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d018      	beq.n	8004aae <HAL_TIM_PWM_Start+0x1b2>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a24      	ldr	r2, [pc, #144]	; (8004b14 <HAL_TIM_PWM_Start+0x218>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d013      	beq.n	8004aae <HAL_TIM_PWM_Start+0x1b2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a23      	ldr	r2, [pc, #140]	; (8004b18 <HAL_TIM_PWM_Start+0x21c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00e      	beq.n	8004aae <HAL_TIM_PWM_Start+0x1b2>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a19      	ldr	r2, [pc, #100]	; (8004afc <HAL_TIM_PWM_Start+0x200>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d009      	beq.n	8004aae <HAL_TIM_PWM_Start+0x1b2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a18      	ldr	r2, [pc, #96]	; (8004b00 <HAL_TIM_PWM_Start+0x204>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d004      	beq.n	8004aae <HAL_TIM_PWM_Start+0x1b2>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a18      	ldr	r2, [pc, #96]	; (8004b0c <HAL_TIM_PWM_Start+0x210>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d115      	bne.n	8004ada <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	4b19      	ldr	r3, [pc, #100]	; (8004b1c <HAL_TIM_PWM_Start+0x220>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b06      	cmp	r3, #6
 8004abe:	d015      	beq.n	8004aec <HAL_TIM_PWM_Start+0x1f0>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac6:	d011      	beq.n	8004aec <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad8:	e008      	b.n	8004aec <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0201 	orr.w	r2, r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	e000      	b.n	8004aee <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40013400 	.word	0x40013400
 8004b00:	40014000 	.word	0x40014000
 8004b04:	40014400 	.word	0x40014400
 8004b08:	40014800 	.word	0x40014800
 8004b0c:	40015000 	.word	0x40015000
 8004b10:	40000400 	.word	0x40000400
 8004b14:	40000800 	.word	0x40000800
 8004b18:	40000c00 	.word	0x40000c00
 8004b1c:	00010007 	.word	0x00010007

08004b20 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e049      	b.n	8004bc6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f841 	bl	8004bce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	f000 ff7e 	bl	8005a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
	...

08004be4 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d104      	bne.n	8004bfe <HAL_TIM_IC_Start+0x1a>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	e023      	b.n	8004c46 <HAL_TIM_IC_Start+0x62>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d104      	bne.n	8004c0e <HAL_TIM_IC_Start+0x2a>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	e01b      	b.n	8004c46 <HAL_TIM_IC_Start+0x62>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d104      	bne.n	8004c1e <HAL_TIM_IC_Start+0x3a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	e013      	b.n	8004c46 <HAL_TIM_IC_Start+0x62>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b0c      	cmp	r3, #12
 8004c22:	d104      	bne.n	8004c2e <HAL_TIM_IC_Start+0x4a>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	e00b      	b.n	8004c46 <HAL_TIM_IC_Start+0x62>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b10      	cmp	r3, #16
 8004c32:	d104      	bne.n	8004c3e <HAL_TIM_IC_Start+0x5a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	e003      	b.n	8004c46 <HAL_TIM_IC_Start+0x62>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d104      	bne.n	8004c58 <HAL_TIM_IC_Start+0x74>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	e013      	b.n	8004c80 <HAL_TIM_IC_Start+0x9c>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d104      	bne.n	8004c68 <HAL_TIM_IC_Start+0x84>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	e00b      	b.n	8004c80 <HAL_TIM_IC_Start+0x9c>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d104      	bne.n	8004c78 <HAL_TIM_IC_Start+0x94>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	e003      	b.n	8004c80 <HAL_TIM_IC_Start+0x9c>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d102      	bne.n	8004c8e <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c88:	7bbb      	ldrb	r3, [r7, #14]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d001      	beq.n	8004c92 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e097      	b.n	8004dc2 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d104      	bne.n	8004ca2 <HAL_TIM_IC_Start+0xbe>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca0:	e023      	b.n	8004cea <HAL_TIM_IC_Start+0x106>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d104      	bne.n	8004cb2 <HAL_TIM_IC_Start+0xce>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cb0:	e01b      	b.n	8004cea <HAL_TIM_IC_Start+0x106>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d104      	bne.n	8004cc2 <HAL_TIM_IC_Start+0xde>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cc0:	e013      	b.n	8004cea <HAL_TIM_IC_Start+0x106>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b0c      	cmp	r3, #12
 8004cc6:	d104      	bne.n	8004cd2 <HAL_TIM_IC_Start+0xee>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cd0:	e00b      	b.n	8004cea <HAL_TIM_IC_Start+0x106>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b10      	cmp	r3, #16
 8004cd6:	d104      	bne.n	8004ce2 <HAL_TIM_IC_Start+0xfe>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce0:	e003      	b.n	8004cea <HAL_TIM_IC_Start+0x106>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d104      	bne.n	8004cfa <HAL_TIM_IC_Start+0x116>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf8:	e013      	b.n	8004d22 <HAL_TIM_IC_Start+0x13e>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d104      	bne.n	8004d0a <HAL_TIM_IC_Start+0x126>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d08:	e00b      	b.n	8004d22 <HAL_TIM_IC_Start+0x13e>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d104      	bne.n	8004d1a <HAL_TIM_IC_Start+0x136>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d18:	e003      	b.n	8004d22 <HAL_TIM_IC_Start+0x13e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2201      	movs	r2, #1
 8004d28:	6839      	ldr	r1, [r7, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f001 fd10 	bl	8006750 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a25      	ldr	r2, [pc, #148]	; (8004dcc <HAL_TIM_IC_Start+0x1e8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d022      	beq.n	8004d80 <HAL_TIM_IC_Start+0x19c>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d42:	d01d      	beq.n	8004d80 <HAL_TIM_IC_Start+0x19c>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a21      	ldr	r2, [pc, #132]	; (8004dd0 <HAL_TIM_IC_Start+0x1ec>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d018      	beq.n	8004d80 <HAL_TIM_IC_Start+0x19c>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a20      	ldr	r2, [pc, #128]	; (8004dd4 <HAL_TIM_IC_Start+0x1f0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d013      	beq.n	8004d80 <HAL_TIM_IC_Start+0x19c>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a1e      	ldr	r2, [pc, #120]	; (8004dd8 <HAL_TIM_IC_Start+0x1f4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00e      	beq.n	8004d80 <HAL_TIM_IC_Start+0x19c>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1d      	ldr	r2, [pc, #116]	; (8004ddc <HAL_TIM_IC_Start+0x1f8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d009      	beq.n	8004d80 <HAL_TIM_IC_Start+0x19c>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1b      	ldr	r2, [pc, #108]	; (8004de0 <HAL_TIM_IC_Start+0x1fc>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d004      	beq.n	8004d80 <HAL_TIM_IC_Start+0x19c>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1a      	ldr	r2, [pc, #104]	; (8004de4 <HAL_TIM_IC_Start+0x200>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d115      	bne.n	8004dac <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	4b18      	ldr	r3, [pc, #96]	; (8004de8 <HAL_TIM_IC_Start+0x204>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b06      	cmp	r3, #6
 8004d90:	d015      	beq.n	8004dbe <HAL_TIM_IC_Start+0x1da>
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d98:	d011      	beq.n	8004dbe <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0201 	orr.w	r2, r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004daa:	e008      	b.n	8004dbe <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	e000      	b.n	8004dc0 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40012c00 	.word	0x40012c00
 8004dd0:	40000400 	.word	0x40000400
 8004dd4:	40000800 	.word	0x40000800
 8004dd8:	40000c00 	.word	0x40000c00
 8004ddc:	40013400 	.word	0x40013400
 8004de0:	40014000 	.word	0x40014000
 8004de4:	40015000 	.word	0x40015000
 8004de8:	00010007 	.word	0x00010007

08004dec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <HAL_TIM_IC_Start_IT+0x1e>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	e023      	b.n	8004e52 <HAL_TIM_IC_Start_IT+0x66>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d104      	bne.n	8004e1a <HAL_TIM_IC_Start_IT+0x2e>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	e01b      	b.n	8004e52 <HAL_TIM_IC_Start_IT+0x66>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d104      	bne.n	8004e2a <HAL_TIM_IC_Start_IT+0x3e>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	e013      	b.n	8004e52 <HAL_TIM_IC_Start_IT+0x66>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b0c      	cmp	r3, #12
 8004e2e:	d104      	bne.n	8004e3a <HAL_TIM_IC_Start_IT+0x4e>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	e00b      	b.n	8004e52 <HAL_TIM_IC_Start_IT+0x66>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b10      	cmp	r3, #16
 8004e3e:	d104      	bne.n	8004e4a <HAL_TIM_IC_Start_IT+0x5e>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	e003      	b.n	8004e52 <HAL_TIM_IC_Start_IT+0x66>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d104      	bne.n	8004e64 <HAL_TIM_IC_Start_IT+0x78>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	e013      	b.n	8004e8c <HAL_TIM_IC_Start_IT+0xa0>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d104      	bne.n	8004e74 <HAL_TIM_IC_Start_IT+0x88>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	e00b      	b.n	8004e8c <HAL_TIM_IC_Start_IT+0xa0>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d104      	bne.n	8004e84 <HAL_TIM_IC_Start_IT+0x98>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	e003      	b.n	8004e8c <HAL_TIM_IC_Start_IT+0xa0>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e8e:	7bbb      	ldrb	r3, [r7, #14]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d102      	bne.n	8004e9a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e94:	7b7b      	ldrb	r3, [r7, #13]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d001      	beq.n	8004e9e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e0e2      	b.n	8005064 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d104      	bne.n	8004eae <HAL_TIM_IC_Start_IT+0xc2>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eac:	e023      	b.n	8004ef6 <HAL_TIM_IC_Start_IT+0x10a>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d104      	bne.n	8004ebe <HAL_TIM_IC_Start_IT+0xd2>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ebc:	e01b      	b.n	8004ef6 <HAL_TIM_IC_Start_IT+0x10a>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d104      	bne.n	8004ece <HAL_TIM_IC_Start_IT+0xe2>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ecc:	e013      	b.n	8004ef6 <HAL_TIM_IC_Start_IT+0x10a>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b0c      	cmp	r3, #12
 8004ed2:	d104      	bne.n	8004ede <HAL_TIM_IC_Start_IT+0xf2>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004edc:	e00b      	b.n	8004ef6 <HAL_TIM_IC_Start_IT+0x10a>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b10      	cmp	r3, #16
 8004ee2:	d104      	bne.n	8004eee <HAL_TIM_IC_Start_IT+0x102>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eec:	e003      	b.n	8004ef6 <HAL_TIM_IC_Start_IT+0x10a>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d104      	bne.n	8004f06 <HAL_TIM_IC_Start_IT+0x11a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f04:	e013      	b.n	8004f2e <HAL_TIM_IC_Start_IT+0x142>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d104      	bne.n	8004f16 <HAL_TIM_IC_Start_IT+0x12a>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f14:	e00b      	b.n	8004f2e <HAL_TIM_IC_Start_IT+0x142>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d104      	bne.n	8004f26 <HAL_TIM_IC_Start_IT+0x13a>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f24:	e003      	b.n	8004f2e <HAL_TIM_IC_Start_IT+0x142>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b0c      	cmp	r3, #12
 8004f32:	d841      	bhi.n	8004fb8 <HAL_TIM_IC_Start_IT+0x1cc>
 8004f34:	a201      	add	r2, pc, #4	; (adr r2, 8004f3c <HAL_TIM_IC_Start_IT+0x150>)
 8004f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3a:	bf00      	nop
 8004f3c:	08004f71 	.word	0x08004f71
 8004f40:	08004fb9 	.word	0x08004fb9
 8004f44:	08004fb9 	.word	0x08004fb9
 8004f48:	08004fb9 	.word	0x08004fb9
 8004f4c:	08004f83 	.word	0x08004f83
 8004f50:	08004fb9 	.word	0x08004fb9
 8004f54:	08004fb9 	.word	0x08004fb9
 8004f58:	08004fb9 	.word	0x08004fb9
 8004f5c:	08004f95 	.word	0x08004f95
 8004f60:	08004fb9 	.word	0x08004fb9
 8004f64:	08004fb9 	.word	0x08004fb9
 8004f68:	08004fb9 	.word	0x08004fb9
 8004f6c:	08004fa7 	.word	0x08004fa7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0202 	orr.w	r2, r2, #2
 8004f7e:	60da      	str	r2, [r3, #12]
      break;
 8004f80:	e01d      	b.n	8004fbe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0204 	orr.w	r2, r2, #4
 8004f90:	60da      	str	r2, [r3, #12]
      break;
 8004f92:	e014      	b.n	8004fbe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0208 	orr.w	r2, r2, #8
 8004fa2:	60da      	str	r2, [r3, #12]
      break;
 8004fa4:	e00b      	b.n	8004fbe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0210 	orr.w	r2, r2, #16
 8004fb4:	60da      	str	r2, [r3, #12]
      break;
 8004fb6:	e002      	b.n	8004fbe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
      break;
 8004fbc:	bf00      	nop
  }

  if (status == HAL_OK)
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d14e      	bne.n	8005062 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	6839      	ldr	r1, [r7, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f001 fbbf 	bl	8006750 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a25      	ldr	r2, [pc, #148]	; (800506c <HAL_TIM_IC_Start_IT+0x280>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d022      	beq.n	8005022 <HAL_TIM_IC_Start_IT+0x236>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe4:	d01d      	beq.n	8005022 <HAL_TIM_IC_Start_IT+0x236>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a21      	ldr	r2, [pc, #132]	; (8005070 <HAL_TIM_IC_Start_IT+0x284>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d018      	beq.n	8005022 <HAL_TIM_IC_Start_IT+0x236>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a1f      	ldr	r2, [pc, #124]	; (8005074 <HAL_TIM_IC_Start_IT+0x288>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d013      	beq.n	8005022 <HAL_TIM_IC_Start_IT+0x236>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a1e      	ldr	r2, [pc, #120]	; (8005078 <HAL_TIM_IC_Start_IT+0x28c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00e      	beq.n	8005022 <HAL_TIM_IC_Start_IT+0x236>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a1c      	ldr	r2, [pc, #112]	; (800507c <HAL_TIM_IC_Start_IT+0x290>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d009      	beq.n	8005022 <HAL_TIM_IC_Start_IT+0x236>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a1b      	ldr	r2, [pc, #108]	; (8005080 <HAL_TIM_IC_Start_IT+0x294>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d004      	beq.n	8005022 <HAL_TIM_IC_Start_IT+0x236>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a19      	ldr	r2, [pc, #100]	; (8005084 <HAL_TIM_IC_Start_IT+0x298>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d115      	bne.n	800504e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	4b17      	ldr	r3, [pc, #92]	; (8005088 <HAL_TIM_IC_Start_IT+0x29c>)
 800502a:	4013      	ands	r3, r2
 800502c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	2b06      	cmp	r3, #6
 8005032:	d015      	beq.n	8005060 <HAL_TIM_IC_Start_IT+0x274>
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800503a:	d011      	beq.n	8005060 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504c:	e008      	b.n	8005060 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 0201 	orr.w	r2, r2, #1
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	e000      	b.n	8005062 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005060:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005062:	7bfb      	ldrb	r3, [r7, #15]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	40012c00 	.word	0x40012c00
 8005070:	40000400 	.word	0x40000400
 8005074:	40000800 	.word	0x40000800
 8005078:	40000c00 	.word	0x40000c00
 800507c:	40013400 	.word	0x40013400
 8005080:	40014000 	.word	0x40014000
 8005084:	40015000 	.word	0x40015000
 8005088:	00010007 	.word	0x00010007

0800508c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d122      	bne.n	80050e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d11b      	bne.n	80050e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0202 	mvn.w	r2, #2
 80050b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7fb fe52 	bl	8000d78 <HAL_TIM_IC_CaptureCallback>
 80050d4:	e005      	b.n	80050e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fca4 	bl	8005a24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fcab 	bl	8005a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d122      	bne.n	800513c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b04      	cmp	r3, #4
 8005102:	d11b      	bne.n	800513c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f06f 0204 	mvn.w	r2, #4
 800510c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fb fe28 	bl	8000d78 <HAL_TIM_IC_CaptureCallback>
 8005128:	e005      	b.n	8005136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fc7a 	bl	8005a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fc81 	bl	8005a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b08      	cmp	r3, #8
 8005148:	d122      	bne.n	8005190 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b08      	cmp	r3, #8
 8005156:	d11b      	bne.n	8005190 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f06f 0208 	mvn.w	r2, #8
 8005160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2204      	movs	r2, #4
 8005166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fb fdfe 	bl	8000d78 <HAL_TIM_IC_CaptureCallback>
 800517c:	e005      	b.n	800518a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fc50 	bl	8005a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fc57 	bl	8005a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f003 0310 	and.w	r3, r3, #16
 800519a:	2b10      	cmp	r3, #16
 800519c:	d122      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	2b10      	cmp	r3, #16
 80051aa:	d11b      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0210 	mvn.w	r2, #16
 80051b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2208      	movs	r2, #8
 80051ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fb fdd4 	bl	8000d78 <HAL_TIM_IC_CaptureCallback>
 80051d0:	e005      	b.n	80051de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fc26 	bl	8005a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fc2d 	bl	8005a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d10e      	bne.n	8005210 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d107      	bne.n	8005210 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0201 	mvn.w	r2, #1
 8005208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7fb fddc 	bl	8000dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521a:	2b80      	cmp	r3, #128	; 0x80
 800521c:	d10e      	bne.n	800523c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005228:	2b80      	cmp	r3, #128	; 0x80
 800522a:	d107      	bne.n	800523c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f001 fcc4 	bl	8006bc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800524a:	d10e      	bne.n	800526a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005256:	2b80      	cmp	r3, #128	; 0x80
 8005258:	d107      	bne.n	800526a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f001 fcb7 	bl	8006bd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005274:	2b40      	cmp	r3, #64	; 0x40
 8005276:	d10e      	bne.n	8005296 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005282:	2b40      	cmp	r3, #64	; 0x40
 8005284:	d107      	bne.n	8005296 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800528e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fbdb 	bl	8005a4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d10e      	bne.n	80052c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b20      	cmp	r3, #32
 80052b0:	d107      	bne.n	80052c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f06f 0220 	mvn.w	r2, #32
 80052ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f001 fc77 	bl	8006bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052d0:	d10f      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052e0:	d107      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80052ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f001 fc7d 	bl	8006bec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005300:	d10f      	bne.n	8005322 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800530c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005310:	d107      	bne.n	8005322 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800531a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f001 fc6f 	bl	8006c00 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800532c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005330:	d10f      	bne.n	8005352 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800533c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005340:	d107      	bne.n	8005352 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800534a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f001 fc61 	bl	8006c14 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800535c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005360:	d10f      	bne.n	8005382 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800536c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005370:	d107      	bne.n	8005382 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800537a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f001 fc53 	bl	8006c28 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005382:	bf00      	nop
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b086      	sub	sp, #24
 800538e:	af00      	add	r7, sp, #0
 8005390:	60f8      	str	r0, [r7, #12]
 8005392:	60b9      	str	r1, [r7, #8]
 8005394:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e088      	b.n	80054ba <HAL_TIM_IC_ConfigChannel+0x130>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d11b      	bne.n	80053ee <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	6819      	ldr	r1, [r3, #0]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f000 fffd 	bl	80063c4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699a      	ldr	r2, [r3, #24]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 020c 	bic.w	r2, r2, #12
 80053d8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6999      	ldr	r1, [r3, #24]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	619a      	str	r2, [r3, #24]
 80053ec:	e060      	b.n	80054b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d11c      	bne.n	800542e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6818      	ldr	r0, [r3, #0]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	6819      	ldr	r1, [r3, #0]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f001 f881 	bl	800650a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005416:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6999      	ldr	r1, [r3, #24]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	021a      	lsls	r2, r3, #8
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	619a      	str	r2, [r3, #24]
 800542c:	e040      	b.n	80054b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d11b      	bne.n	800546c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	6819      	ldr	r1, [r3, #0]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f001 f8ce 	bl	80065e4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69da      	ldr	r2, [r3, #28]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 020c 	bic.w	r2, r2, #12
 8005456:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69d9      	ldr	r1, [r3, #28]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	61da      	str	r2, [r3, #28]
 800546a:	e021      	b.n	80054b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b0c      	cmp	r3, #12
 8005470:	d11c      	bne.n	80054ac <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6818      	ldr	r0, [r3, #0]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	6819      	ldr	r1, [r3, #0]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f001 f8eb 	bl	800665c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69da      	ldr	r2, [r3, #28]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005494:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69d9      	ldr	r1, [r3, #28]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	021a      	lsls	r2, r3, #8
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	61da      	str	r2, [r3, #28]
 80054aa:	e001      	b.n	80054b0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054de:	2302      	movs	r3, #2
 80054e0:	e0ff      	b.n	80056e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b14      	cmp	r3, #20
 80054ee:	f200 80f0 	bhi.w	80056d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054f2:	a201      	add	r2, pc, #4	; (adr r2, 80054f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	0800554d 	.word	0x0800554d
 80054fc:	080056d3 	.word	0x080056d3
 8005500:	080056d3 	.word	0x080056d3
 8005504:	080056d3 	.word	0x080056d3
 8005508:	0800558d 	.word	0x0800558d
 800550c:	080056d3 	.word	0x080056d3
 8005510:	080056d3 	.word	0x080056d3
 8005514:	080056d3 	.word	0x080056d3
 8005518:	080055cf 	.word	0x080055cf
 800551c:	080056d3 	.word	0x080056d3
 8005520:	080056d3 	.word	0x080056d3
 8005524:	080056d3 	.word	0x080056d3
 8005528:	0800560f 	.word	0x0800560f
 800552c:	080056d3 	.word	0x080056d3
 8005530:	080056d3 	.word	0x080056d3
 8005534:	080056d3 	.word	0x080056d3
 8005538:	08005651 	.word	0x08005651
 800553c:	080056d3 	.word	0x080056d3
 8005540:	080056d3 	.word	0x080056d3
 8005544:	080056d3 	.word	0x080056d3
 8005548:	08005691 	.word	0x08005691
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fb2c 	bl	8005bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0208 	orr.w	r2, r2, #8
 8005566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0204 	bic.w	r2, r2, #4
 8005576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6999      	ldr	r1, [r3, #24]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	619a      	str	r2, [r3, #24]
      break;
 800558a:	e0a5      	b.n	80056d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fba6 	bl	8005ce4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6999      	ldr	r1, [r3, #24]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	021a      	lsls	r2, r3, #8
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	619a      	str	r2, [r3, #24]
      break;
 80055cc:	e084      	b.n	80056d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68b9      	ldr	r1, [r7, #8]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fc19 	bl	8005e0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0208 	orr.w	r2, r2, #8
 80055e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0204 	bic.w	r2, r2, #4
 80055f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69d9      	ldr	r1, [r3, #28]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	61da      	str	r2, [r3, #28]
      break;
 800560c:	e064      	b.n	80056d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fc8b 	bl	8005f30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69da      	ldr	r2, [r3, #28]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69d9      	ldr	r1, [r3, #28]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	021a      	lsls	r2, r3, #8
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	61da      	str	r2, [r3, #28]
      break;
 800564e:	e043      	b.n	80056d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fcfe 	bl	8006058 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0208 	orr.w	r2, r2, #8
 800566a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0204 	bic.w	r2, r2, #4
 800567a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	691a      	ldr	r2, [r3, #16]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800568e:	e023      	b.n	80056d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fd48 	bl	800612c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	021a      	lsls	r2, r3, #8
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80056d0:	e002      	b.n	80056d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	75fb      	strb	r3, [r7, #23]
      break;
 80056d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop

080056ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <HAL_TIM_ConfigClockSource+0x1c>
 8005704:	2302      	movs	r3, #2
 8005706:	e0f6      	b.n	80058f6 <HAL_TIM_ConfigClockSource+0x20a>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005726:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800572a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005732:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a6f      	ldr	r2, [pc, #444]	; (8005900 <HAL_TIM_ConfigClockSource+0x214>)
 8005742:	4293      	cmp	r3, r2
 8005744:	f000 80c1 	beq.w	80058ca <HAL_TIM_ConfigClockSource+0x1de>
 8005748:	4a6d      	ldr	r2, [pc, #436]	; (8005900 <HAL_TIM_ConfigClockSource+0x214>)
 800574a:	4293      	cmp	r3, r2
 800574c:	f200 80c6 	bhi.w	80058dc <HAL_TIM_ConfigClockSource+0x1f0>
 8005750:	4a6c      	ldr	r2, [pc, #432]	; (8005904 <HAL_TIM_ConfigClockSource+0x218>)
 8005752:	4293      	cmp	r3, r2
 8005754:	f000 80b9 	beq.w	80058ca <HAL_TIM_ConfigClockSource+0x1de>
 8005758:	4a6a      	ldr	r2, [pc, #424]	; (8005904 <HAL_TIM_ConfigClockSource+0x218>)
 800575a:	4293      	cmp	r3, r2
 800575c:	f200 80be 	bhi.w	80058dc <HAL_TIM_ConfigClockSource+0x1f0>
 8005760:	4a69      	ldr	r2, [pc, #420]	; (8005908 <HAL_TIM_ConfigClockSource+0x21c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	f000 80b1 	beq.w	80058ca <HAL_TIM_ConfigClockSource+0x1de>
 8005768:	4a67      	ldr	r2, [pc, #412]	; (8005908 <HAL_TIM_ConfigClockSource+0x21c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	f200 80b6 	bhi.w	80058dc <HAL_TIM_ConfigClockSource+0x1f0>
 8005770:	4a66      	ldr	r2, [pc, #408]	; (800590c <HAL_TIM_ConfigClockSource+0x220>)
 8005772:	4293      	cmp	r3, r2
 8005774:	f000 80a9 	beq.w	80058ca <HAL_TIM_ConfigClockSource+0x1de>
 8005778:	4a64      	ldr	r2, [pc, #400]	; (800590c <HAL_TIM_ConfigClockSource+0x220>)
 800577a:	4293      	cmp	r3, r2
 800577c:	f200 80ae 	bhi.w	80058dc <HAL_TIM_ConfigClockSource+0x1f0>
 8005780:	4a63      	ldr	r2, [pc, #396]	; (8005910 <HAL_TIM_ConfigClockSource+0x224>)
 8005782:	4293      	cmp	r3, r2
 8005784:	f000 80a1 	beq.w	80058ca <HAL_TIM_ConfigClockSource+0x1de>
 8005788:	4a61      	ldr	r2, [pc, #388]	; (8005910 <HAL_TIM_ConfigClockSource+0x224>)
 800578a:	4293      	cmp	r3, r2
 800578c:	f200 80a6 	bhi.w	80058dc <HAL_TIM_ConfigClockSource+0x1f0>
 8005790:	4a60      	ldr	r2, [pc, #384]	; (8005914 <HAL_TIM_ConfigClockSource+0x228>)
 8005792:	4293      	cmp	r3, r2
 8005794:	f000 8099 	beq.w	80058ca <HAL_TIM_ConfigClockSource+0x1de>
 8005798:	4a5e      	ldr	r2, [pc, #376]	; (8005914 <HAL_TIM_ConfigClockSource+0x228>)
 800579a:	4293      	cmp	r3, r2
 800579c:	f200 809e 	bhi.w	80058dc <HAL_TIM_ConfigClockSource+0x1f0>
 80057a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80057a4:	f000 8091 	beq.w	80058ca <HAL_TIM_ConfigClockSource+0x1de>
 80057a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80057ac:	f200 8096 	bhi.w	80058dc <HAL_TIM_ConfigClockSource+0x1f0>
 80057b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057b4:	f000 8089 	beq.w	80058ca <HAL_TIM_ConfigClockSource+0x1de>
 80057b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057bc:	f200 808e 	bhi.w	80058dc <HAL_TIM_ConfigClockSource+0x1f0>
 80057c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c4:	d03e      	beq.n	8005844 <HAL_TIM_ConfigClockSource+0x158>
 80057c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ca:	f200 8087 	bhi.w	80058dc <HAL_TIM_ConfigClockSource+0x1f0>
 80057ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d2:	f000 8086 	beq.w	80058e2 <HAL_TIM_ConfigClockSource+0x1f6>
 80057d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057da:	d87f      	bhi.n	80058dc <HAL_TIM_ConfigClockSource+0x1f0>
 80057dc:	2b70      	cmp	r3, #112	; 0x70
 80057de:	d01a      	beq.n	8005816 <HAL_TIM_ConfigClockSource+0x12a>
 80057e0:	2b70      	cmp	r3, #112	; 0x70
 80057e2:	d87b      	bhi.n	80058dc <HAL_TIM_ConfigClockSource+0x1f0>
 80057e4:	2b60      	cmp	r3, #96	; 0x60
 80057e6:	d050      	beq.n	800588a <HAL_TIM_ConfigClockSource+0x19e>
 80057e8:	2b60      	cmp	r3, #96	; 0x60
 80057ea:	d877      	bhi.n	80058dc <HAL_TIM_ConfigClockSource+0x1f0>
 80057ec:	2b50      	cmp	r3, #80	; 0x50
 80057ee:	d03c      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x17e>
 80057f0:	2b50      	cmp	r3, #80	; 0x50
 80057f2:	d873      	bhi.n	80058dc <HAL_TIM_ConfigClockSource+0x1f0>
 80057f4:	2b40      	cmp	r3, #64	; 0x40
 80057f6:	d058      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0x1be>
 80057f8:	2b40      	cmp	r3, #64	; 0x40
 80057fa:	d86f      	bhi.n	80058dc <HAL_TIM_ConfigClockSource+0x1f0>
 80057fc:	2b30      	cmp	r3, #48	; 0x30
 80057fe:	d064      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0x1de>
 8005800:	2b30      	cmp	r3, #48	; 0x30
 8005802:	d86b      	bhi.n	80058dc <HAL_TIM_ConfigClockSource+0x1f0>
 8005804:	2b20      	cmp	r3, #32
 8005806:	d060      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0x1de>
 8005808:	2b20      	cmp	r3, #32
 800580a:	d867      	bhi.n	80058dc <HAL_TIM_ConfigClockSource+0x1f0>
 800580c:	2b00      	cmp	r3, #0
 800580e:	d05c      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0x1de>
 8005810:	2b10      	cmp	r3, #16
 8005812:	d05a      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0x1de>
 8005814:	e062      	b.n	80058dc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6818      	ldr	r0, [r3, #0]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	6899      	ldr	r1, [r3, #8]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f000 ff73 	bl	8006710 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005838:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	609a      	str	r2, [r3, #8]
      break;
 8005842:	e04f      	b.n	80058e4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6818      	ldr	r0, [r3, #0]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	6899      	ldr	r1, [r3, #8]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f000 ff5c 	bl	8006710 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005866:	609a      	str	r2, [r3, #8]
      break;
 8005868:	e03c      	b.n	80058e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6859      	ldr	r1, [r3, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	461a      	mov	r2, r3
 8005878:	f000 fe18 	bl	80064ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2150      	movs	r1, #80	; 0x50
 8005882:	4618      	mov	r0, r3
 8005884:	f000 ff27 	bl	80066d6 <TIM_ITRx_SetConfig>
      break;
 8005888:	e02c      	b.n	80058e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6818      	ldr	r0, [r3, #0]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	6859      	ldr	r1, [r3, #4]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	461a      	mov	r2, r3
 8005898:	f000 fe74 	bl	8006584 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2160      	movs	r1, #96	; 0x60
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 ff17 	bl	80066d6 <TIM_ITRx_SetConfig>
      break;
 80058a8:	e01c      	b.n	80058e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	6859      	ldr	r1, [r3, #4]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	461a      	mov	r2, r3
 80058b8:	f000 fdf8 	bl	80064ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2140      	movs	r1, #64	; 0x40
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 ff07 	bl	80066d6 <TIM_ITRx_SetConfig>
      break;
 80058c8:	e00c      	b.n	80058e4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4619      	mov	r1, r3
 80058d4:	4610      	mov	r0, r2
 80058d6:	f000 fefe 	bl	80066d6 <TIM_ITRx_SetConfig>
      break;
 80058da:	e003      	b.n	80058e4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	73fb      	strb	r3, [r7, #15]
      break;
 80058e0:	e000      	b.n	80058e4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80058e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	00100070 	.word	0x00100070
 8005904:	00100060 	.word	0x00100060
 8005908:	00100050 	.word	0x00100050
 800590c:	00100040 	.word	0x00100040
 8005910:	00100030 	.word	0x00100030
 8005914:	00100020 	.word	0x00100020

08005918 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_TIM_SlaveConfigSynchro+0x18>
 800592c:	2302      	movs	r3, #2
 800592e:	e031      	b.n	8005994 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005940:	6839      	ldr	r1, [r7, #0]
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fc5e 	bl	8006204 <TIM_SlaveTimer_SetConfig>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d009      	beq.n	8005962 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e018      	b.n	8005994 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005970:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005980:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b0c      	cmp	r3, #12
 80059ae:	d831      	bhi.n	8005a14 <HAL_TIM_ReadCapturedValue+0x78>
 80059b0:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80059b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b6:	bf00      	nop
 80059b8:	080059ed 	.word	0x080059ed
 80059bc:	08005a15 	.word	0x08005a15
 80059c0:	08005a15 	.word	0x08005a15
 80059c4:	08005a15 	.word	0x08005a15
 80059c8:	080059f7 	.word	0x080059f7
 80059cc:	08005a15 	.word	0x08005a15
 80059d0:	08005a15 	.word	0x08005a15
 80059d4:	08005a15 	.word	0x08005a15
 80059d8:	08005a01 	.word	0x08005a01
 80059dc:	08005a15 	.word	0x08005a15
 80059e0:	08005a15 	.word	0x08005a15
 80059e4:	08005a15 	.word	0x08005a15
 80059e8:	08005a0b 	.word	0x08005a0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f2:	60fb      	str	r3, [r7, #12]

      break;
 80059f4:	e00f      	b.n	8005a16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fc:	60fb      	str	r3, [r7, #12]

      break;
 80059fe:	e00a      	b.n	8005a16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a06:	60fb      	str	r3, [r7, #12]

      break;
 8005a08:	e005      	b.n	8005a16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a10:	60fb      	str	r3, [r7, #12]

      break;
 8005a12:	e000      	b.n	8005a16 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005a14:	bf00      	nop
  }

  return tmpreg;
 8005a16:	68fb      	ldr	r3, [r7, #12]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a46      	ldr	r2, [pc, #280]	; (8005b8c <TIM_Base_SetConfig+0x12c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d017      	beq.n	8005aa8 <TIM_Base_SetConfig+0x48>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7e:	d013      	beq.n	8005aa8 <TIM_Base_SetConfig+0x48>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a43      	ldr	r2, [pc, #268]	; (8005b90 <TIM_Base_SetConfig+0x130>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00f      	beq.n	8005aa8 <TIM_Base_SetConfig+0x48>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a42      	ldr	r2, [pc, #264]	; (8005b94 <TIM_Base_SetConfig+0x134>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00b      	beq.n	8005aa8 <TIM_Base_SetConfig+0x48>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a41      	ldr	r2, [pc, #260]	; (8005b98 <TIM_Base_SetConfig+0x138>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d007      	beq.n	8005aa8 <TIM_Base_SetConfig+0x48>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a40      	ldr	r2, [pc, #256]	; (8005b9c <TIM_Base_SetConfig+0x13c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d003      	beq.n	8005aa8 <TIM_Base_SetConfig+0x48>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a3f      	ldr	r2, [pc, #252]	; (8005ba0 <TIM_Base_SetConfig+0x140>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d108      	bne.n	8005aba <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a33      	ldr	r2, [pc, #204]	; (8005b8c <TIM_Base_SetConfig+0x12c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d023      	beq.n	8005b0a <TIM_Base_SetConfig+0xaa>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac8:	d01f      	beq.n	8005b0a <TIM_Base_SetConfig+0xaa>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a30      	ldr	r2, [pc, #192]	; (8005b90 <TIM_Base_SetConfig+0x130>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d01b      	beq.n	8005b0a <TIM_Base_SetConfig+0xaa>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a2f      	ldr	r2, [pc, #188]	; (8005b94 <TIM_Base_SetConfig+0x134>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d017      	beq.n	8005b0a <TIM_Base_SetConfig+0xaa>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a2e      	ldr	r2, [pc, #184]	; (8005b98 <TIM_Base_SetConfig+0x138>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d013      	beq.n	8005b0a <TIM_Base_SetConfig+0xaa>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a2d      	ldr	r2, [pc, #180]	; (8005b9c <TIM_Base_SetConfig+0x13c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00f      	beq.n	8005b0a <TIM_Base_SetConfig+0xaa>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a2d      	ldr	r2, [pc, #180]	; (8005ba4 <TIM_Base_SetConfig+0x144>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00b      	beq.n	8005b0a <TIM_Base_SetConfig+0xaa>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a2c      	ldr	r2, [pc, #176]	; (8005ba8 <TIM_Base_SetConfig+0x148>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d007      	beq.n	8005b0a <TIM_Base_SetConfig+0xaa>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a2b      	ldr	r2, [pc, #172]	; (8005bac <TIM_Base_SetConfig+0x14c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d003      	beq.n	8005b0a <TIM_Base_SetConfig+0xaa>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a26      	ldr	r2, [pc, #152]	; (8005ba0 <TIM_Base_SetConfig+0x140>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d108      	bne.n	8005b1c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a12      	ldr	r2, [pc, #72]	; (8005b8c <TIM_Base_SetConfig+0x12c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d013      	beq.n	8005b70 <TIM_Base_SetConfig+0x110>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a14      	ldr	r2, [pc, #80]	; (8005b9c <TIM_Base_SetConfig+0x13c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00f      	beq.n	8005b70 <TIM_Base_SetConfig+0x110>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a14      	ldr	r2, [pc, #80]	; (8005ba4 <TIM_Base_SetConfig+0x144>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00b      	beq.n	8005b70 <TIM_Base_SetConfig+0x110>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a13      	ldr	r2, [pc, #76]	; (8005ba8 <TIM_Base_SetConfig+0x148>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d007      	beq.n	8005b70 <TIM_Base_SetConfig+0x110>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a12      	ldr	r2, [pc, #72]	; (8005bac <TIM_Base_SetConfig+0x14c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d003      	beq.n	8005b70 <TIM_Base_SetConfig+0x110>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a0d      	ldr	r2, [pc, #52]	; (8005ba0 <TIM_Base_SetConfig+0x140>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d103      	bne.n	8005b78 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	691a      	ldr	r2, [r3, #16]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	615a      	str	r2, [r3, #20]
}
 8005b7e:	bf00      	nop
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	40012c00 	.word	0x40012c00
 8005b90:	40000400 	.word	0x40000400
 8005b94:	40000800 	.word	0x40000800
 8005b98:	40000c00 	.word	0x40000c00
 8005b9c:	40013400 	.word	0x40013400
 8005ba0:	40015000 	.word	0x40015000
 8005ba4:	40014000 	.word	0x40014000
 8005ba8:	40014400 	.word	0x40014400
 8005bac:	40014800 	.word	0x40014800

08005bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	f023 0201 	bic.w	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0303 	bic.w	r3, r3, #3
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f023 0302 	bic.w	r3, r3, #2
 8005bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a30      	ldr	r2, [pc, #192]	; (8005ccc <TIM_OC1_SetConfig+0x11c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d013      	beq.n	8005c38 <TIM_OC1_SetConfig+0x88>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a2f      	ldr	r2, [pc, #188]	; (8005cd0 <TIM_OC1_SetConfig+0x120>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00f      	beq.n	8005c38 <TIM_OC1_SetConfig+0x88>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a2e      	ldr	r2, [pc, #184]	; (8005cd4 <TIM_OC1_SetConfig+0x124>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00b      	beq.n	8005c38 <TIM_OC1_SetConfig+0x88>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a2d      	ldr	r2, [pc, #180]	; (8005cd8 <TIM_OC1_SetConfig+0x128>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d007      	beq.n	8005c38 <TIM_OC1_SetConfig+0x88>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a2c      	ldr	r2, [pc, #176]	; (8005cdc <TIM_OC1_SetConfig+0x12c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d003      	beq.n	8005c38 <TIM_OC1_SetConfig+0x88>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a2b      	ldr	r2, [pc, #172]	; (8005ce0 <TIM_OC1_SetConfig+0x130>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d10c      	bne.n	8005c52 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f023 0308 	bic.w	r3, r3, #8
 8005c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f023 0304 	bic.w	r3, r3, #4
 8005c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a1d      	ldr	r2, [pc, #116]	; (8005ccc <TIM_OC1_SetConfig+0x11c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d013      	beq.n	8005c82 <TIM_OC1_SetConfig+0xd2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a1c      	ldr	r2, [pc, #112]	; (8005cd0 <TIM_OC1_SetConfig+0x120>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00f      	beq.n	8005c82 <TIM_OC1_SetConfig+0xd2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a1b      	ldr	r2, [pc, #108]	; (8005cd4 <TIM_OC1_SetConfig+0x124>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00b      	beq.n	8005c82 <TIM_OC1_SetConfig+0xd2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a1a      	ldr	r2, [pc, #104]	; (8005cd8 <TIM_OC1_SetConfig+0x128>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d007      	beq.n	8005c82 <TIM_OC1_SetConfig+0xd2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a19      	ldr	r2, [pc, #100]	; (8005cdc <TIM_OC1_SetConfig+0x12c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d003      	beq.n	8005c82 <TIM_OC1_SetConfig+0xd2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a18      	ldr	r2, [pc, #96]	; (8005ce0 <TIM_OC1_SetConfig+0x130>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d111      	bne.n	8005ca6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	621a      	str	r2, [r3, #32]
}
 8005cc0:	bf00      	nop
 8005cc2:	371c      	adds	r7, #28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	40012c00 	.word	0x40012c00
 8005cd0:	40013400 	.word	0x40013400
 8005cd4:	40014000 	.word	0x40014000
 8005cd8:	40014400 	.word	0x40014400
 8005cdc:	40014800 	.word	0x40014800
 8005ce0:	40015000 	.word	0x40015000

08005ce4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f023 0210 	bic.w	r2, r3, #16
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	021b      	lsls	r3, r3, #8
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f023 0320 	bic.w	r3, r3, #32
 8005d32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a2c      	ldr	r2, [pc, #176]	; (8005df4 <TIM_OC2_SetConfig+0x110>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d007      	beq.n	8005d58 <TIM_OC2_SetConfig+0x74>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a2b      	ldr	r2, [pc, #172]	; (8005df8 <TIM_OC2_SetConfig+0x114>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d003      	beq.n	8005d58 <TIM_OC2_SetConfig+0x74>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a2a      	ldr	r2, [pc, #168]	; (8005dfc <TIM_OC2_SetConfig+0x118>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d10d      	bne.n	8005d74 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a1f      	ldr	r2, [pc, #124]	; (8005df4 <TIM_OC2_SetConfig+0x110>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d013      	beq.n	8005da4 <TIM_OC2_SetConfig+0xc0>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a1e      	ldr	r2, [pc, #120]	; (8005df8 <TIM_OC2_SetConfig+0x114>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00f      	beq.n	8005da4 <TIM_OC2_SetConfig+0xc0>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a1e      	ldr	r2, [pc, #120]	; (8005e00 <TIM_OC2_SetConfig+0x11c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00b      	beq.n	8005da4 <TIM_OC2_SetConfig+0xc0>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a1d      	ldr	r2, [pc, #116]	; (8005e04 <TIM_OC2_SetConfig+0x120>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d007      	beq.n	8005da4 <TIM_OC2_SetConfig+0xc0>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a1c      	ldr	r2, [pc, #112]	; (8005e08 <TIM_OC2_SetConfig+0x124>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d003      	beq.n	8005da4 <TIM_OC2_SetConfig+0xc0>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a17      	ldr	r2, [pc, #92]	; (8005dfc <TIM_OC2_SetConfig+0x118>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d113      	bne.n	8005dcc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005daa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005db2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	621a      	str	r2, [r3, #32]
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40013400 	.word	0x40013400
 8005dfc:	40015000 	.word	0x40015000
 8005e00:	40014000 	.word	0x40014000
 8005e04:	40014400 	.word	0x40014400
 8005e08:	40014800 	.word	0x40014800

08005e0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 0303 	bic.w	r3, r3, #3
 8005e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	021b      	lsls	r3, r3, #8
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a2b      	ldr	r2, [pc, #172]	; (8005f18 <TIM_OC3_SetConfig+0x10c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d007      	beq.n	8005e7e <TIM_OC3_SetConfig+0x72>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a2a      	ldr	r2, [pc, #168]	; (8005f1c <TIM_OC3_SetConfig+0x110>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d003      	beq.n	8005e7e <TIM_OC3_SetConfig+0x72>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a29      	ldr	r2, [pc, #164]	; (8005f20 <TIM_OC3_SetConfig+0x114>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d10d      	bne.n	8005e9a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	021b      	lsls	r3, r3, #8
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a1e      	ldr	r2, [pc, #120]	; (8005f18 <TIM_OC3_SetConfig+0x10c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d013      	beq.n	8005eca <TIM_OC3_SetConfig+0xbe>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a1d      	ldr	r2, [pc, #116]	; (8005f1c <TIM_OC3_SetConfig+0x110>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d00f      	beq.n	8005eca <TIM_OC3_SetConfig+0xbe>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a1d      	ldr	r2, [pc, #116]	; (8005f24 <TIM_OC3_SetConfig+0x118>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00b      	beq.n	8005eca <TIM_OC3_SetConfig+0xbe>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a1c      	ldr	r2, [pc, #112]	; (8005f28 <TIM_OC3_SetConfig+0x11c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d007      	beq.n	8005eca <TIM_OC3_SetConfig+0xbe>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a1b      	ldr	r2, [pc, #108]	; (8005f2c <TIM_OC3_SetConfig+0x120>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d003      	beq.n	8005eca <TIM_OC3_SetConfig+0xbe>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a16      	ldr	r2, [pc, #88]	; (8005f20 <TIM_OC3_SetConfig+0x114>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d113      	bne.n	8005ef2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	011b      	lsls	r3, r3, #4
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	621a      	str	r2, [r3, #32]
}
 8005f0c:	bf00      	nop
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	40012c00 	.word	0x40012c00
 8005f1c:	40013400 	.word	0x40013400
 8005f20:	40015000 	.word	0x40015000
 8005f24:	40014000 	.word	0x40014000
 8005f28:	40014400 	.word	0x40014400
 8005f2c:	40014800 	.word	0x40014800

08005f30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	031b      	lsls	r3, r3, #12
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a2c      	ldr	r2, [pc, #176]	; (8006040 <TIM_OC4_SetConfig+0x110>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d007      	beq.n	8005fa4 <TIM_OC4_SetConfig+0x74>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a2b      	ldr	r2, [pc, #172]	; (8006044 <TIM_OC4_SetConfig+0x114>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d003      	beq.n	8005fa4 <TIM_OC4_SetConfig+0x74>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a2a      	ldr	r2, [pc, #168]	; (8006048 <TIM_OC4_SetConfig+0x118>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d10d      	bne.n	8005fc0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	031b      	lsls	r3, r3, #12
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a1f      	ldr	r2, [pc, #124]	; (8006040 <TIM_OC4_SetConfig+0x110>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d013      	beq.n	8005ff0 <TIM_OC4_SetConfig+0xc0>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a1e      	ldr	r2, [pc, #120]	; (8006044 <TIM_OC4_SetConfig+0x114>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00f      	beq.n	8005ff0 <TIM_OC4_SetConfig+0xc0>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a1e      	ldr	r2, [pc, #120]	; (800604c <TIM_OC4_SetConfig+0x11c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00b      	beq.n	8005ff0 <TIM_OC4_SetConfig+0xc0>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a1d      	ldr	r2, [pc, #116]	; (8006050 <TIM_OC4_SetConfig+0x120>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d007      	beq.n	8005ff0 <TIM_OC4_SetConfig+0xc0>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a1c      	ldr	r2, [pc, #112]	; (8006054 <TIM_OC4_SetConfig+0x124>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d003      	beq.n	8005ff0 <TIM_OC4_SetConfig+0xc0>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a17      	ldr	r2, [pc, #92]	; (8006048 <TIM_OC4_SetConfig+0x118>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d113      	bne.n	8006018 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ff6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ffe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	019b      	lsls	r3, r3, #6
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	019b      	lsls	r3, r3, #6
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	4313      	orrs	r3, r2
 8006016:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	621a      	str	r2, [r3, #32]
}
 8006032:	bf00      	nop
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	40012c00 	.word	0x40012c00
 8006044:	40013400 	.word	0x40013400
 8006048:	40015000 	.word	0x40015000
 800604c:	40014000 	.word	0x40014000
 8006050:	40014400 	.word	0x40014400
 8006054:	40014800 	.word	0x40014800

08006058 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800609c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	041b      	lsls	r3, r3, #16
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a19      	ldr	r2, [pc, #100]	; (8006114 <TIM_OC5_SetConfig+0xbc>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d013      	beq.n	80060da <TIM_OC5_SetConfig+0x82>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a18      	ldr	r2, [pc, #96]	; (8006118 <TIM_OC5_SetConfig+0xc0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00f      	beq.n	80060da <TIM_OC5_SetConfig+0x82>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a17      	ldr	r2, [pc, #92]	; (800611c <TIM_OC5_SetConfig+0xc4>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d00b      	beq.n	80060da <TIM_OC5_SetConfig+0x82>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a16      	ldr	r2, [pc, #88]	; (8006120 <TIM_OC5_SetConfig+0xc8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d007      	beq.n	80060da <TIM_OC5_SetConfig+0x82>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a15      	ldr	r2, [pc, #84]	; (8006124 <TIM_OC5_SetConfig+0xcc>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d003      	beq.n	80060da <TIM_OC5_SetConfig+0x82>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a14      	ldr	r2, [pc, #80]	; (8006128 <TIM_OC5_SetConfig+0xd0>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d109      	bne.n	80060ee <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	021b      	lsls	r3, r3, #8
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	621a      	str	r2, [r3, #32]
}
 8006108:	bf00      	nop
 800610a:	371c      	adds	r7, #28
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	40012c00 	.word	0x40012c00
 8006118:	40013400 	.word	0x40013400
 800611c:	40014000 	.word	0x40014000
 8006120:	40014400 	.word	0x40014400
 8006124:	40014800 	.word	0x40014800
 8006128:	40015000 	.word	0x40015000

0800612c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800615a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800615e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006172:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	051b      	lsls	r3, r3, #20
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a1a      	ldr	r2, [pc, #104]	; (80061ec <TIM_OC6_SetConfig+0xc0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d013      	beq.n	80061b0 <TIM_OC6_SetConfig+0x84>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a19      	ldr	r2, [pc, #100]	; (80061f0 <TIM_OC6_SetConfig+0xc4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00f      	beq.n	80061b0 <TIM_OC6_SetConfig+0x84>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a18      	ldr	r2, [pc, #96]	; (80061f4 <TIM_OC6_SetConfig+0xc8>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d00b      	beq.n	80061b0 <TIM_OC6_SetConfig+0x84>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a17      	ldr	r2, [pc, #92]	; (80061f8 <TIM_OC6_SetConfig+0xcc>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d007      	beq.n	80061b0 <TIM_OC6_SetConfig+0x84>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a16      	ldr	r2, [pc, #88]	; (80061fc <TIM_OC6_SetConfig+0xd0>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_OC6_SetConfig+0x84>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a15      	ldr	r2, [pc, #84]	; (8006200 <TIM_OC6_SetConfig+0xd4>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d109      	bne.n	80061c4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	029b      	lsls	r3, r3, #10
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	621a      	str	r2, [r3, #32]
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40012c00 	.word	0x40012c00
 80061f0:	40013400 	.word	0x40013400
 80061f4:	40014000 	.word	0x40014000
 80061f8:	40014400 	.word	0x40014400
 80061fc:	40014800 	.word	0x40014800
 8006200:	40015000 	.word	0x40015000

08006204 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006224:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006236:	f023 0307 	bic.w	r3, r3, #7
 800623a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	4a56      	ldr	r2, [pc, #344]	; (80063ac <TIM_SlaveTimer_SetConfig+0x1a8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	f000 80a2 	beq.w	800639e <TIM_SlaveTimer_SetConfig+0x19a>
 800625a:	4a54      	ldr	r2, [pc, #336]	; (80063ac <TIM_SlaveTimer_SetConfig+0x1a8>)
 800625c:	4293      	cmp	r3, r2
 800625e:	f200 809b 	bhi.w	8006398 <TIM_SlaveTimer_SetConfig+0x194>
 8006262:	4a53      	ldr	r2, [pc, #332]	; (80063b0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8006264:	4293      	cmp	r3, r2
 8006266:	f000 809a 	beq.w	800639e <TIM_SlaveTimer_SetConfig+0x19a>
 800626a:	4a51      	ldr	r2, [pc, #324]	; (80063b0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800626c:	4293      	cmp	r3, r2
 800626e:	f200 8093 	bhi.w	8006398 <TIM_SlaveTimer_SetConfig+0x194>
 8006272:	4a50      	ldr	r2, [pc, #320]	; (80063b4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	f000 8092 	beq.w	800639e <TIM_SlaveTimer_SetConfig+0x19a>
 800627a:	4a4e      	ldr	r2, [pc, #312]	; (80063b4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800627c:	4293      	cmp	r3, r2
 800627e:	f200 808b 	bhi.w	8006398 <TIM_SlaveTimer_SetConfig+0x194>
 8006282:	4a4d      	ldr	r2, [pc, #308]	; (80063b8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8006284:	4293      	cmp	r3, r2
 8006286:	f000 808a 	beq.w	800639e <TIM_SlaveTimer_SetConfig+0x19a>
 800628a:	4a4b      	ldr	r2, [pc, #300]	; (80063b8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	f200 8083 	bhi.w	8006398 <TIM_SlaveTimer_SetConfig+0x194>
 8006292:	4a4a      	ldr	r2, [pc, #296]	; (80063bc <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006294:	4293      	cmp	r3, r2
 8006296:	f000 8082 	beq.w	800639e <TIM_SlaveTimer_SetConfig+0x19a>
 800629a:	4a48      	ldr	r2, [pc, #288]	; (80063bc <TIM_SlaveTimer_SetConfig+0x1b8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d87b      	bhi.n	8006398 <TIM_SlaveTimer_SetConfig+0x194>
 80062a0:	4a47      	ldr	r2, [pc, #284]	; (80063c0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d07b      	beq.n	800639e <TIM_SlaveTimer_SetConfig+0x19a>
 80062a6:	4a46      	ldr	r2, [pc, #280]	; (80063c0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d875      	bhi.n	8006398 <TIM_SlaveTimer_SetConfig+0x194>
 80062ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80062b0:	d075      	beq.n	800639e <TIM_SlaveTimer_SetConfig+0x19a>
 80062b2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80062b6:	d86f      	bhi.n	8006398 <TIM_SlaveTimer_SetConfig+0x194>
 80062b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062bc:	d06f      	beq.n	800639e <TIM_SlaveTimer_SetConfig+0x19a>
 80062be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062c2:	d869      	bhi.n	8006398 <TIM_SlaveTimer_SetConfig+0x194>
 80062c4:	2b70      	cmp	r3, #112	; 0x70
 80062c6:	d01a      	beq.n	80062fe <TIM_SlaveTimer_SetConfig+0xfa>
 80062c8:	2b70      	cmp	r3, #112	; 0x70
 80062ca:	d865      	bhi.n	8006398 <TIM_SlaveTimer_SetConfig+0x194>
 80062cc:	2b60      	cmp	r3, #96	; 0x60
 80062ce:	d059      	beq.n	8006384 <TIM_SlaveTimer_SetConfig+0x180>
 80062d0:	2b60      	cmp	r3, #96	; 0x60
 80062d2:	d861      	bhi.n	8006398 <TIM_SlaveTimer_SetConfig+0x194>
 80062d4:	2b50      	cmp	r3, #80	; 0x50
 80062d6:	d04b      	beq.n	8006370 <TIM_SlaveTimer_SetConfig+0x16c>
 80062d8:	2b50      	cmp	r3, #80	; 0x50
 80062da:	d85d      	bhi.n	8006398 <TIM_SlaveTimer_SetConfig+0x194>
 80062dc:	2b40      	cmp	r3, #64	; 0x40
 80062de:	d019      	beq.n	8006314 <TIM_SlaveTimer_SetConfig+0x110>
 80062e0:	2b40      	cmp	r3, #64	; 0x40
 80062e2:	d859      	bhi.n	8006398 <TIM_SlaveTimer_SetConfig+0x194>
 80062e4:	2b30      	cmp	r3, #48	; 0x30
 80062e6:	d05a      	beq.n	800639e <TIM_SlaveTimer_SetConfig+0x19a>
 80062e8:	2b30      	cmp	r3, #48	; 0x30
 80062ea:	d855      	bhi.n	8006398 <TIM_SlaveTimer_SetConfig+0x194>
 80062ec:	2b20      	cmp	r3, #32
 80062ee:	d056      	beq.n	800639e <TIM_SlaveTimer_SetConfig+0x19a>
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	d851      	bhi.n	8006398 <TIM_SlaveTimer_SetConfig+0x194>
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d052      	beq.n	800639e <TIM_SlaveTimer_SetConfig+0x19a>
 80062f8:	2b10      	cmp	r3, #16
 80062fa:	d050      	beq.n	800639e <TIM_SlaveTimer_SetConfig+0x19a>
 80062fc:	e04c      	b.n	8006398 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6818      	ldr	r0, [r3, #0]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68d9      	ldr	r1, [r3, #12]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f000 f9ff 	bl	8006710 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006312:	e045      	b.n	80063a0 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b05      	cmp	r3, #5
 800631a:	d004      	beq.n	8006326 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006320:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8006324:	d101      	bne.n	800632a <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e03b      	b.n	80063a2 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6a1a      	ldr	r2, [r3, #32]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0201 	bic.w	r2, r2, #1
 8006340:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006350:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	4313      	orrs	r3, r2
 800635c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	621a      	str	r2, [r3, #32]
      break;
 800636e:	e017      	b.n	80063a0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6818      	ldr	r0, [r3, #0]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	6899      	ldr	r1, [r3, #8]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	461a      	mov	r2, r3
 800637e:	f000 f895 	bl	80064ac <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006382:	e00d      	b.n	80063a0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	6899      	ldr	r1, [r3, #8]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	461a      	mov	r2, r3
 8006392:	f000 f8f7 	bl	8006584 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006396:	e003      	b.n	80063a0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	75fb      	strb	r3, [r7, #23]
      break;
 800639c:	e000      	b.n	80063a0 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800639e:	bf00      	nop
  }

  return status;
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	00100070 	.word	0x00100070
 80063b0:	00100060 	.word	0x00100060
 80063b4:	00100050 	.word	0x00100050
 80063b8:	00100040 	.word	0x00100040
 80063bc:	00100030 	.word	0x00100030
 80063c0:	00100020 	.word	0x00100020

080063c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	f023 0201 	bic.w	r2, r3, #1
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4a28      	ldr	r2, [pc, #160]	; (8006490 <TIM_TI1_SetConfig+0xcc>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d01b      	beq.n	800642a <TIM_TI1_SetConfig+0x66>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f8:	d017      	beq.n	800642a <TIM_TI1_SetConfig+0x66>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4a25      	ldr	r2, [pc, #148]	; (8006494 <TIM_TI1_SetConfig+0xd0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d013      	beq.n	800642a <TIM_TI1_SetConfig+0x66>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4a24      	ldr	r2, [pc, #144]	; (8006498 <TIM_TI1_SetConfig+0xd4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00f      	beq.n	800642a <TIM_TI1_SetConfig+0x66>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4a23      	ldr	r2, [pc, #140]	; (800649c <TIM_TI1_SetConfig+0xd8>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00b      	beq.n	800642a <TIM_TI1_SetConfig+0x66>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4a22      	ldr	r2, [pc, #136]	; (80064a0 <TIM_TI1_SetConfig+0xdc>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d007      	beq.n	800642a <TIM_TI1_SetConfig+0x66>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4a21      	ldr	r2, [pc, #132]	; (80064a4 <TIM_TI1_SetConfig+0xe0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d003      	beq.n	800642a <TIM_TI1_SetConfig+0x66>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4a20      	ldr	r2, [pc, #128]	; (80064a8 <TIM_TI1_SetConfig+0xe4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d101      	bne.n	800642e <TIM_TI1_SetConfig+0x6a>
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <TIM_TI1_SetConfig+0x6c>
 800642e:	2300      	movs	r3, #0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d008      	beq.n	8006446 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f023 0303 	bic.w	r3, r3, #3
 800643a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4313      	orrs	r3, r2
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	e003      	b.n	800644e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f043 0301 	orr.w	r3, r3, #1
 800644c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006454:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	b2db      	uxtb	r3, r3
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	4313      	orrs	r3, r2
 8006460:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f023 030a 	bic.w	r3, r3, #10
 8006468:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f003 030a 	and.w	r3, r3, #10
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	621a      	str	r2, [r3, #32]
}
 8006482:	bf00      	nop
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	40012c00 	.word	0x40012c00
 8006494:	40000400 	.word	0x40000400
 8006498:	40000800 	.word	0x40000800
 800649c:	40000c00 	.word	0x40000c00
 80064a0:	40013400 	.word	0x40013400
 80064a4:	40014000 	.word	0x40014000
 80064a8:	40015000 	.word	0x40015000

080064ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	f023 0201 	bic.w	r2, r3, #1
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4313      	orrs	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f023 030a 	bic.w	r3, r3, #10
 80064e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	621a      	str	r2, [r3, #32]
}
 80064fe:	bf00      	nop
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800650a:	b480      	push	{r7}
 800650c:	b087      	sub	sp, #28
 800650e:	af00      	add	r7, sp, #0
 8006510:	60f8      	str	r0, [r7, #12]
 8006512:	60b9      	str	r1, [r7, #8]
 8006514:	607a      	str	r2, [r7, #4]
 8006516:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	f023 0210 	bic.w	r2, r3, #16
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006536:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	021b      	lsls	r3, r3, #8
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006548:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	031b      	lsls	r3, r3, #12
 800654e:	b29b      	uxth	r3, r3
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800655c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	4313      	orrs	r3, r2
 800656a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	621a      	str	r2, [r3, #32]
}
 8006578:	bf00      	nop
 800657a:	371c      	adds	r7, #28
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	f023 0210 	bic.w	r2, r3, #16
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	031b      	lsls	r3, r3, #12
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	621a      	str	r2, [r3, #32]
}
 80065d8:	bf00      	nop
 80065da:	371c      	adds	r7, #28
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f023 0303 	bic.w	r3, r3, #3
 8006610:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006620:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	b2db      	uxtb	r3, r3
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	4313      	orrs	r3, r2
 800662c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006634:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	021b      	lsls	r3, r3, #8
 800663a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4313      	orrs	r3, r2
 8006642:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	621a      	str	r2, [r3, #32]
}
 8006650:	bf00      	nop
 8006652:	371c      	adds	r7, #28
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
 8006668:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006688:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	021b      	lsls	r3, r3, #8
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4313      	orrs	r3, r2
 8006692:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800669a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	031b      	lsls	r3, r3, #12
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80066ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	031b      	lsls	r3, r3, #12
 80066b4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	621a      	str	r2, [r3, #32]
}
 80066ca:	bf00      	nop
 80066cc:	371c      	adds	r7, #28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b085      	sub	sp, #20
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80066ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	f043 0307 	orr.w	r3, r3, #7
 80066fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	609a      	str	r2, [r3, #8]
}
 8006704:	bf00      	nop
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800672a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	021a      	lsls	r2, r3, #8
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	431a      	orrs	r2, r3
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	4313      	orrs	r3, r2
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	4313      	orrs	r3, r2
 800673c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	609a      	str	r2, [r3, #8]
}
 8006744:	bf00      	nop
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f003 031f 	and.w	r3, r3, #31
 8006762:	2201      	movs	r2, #1
 8006764:	fa02 f303 	lsl.w	r3, r2, r3
 8006768:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a1a      	ldr	r2, [r3, #32]
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	43db      	mvns	r3, r3
 8006772:	401a      	ands	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6a1a      	ldr	r2, [r3, #32]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f003 031f 	and.w	r3, r3, #31
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	fa01 f303 	lsl.w	r3, r1, r3
 8006788:	431a      	orrs	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	621a      	str	r2, [r3, #32]
}
 800678e:	bf00      	nop
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
	...

0800679c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d109      	bne.n	80067c0 <HAL_TIMEx_PWMN_Start+0x24>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	bf14      	ite	ne
 80067b8:	2301      	movne	r3, #1
 80067ba:	2300      	moveq	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	e022      	b.n	8006806 <HAL_TIMEx_PWMN_Start+0x6a>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d109      	bne.n	80067da <HAL_TIMEx_PWMN_Start+0x3e>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	bf14      	ite	ne
 80067d2:	2301      	movne	r3, #1
 80067d4:	2300      	moveq	r3, #0
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	e015      	b.n	8006806 <HAL_TIMEx_PWMN_Start+0x6a>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d109      	bne.n	80067f4 <HAL_TIMEx_PWMN_Start+0x58>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	bf14      	ite	ne
 80067ec:	2301      	movne	r3, #1
 80067ee:	2300      	moveq	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	e008      	b.n	8006806 <HAL_TIMEx_PWMN_Start+0x6a>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	bf14      	ite	ne
 8006800:	2301      	movne	r3, #1
 8006802:	2300      	moveq	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e073      	b.n	80068f6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d104      	bne.n	800681e <HAL_TIMEx_PWMN_Start+0x82>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2202      	movs	r2, #2
 8006818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800681c:	e013      	b.n	8006846 <HAL_TIMEx_PWMN_Start+0xaa>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b04      	cmp	r3, #4
 8006822:	d104      	bne.n	800682e <HAL_TIMEx_PWMN_Start+0x92>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800682c:	e00b      	b.n	8006846 <HAL_TIMEx_PWMN_Start+0xaa>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b08      	cmp	r3, #8
 8006832:	d104      	bne.n	800683e <HAL_TIMEx_PWMN_Start+0xa2>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800683c:	e003      	b.n	8006846 <HAL_TIMEx_PWMN_Start+0xaa>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2202      	movs	r2, #2
 8006842:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2204      	movs	r2, #4
 800684c:	6839      	ldr	r1, [r7, #0]
 800684e:	4618      	mov	r0, r3
 8006850:	f000 f9f4 	bl	8006c3c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006862:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a25      	ldr	r2, [pc, #148]	; (8006900 <HAL_TIMEx_PWMN_Start+0x164>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d022      	beq.n	80068b4 <HAL_TIMEx_PWMN_Start+0x118>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006876:	d01d      	beq.n	80068b4 <HAL_TIMEx_PWMN_Start+0x118>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a21      	ldr	r2, [pc, #132]	; (8006904 <HAL_TIMEx_PWMN_Start+0x168>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d018      	beq.n	80068b4 <HAL_TIMEx_PWMN_Start+0x118>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a20      	ldr	r2, [pc, #128]	; (8006908 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d013      	beq.n	80068b4 <HAL_TIMEx_PWMN_Start+0x118>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a1e      	ldr	r2, [pc, #120]	; (800690c <HAL_TIMEx_PWMN_Start+0x170>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d00e      	beq.n	80068b4 <HAL_TIMEx_PWMN_Start+0x118>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a1d      	ldr	r2, [pc, #116]	; (8006910 <HAL_TIMEx_PWMN_Start+0x174>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d009      	beq.n	80068b4 <HAL_TIMEx_PWMN_Start+0x118>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a1b      	ldr	r2, [pc, #108]	; (8006914 <HAL_TIMEx_PWMN_Start+0x178>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d004      	beq.n	80068b4 <HAL_TIMEx_PWMN_Start+0x118>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a1a      	ldr	r2, [pc, #104]	; (8006918 <HAL_TIMEx_PWMN_Start+0x17c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d115      	bne.n	80068e0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689a      	ldr	r2, [r3, #8]
 80068ba:	4b18      	ldr	r3, [pc, #96]	; (800691c <HAL_TIMEx_PWMN_Start+0x180>)
 80068bc:	4013      	ands	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2b06      	cmp	r3, #6
 80068c4:	d015      	beq.n	80068f2 <HAL_TIMEx_PWMN_Start+0x156>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068cc:	d011      	beq.n	80068f2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f042 0201 	orr.w	r2, r2, #1
 80068dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068de:	e008      	b.n	80068f2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f042 0201 	orr.w	r2, r2, #1
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	e000      	b.n	80068f4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	40012c00 	.word	0x40012c00
 8006904:	40000400 	.word	0x40000400
 8006908:	40000800 	.word	0x40000800
 800690c:	40000c00 	.word	0x40000c00
 8006910:	40013400 	.word	0x40013400
 8006914:	40014000 	.word	0x40014000
 8006918:	40015000 	.word	0x40015000
 800691c:	00010007 	.word	0x00010007

08006920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006934:	2302      	movs	r3, #2
 8006936:	e074      	b.n	8006a22 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a34      	ldr	r2, [pc, #208]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d009      	beq.n	8006976 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a33      	ldr	r2, [pc, #204]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d004      	beq.n	8006976 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a31      	ldr	r2, [pc, #196]	; (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d108      	bne.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800697c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	4313      	orrs	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800698e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006992:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a21      	ldr	r2, [pc, #132]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d022      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b8:	d01d      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a1f      	ldr	r2, [pc, #124]	; (8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d018      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a1d      	ldr	r2, [pc, #116]	; (8006a40 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d013      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a1c      	ldr	r2, [pc, #112]	; (8006a44 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d00e      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a15      	ldr	r2, [pc, #84]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d009      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a18      	ldr	r2, [pc, #96]	; (8006a48 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d004      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a11      	ldr	r2, [pc, #68]	; (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d10c      	bne.n	8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	40012c00 	.word	0x40012c00
 8006a34:	40013400 	.word	0x40013400
 8006a38:	40015000 	.word	0x40015000
 8006a3c:	40000400 	.word	0x40000400
 8006a40:	40000800 	.word	0x40000800
 8006a44:	40000c00 	.word	0x40000c00
 8006a48:	40014000 	.word	0x40014000

08006a4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e096      	b.n	8006b96 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	041b      	lsls	r3, r3, #16
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a2f      	ldr	r2, [pc, #188]	; (8006ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d009      	beq.n	8006b00 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a2d      	ldr	r2, [pc, #180]	; (8006ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d004      	beq.n	8006b00 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a2c      	ldr	r2, [pc, #176]	; (8006bac <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d106      	bne.n	8006b0e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a24      	ldr	r2, [pc, #144]	; (8006ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d009      	beq.n	8006b2c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a22      	ldr	r2, [pc, #136]	; (8006ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d004      	beq.n	8006b2c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a21      	ldr	r2, [pc, #132]	; (8006bac <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d12b      	bne.n	8006b84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b36:	051b      	lsls	r3, r3, #20
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	4313      	orrs	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a11      	ldr	r2, [pc, #68]	; (8006ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d009      	beq.n	8006b76 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a10      	ldr	r2, [pc, #64]	; (8006ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d004      	beq.n	8006b76 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a0e      	ldr	r2, [pc, #56]	; (8006bac <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d106      	bne.n	8006b84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	40012c00 	.word	0x40012c00
 8006ba8:	40013400 	.word	0x40013400
 8006bac:	40015000 	.word	0x40015000

08006bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	f003 031f 	and.w	r3, r3, #31
 8006c4e:	2204      	movs	r2, #4
 8006c50:	fa02 f303 	lsl.w	r3, r2, r3
 8006c54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6a1a      	ldr	r2, [r3, #32]
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	43db      	mvns	r3, r3
 8006c5e:	401a      	ands	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6a1a      	ldr	r2, [r3, #32]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f003 031f 	and.w	r3, r3, #31
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	fa01 f303 	lsl.w	r3, r1, r3
 8006c74:	431a      	orrs	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	621a      	str	r2, [r3, #32]
}
 8006c7a:	bf00      	nop
 8006c7c:	371c      	adds	r7, #28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b082      	sub	sp, #8
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e042      	b.n	8006d1e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d106      	bne.n	8006cb0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7fa fca2 	bl	80015f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2224      	movs	r2, #36	; 0x24
 8006cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 0201 	bic.w	r2, r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fc51 	bl	8007570 <UART_SetConfig>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e022      	b.n	8006d1e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 ff41 	bl	8007b68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cf4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f042 0201 	orr.w	r2, r2, #1
 8006d14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 ffc8 	bl	8007cac <UART_CheckIdleState>
 8006d1c:	4603      	mov	r3, r0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b08a      	sub	sp, #40	; 0x28
 8006d2a:	af02      	add	r7, sp, #8
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	603b      	str	r3, [r7, #0]
 8006d32:	4613      	mov	r3, r2
 8006d34:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	f040 8083 	bne.w	8006e48 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <HAL_UART_Transmit+0x28>
 8006d48:	88fb      	ldrh	r3, [r7, #6]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e07b      	b.n	8006e4a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d101      	bne.n	8006d60 <HAL_UART_Transmit+0x3a>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e074      	b.n	8006e4a <HAL_UART_Transmit+0x124>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2221      	movs	r2, #33	; 0x21
 8006d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d78:	f7fa fcf0 	bl	800175c <HAL_GetTick>
 8006d7c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	88fa      	ldrh	r2, [r7, #6]
 8006d82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	88fa      	ldrh	r2, [r7, #6]
 8006d8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d96:	d108      	bne.n	8006daa <HAL_UART_Transmit+0x84>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d104      	bne.n	8006daa <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006da0:	2300      	movs	r3, #0
 8006da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	61bb      	str	r3, [r7, #24]
 8006da8:	e003      	b.n	8006db2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006dba:	e02c      	b.n	8006e16 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2180      	movs	r1, #128	; 0x80
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 ffbb 	bl	8007d42 <UART_WaitOnFlagUntilTimeout>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e039      	b.n	8006e4a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10b      	bne.n	8006df4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	3302      	adds	r3, #2
 8006df0:	61bb      	str	r3, [r7, #24]
 8006df2:	e007      	b.n	8006e04 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	781a      	ldrb	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	3301      	adds	r3, #1
 8006e02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1cc      	bne.n	8006dbc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2140      	movs	r1, #64	; 0x40
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 ff88 	bl	8007d42 <UART_WaitOnFlagUntilTimeout>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e006      	b.n	8006e4a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2220      	movs	r2, #32
 8006e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	e000      	b.n	8006e4a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006e48:	2302      	movs	r3, #2
  }
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3720      	adds	r7, #32
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b08a      	sub	sp, #40	; 0x28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e68:	2b20      	cmp	r3, #32
 8006e6a:	d142      	bne.n	8006ef2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d002      	beq.n	8006e78 <HAL_UART_Receive_IT+0x24>
 8006e72:	88fb      	ldrh	r3, [r7, #6]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e03b      	b.n	8006ef4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d101      	bne.n	8006e8a <HAL_UART_Receive_IT+0x36>
 8006e86:	2302      	movs	r3, #2
 8006e88:	e034      	b.n	8006ef4 <HAL_UART_Receive_IT+0xa0>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a17      	ldr	r2, [pc, #92]	; (8006efc <HAL_UART_Receive_IT+0xa8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d01f      	beq.n	8006ee2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d018      	beq.n	8006ee2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	e853 3f00 	ldrex	r3, [r3]
 8006ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	623b      	str	r3, [r7, #32]
 8006ed0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed2:	69f9      	ldr	r1, [r7, #28]
 8006ed4:	6a3a      	ldr	r2, [r7, #32]
 8006ed6:	e841 2300 	strex	r3, r2, [r1]
 8006eda:	61bb      	str	r3, [r7, #24]
   return(result);
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1e6      	bne.n	8006eb0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ee2:	88fb      	ldrh	r3, [r7, #6]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	68b9      	ldr	r1, [r7, #8]
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 fff3 	bl	8007ed4 <UART_Start_Receive_IT>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	e000      	b.n	8006ef4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006ef2:	2302      	movs	r3, #2
  }
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3728      	adds	r7, #40	; 0x28
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	40008000 	.word	0x40008000

08006f00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b0ba      	sub	sp, #232	; 0xe8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006f2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006f2e:	4013      	ands	r3, r2
 8006f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006f34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d11b      	bne.n	8006f74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f40:	f003 0320 	and.w	r3, r3, #32
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d015      	beq.n	8006f74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f4c:	f003 0320 	and.w	r3, r3, #32
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d105      	bne.n	8006f60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d009      	beq.n	8006f74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 82d6 	beq.w	8007516 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	4798      	blx	r3
      }
      return;
 8006f72:	e2d0      	b.n	8007516 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 811f 	beq.w	80071bc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006f7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006f82:	4b8b      	ldr	r3, [pc, #556]	; (80071b0 <HAL_UART_IRQHandler+0x2b0>)
 8006f84:	4013      	ands	r3, r2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d106      	bne.n	8006f98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006f8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006f8e:	4b89      	ldr	r3, [pc, #548]	; (80071b4 <HAL_UART_IRQHandler+0x2b4>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 8112 	beq.w	80071bc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d011      	beq.n	8006fc8 <HAL_UART_IRQHandler+0xc8>
 8006fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00b      	beq.n	8006fc8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fbe:	f043 0201 	orr.w	r2, r3, #1
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fcc:	f003 0302 	and.w	r3, r3, #2
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d011      	beq.n	8006ff8 <HAL_UART_IRQHandler+0xf8>
 8006fd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00b      	beq.n	8006ff8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fee:	f043 0204 	orr.w	r2, r3, #4
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	d011      	beq.n	8007028 <HAL_UART_IRQHandler+0x128>
 8007004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00b      	beq.n	8007028 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2204      	movs	r2, #4
 8007016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800701e:	f043 0202 	orr.w	r2, r3, #2
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800702c:	f003 0308 	and.w	r3, r3, #8
 8007030:	2b00      	cmp	r3, #0
 8007032:	d017      	beq.n	8007064 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007038:	f003 0320 	and.w	r3, r3, #32
 800703c:	2b00      	cmp	r3, #0
 800703e:	d105      	bne.n	800704c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007040:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007044:	4b5a      	ldr	r3, [pc, #360]	; (80071b0 <HAL_UART_IRQHandler+0x2b0>)
 8007046:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00b      	beq.n	8007064 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2208      	movs	r2, #8
 8007052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800705a:	f043 0208 	orr.w	r2, r3, #8
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800706c:	2b00      	cmp	r3, #0
 800706e:	d012      	beq.n	8007096 <HAL_UART_IRQHandler+0x196>
 8007070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007074:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00c      	beq.n	8007096 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007084:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800708c:	f043 0220 	orr.w	r2, r3, #32
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 823c 	beq.w	800751a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80070a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d013      	beq.n	80070d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80070ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b2:	f003 0320 	and.w	r3, r3, #32
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d105      	bne.n	80070c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80070ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d007      	beq.n	80070d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ea:	2b40      	cmp	r3, #64	; 0x40
 80070ec:	d005      	beq.n	80070fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80070ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d04f      	beq.n	800719a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 f814 	bl	8008128 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710a:	2b40      	cmp	r3, #64	; 0x40
 800710c:	d141      	bne.n	8007192 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3308      	adds	r3, #8
 8007114:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007118:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800711c:	e853 3f00 	ldrex	r3, [r3]
 8007120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007124:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800712c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3308      	adds	r3, #8
 8007136:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800713a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800713e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007142:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007146:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1d9      	bne.n	800710e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800715e:	2b00      	cmp	r3, #0
 8007160:	d013      	beq.n	800718a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007166:	4a14      	ldr	r2, [pc, #80]	; (80071b8 <HAL_UART_IRQHandler+0x2b8>)
 8007168:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800716e:	4618      	mov	r0, r3
 8007170:	f7fc f815 	bl	800319e <HAL_DMA_Abort_IT>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d017      	beq.n	80071aa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800717e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007184:	4610      	mov	r0, r2
 8007186:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007188:	e00f      	b.n	80071aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f9da 	bl	8007544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007190:	e00b      	b.n	80071aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f9d6 	bl	8007544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007198:	e007      	b.n	80071aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f9d2 	bl	8007544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80071a8:	e1b7      	b.n	800751a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071aa:	bf00      	nop
    return;
 80071ac:	e1b5      	b.n	800751a <HAL_UART_IRQHandler+0x61a>
 80071ae:	bf00      	nop
 80071b0:	10000001 	.word	0x10000001
 80071b4:	04000120 	.word	0x04000120
 80071b8:	080081f5 	.word	0x080081f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	f040 814a 	bne.w	800745a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80071c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ca:	f003 0310 	and.w	r3, r3, #16
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f000 8143 	beq.w	800745a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80071d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d8:	f003 0310 	and.w	r3, r3, #16
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 813c 	beq.w	800745a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2210      	movs	r2, #16
 80071e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f4:	2b40      	cmp	r3, #64	; 0x40
 80071f6:	f040 80b5 	bne.w	8007364 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007206:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 8187 	beq.w	800751e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800721a:	429a      	cmp	r2, r3
 800721c:	f080 817f 	bcs.w	800751e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007226:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0320 	and.w	r3, r3, #32
 8007236:	2b00      	cmp	r3, #0
 8007238:	f040 8086 	bne.w	8007348 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007244:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007248:	e853 3f00 	ldrex	r3, [r3]
 800724c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007250:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	461a      	mov	r2, r3
 8007262:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007266:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800726a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007272:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007276:	e841 2300 	strex	r3, r2, [r1]
 800727a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800727e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1da      	bne.n	800723c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3308      	adds	r3, #8
 800728c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007290:	e853 3f00 	ldrex	r3, [r3]
 8007294:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007298:	f023 0301 	bic.w	r3, r3, #1
 800729c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3308      	adds	r3, #8
 80072a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80072bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e1      	bne.n	8007286 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3308      	adds	r3, #8
 80072c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80072d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3308      	adds	r3, #8
 80072e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80072e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80072e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80072f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e3      	bne.n	80072c2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2220      	movs	r2, #32
 80072fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007318:	f023 0310 	bic.w	r3, r3, #16
 800731c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	461a      	mov	r2, r3
 8007326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800732a:	65bb      	str	r3, [r7, #88]	; 0x58
 800732c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007330:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007332:	e841 2300 	strex	r3, r2, [r1]
 8007336:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1e4      	bne.n	8007308 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007342:	4618      	mov	r0, r3
 8007344:	f7fb fed2 	bl	80030ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007354:	b29b      	uxth	r3, r3
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	b29b      	uxth	r3, r3
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f8fb 	bl	8007558 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007362:	e0dc      	b.n	800751e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007370:	b29b      	uxth	r3, r3
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800737e:	b29b      	uxth	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 80ce 	beq.w	8007522 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007386:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 80c9 	beq.w	8007522 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800739e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	461a      	mov	r2, r3
 80073ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073b2:	647b      	str	r3, [r7, #68]	; 0x44
 80073b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e4      	bne.n	8007390 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3308      	adds	r3, #8
 80073cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	623b      	str	r3, [r7, #32]
   return(result);
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073dc:	f023 0301 	bic.w	r3, r3, #1
 80073e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3308      	adds	r3, #8
 80073ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80073ee:	633a      	str	r2, [r7, #48]	; 0x30
 80073f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073f6:	e841 2300 	strex	r3, r2, [r1]
 80073fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1e1      	bne.n	80073c6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2220      	movs	r2, #32
 8007406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	e853 3f00 	ldrex	r3, [r3]
 8007422:	60fb      	str	r3, [r7, #12]
   return(result);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 0310 	bic.w	r3, r3, #16
 800742a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007438:	61fb      	str	r3, [r7, #28]
 800743a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	69b9      	ldr	r1, [r7, #24]
 800743e:	69fa      	ldr	r2, [r7, #28]
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	617b      	str	r3, [r7, #20]
   return(result);
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e4      	bne.n	8007416 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800744c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f880 	bl	8007558 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007458:	e063      	b.n	8007522 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800745a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800745e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00e      	beq.n	8007484 <HAL_UART_IRQHandler+0x584>
 8007466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800746a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d008      	beq.n	8007484 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800747a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f001 fb57 	bl	8008b30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007482:	e051      	b.n	8007528 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748c:	2b00      	cmp	r3, #0
 800748e:	d014      	beq.n	80074ba <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007498:	2b00      	cmp	r3, #0
 800749a:	d105      	bne.n	80074a8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800749c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d008      	beq.n	80074ba <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d03a      	beq.n	8007526 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	4798      	blx	r3
    }
    return;
 80074b8:	e035      	b.n	8007526 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80074ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d009      	beq.n	80074da <HAL_UART_IRQHandler+0x5da>
 80074c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d003      	beq.n	80074da <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fea4 	bl	8008220 <UART_EndTransmit_IT>
    return;
 80074d8:	e026      	b.n	8007528 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80074da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d009      	beq.n	80074fa <HAL_UART_IRQHandler+0x5fa>
 80074e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f001 fb30 	bl	8008b58 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074f8:	e016      	b.n	8007528 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80074fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d010      	beq.n	8007528 <HAL_UART_IRQHandler+0x628>
 8007506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800750a:	2b00      	cmp	r3, #0
 800750c:	da0c      	bge.n	8007528 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 fb18 	bl	8008b44 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007514:	e008      	b.n	8007528 <HAL_UART_IRQHandler+0x628>
      return;
 8007516:	bf00      	nop
 8007518:	e006      	b.n	8007528 <HAL_UART_IRQHandler+0x628>
    return;
 800751a:	bf00      	nop
 800751c:	e004      	b.n	8007528 <HAL_UART_IRQHandler+0x628>
      return;
 800751e:	bf00      	nop
 8007520:	e002      	b.n	8007528 <HAL_UART_IRQHandler+0x628>
      return;
 8007522:	bf00      	nop
 8007524:	e000      	b.n	8007528 <HAL_UART_IRQHandler+0x628>
    return;
 8007526:	bf00      	nop
  }
}
 8007528:	37e8      	adds	r7, #232	; 0xe8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop

08007530 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007574:	b08c      	sub	sp, #48	; 0x30
 8007576:	af00      	add	r7, sp, #0
 8007578:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800757a:	2300      	movs	r3, #0
 800757c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	431a      	orrs	r2, r3
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	431a      	orrs	r2, r3
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	4313      	orrs	r3, r2
 8007596:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	4baa      	ldr	r3, [pc, #680]	; (8007848 <UART_SetConfig+0x2d8>)
 80075a0:	4013      	ands	r3, r2
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	6812      	ldr	r2, [r2, #0]
 80075a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075a8:	430b      	orrs	r3, r1
 80075aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	68da      	ldr	r2, [r3, #12]
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a9f      	ldr	r2, [pc, #636]	; (800784c <UART_SetConfig+0x2dc>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d004      	beq.n	80075dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075d8:	4313      	orrs	r3, r2
 80075da:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80075e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	6812      	ldr	r2, [r2, #0]
 80075ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075f0:	430b      	orrs	r3, r1
 80075f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fa:	f023 010f 	bic.w	r1, r3, #15
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a90      	ldr	r2, [pc, #576]	; (8007850 <UART_SetConfig+0x2e0>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d125      	bne.n	8007660 <UART_SetConfig+0xf0>
 8007614:	4b8f      	ldr	r3, [pc, #572]	; (8007854 <UART_SetConfig+0x2e4>)
 8007616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	2b03      	cmp	r3, #3
 8007620:	d81a      	bhi.n	8007658 <UART_SetConfig+0xe8>
 8007622:	a201      	add	r2, pc, #4	; (adr r2, 8007628 <UART_SetConfig+0xb8>)
 8007624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007628:	08007639 	.word	0x08007639
 800762c:	08007649 	.word	0x08007649
 8007630:	08007641 	.word	0x08007641
 8007634:	08007651 	.word	0x08007651
 8007638:	2301      	movs	r3, #1
 800763a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800763e:	e116      	b.n	800786e <UART_SetConfig+0x2fe>
 8007640:	2302      	movs	r3, #2
 8007642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007646:	e112      	b.n	800786e <UART_SetConfig+0x2fe>
 8007648:	2304      	movs	r3, #4
 800764a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800764e:	e10e      	b.n	800786e <UART_SetConfig+0x2fe>
 8007650:	2308      	movs	r3, #8
 8007652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007656:	e10a      	b.n	800786e <UART_SetConfig+0x2fe>
 8007658:	2310      	movs	r3, #16
 800765a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800765e:	e106      	b.n	800786e <UART_SetConfig+0x2fe>
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a7c      	ldr	r2, [pc, #496]	; (8007858 <UART_SetConfig+0x2e8>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d138      	bne.n	80076dc <UART_SetConfig+0x16c>
 800766a:	4b7a      	ldr	r3, [pc, #488]	; (8007854 <UART_SetConfig+0x2e4>)
 800766c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007670:	f003 030c 	and.w	r3, r3, #12
 8007674:	2b0c      	cmp	r3, #12
 8007676:	d82d      	bhi.n	80076d4 <UART_SetConfig+0x164>
 8007678:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <UART_SetConfig+0x110>)
 800767a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767e:	bf00      	nop
 8007680:	080076b5 	.word	0x080076b5
 8007684:	080076d5 	.word	0x080076d5
 8007688:	080076d5 	.word	0x080076d5
 800768c:	080076d5 	.word	0x080076d5
 8007690:	080076c5 	.word	0x080076c5
 8007694:	080076d5 	.word	0x080076d5
 8007698:	080076d5 	.word	0x080076d5
 800769c:	080076d5 	.word	0x080076d5
 80076a0:	080076bd 	.word	0x080076bd
 80076a4:	080076d5 	.word	0x080076d5
 80076a8:	080076d5 	.word	0x080076d5
 80076ac:	080076d5 	.word	0x080076d5
 80076b0:	080076cd 	.word	0x080076cd
 80076b4:	2300      	movs	r3, #0
 80076b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076ba:	e0d8      	b.n	800786e <UART_SetConfig+0x2fe>
 80076bc:	2302      	movs	r3, #2
 80076be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076c2:	e0d4      	b.n	800786e <UART_SetConfig+0x2fe>
 80076c4:	2304      	movs	r3, #4
 80076c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076ca:	e0d0      	b.n	800786e <UART_SetConfig+0x2fe>
 80076cc:	2308      	movs	r3, #8
 80076ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076d2:	e0cc      	b.n	800786e <UART_SetConfig+0x2fe>
 80076d4:	2310      	movs	r3, #16
 80076d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076da:	e0c8      	b.n	800786e <UART_SetConfig+0x2fe>
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a5e      	ldr	r2, [pc, #376]	; (800785c <UART_SetConfig+0x2ec>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d125      	bne.n	8007732 <UART_SetConfig+0x1c2>
 80076e6:	4b5b      	ldr	r3, [pc, #364]	; (8007854 <UART_SetConfig+0x2e4>)
 80076e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80076f0:	2b30      	cmp	r3, #48	; 0x30
 80076f2:	d016      	beq.n	8007722 <UART_SetConfig+0x1b2>
 80076f4:	2b30      	cmp	r3, #48	; 0x30
 80076f6:	d818      	bhi.n	800772a <UART_SetConfig+0x1ba>
 80076f8:	2b20      	cmp	r3, #32
 80076fa:	d00a      	beq.n	8007712 <UART_SetConfig+0x1a2>
 80076fc:	2b20      	cmp	r3, #32
 80076fe:	d814      	bhi.n	800772a <UART_SetConfig+0x1ba>
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <UART_SetConfig+0x19a>
 8007704:	2b10      	cmp	r3, #16
 8007706:	d008      	beq.n	800771a <UART_SetConfig+0x1aa>
 8007708:	e00f      	b.n	800772a <UART_SetConfig+0x1ba>
 800770a:	2300      	movs	r3, #0
 800770c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007710:	e0ad      	b.n	800786e <UART_SetConfig+0x2fe>
 8007712:	2302      	movs	r3, #2
 8007714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007718:	e0a9      	b.n	800786e <UART_SetConfig+0x2fe>
 800771a:	2304      	movs	r3, #4
 800771c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007720:	e0a5      	b.n	800786e <UART_SetConfig+0x2fe>
 8007722:	2308      	movs	r3, #8
 8007724:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007728:	e0a1      	b.n	800786e <UART_SetConfig+0x2fe>
 800772a:	2310      	movs	r3, #16
 800772c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007730:	e09d      	b.n	800786e <UART_SetConfig+0x2fe>
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a4a      	ldr	r2, [pc, #296]	; (8007860 <UART_SetConfig+0x2f0>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d125      	bne.n	8007788 <UART_SetConfig+0x218>
 800773c:	4b45      	ldr	r3, [pc, #276]	; (8007854 <UART_SetConfig+0x2e4>)
 800773e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007742:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007746:	2bc0      	cmp	r3, #192	; 0xc0
 8007748:	d016      	beq.n	8007778 <UART_SetConfig+0x208>
 800774a:	2bc0      	cmp	r3, #192	; 0xc0
 800774c:	d818      	bhi.n	8007780 <UART_SetConfig+0x210>
 800774e:	2b80      	cmp	r3, #128	; 0x80
 8007750:	d00a      	beq.n	8007768 <UART_SetConfig+0x1f8>
 8007752:	2b80      	cmp	r3, #128	; 0x80
 8007754:	d814      	bhi.n	8007780 <UART_SetConfig+0x210>
 8007756:	2b00      	cmp	r3, #0
 8007758:	d002      	beq.n	8007760 <UART_SetConfig+0x1f0>
 800775a:	2b40      	cmp	r3, #64	; 0x40
 800775c:	d008      	beq.n	8007770 <UART_SetConfig+0x200>
 800775e:	e00f      	b.n	8007780 <UART_SetConfig+0x210>
 8007760:	2300      	movs	r3, #0
 8007762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007766:	e082      	b.n	800786e <UART_SetConfig+0x2fe>
 8007768:	2302      	movs	r3, #2
 800776a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800776e:	e07e      	b.n	800786e <UART_SetConfig+0x2fe>
 8007770:	2304      	movs	r3, #4
 8007772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007776:	e07a      	b.n	800786e <UART_SetConfig+0x2fe>
 8007778:	2308      	movs	r3, #8
 800777a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800777e:	e076      	b.n	800786e <UART_SetConfig+0x2fe>
 8007780:	2310      	movs	r3, #16
 8007782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007786:	e072      	b.n	800786e <UART_SetConfig+0x2fe>
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a35      	ldr	r2, [pc, #212]	; (8007864 <UART_SetConfig+0x2f4>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d12a      	bne.n	80077e8 <UART_SetConfig+0x278>
 8007792:	4b30      	ldr	r3, [pc, #192]	; (8007854 <UART_SetConfig+0x2e4>)
 8007794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800779c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077a0:	d01a      	beq.n	80077d8 <UART_SetConfig+0x268>
 80077a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077a6:	d81b      	bhi.n	80077e0 <UART_SetConfig+0x270>
 80077a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ac:	d00c      	beq.n	80077c8 <UART_SetConfig+0x258>
 80077ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077b2:	d815      	bhi.n	80077e0 <UART_SetConfig+0x270>
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <UART_SetConfig+0x250>
 80077b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077bc:	d008      	beq.n	80077d0 <UART_SetConfig+0x260>
 80077be:	e00f      	b.n	80077e0 <UART_SetConfig+0x270>
 80077c0:	2300      	movs	r3, #0
 80077c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077c6:	e052      	b.n	800786e <UART_SetConfig+0x2fe>
 80077c8:	2302      	movs	r3, #2
 80077ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077ce:	e04e      	b.n	800786e <UART_SetConfig+0x2fe>
 80077d0:	2304      	movs	r3, #4
 80077d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077d6:	e04a      	b.n	800786e <UART_SetConfig+0x2fe>
 80077d8:	2308      	movs	r3, #8
 80077da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077de:	e046      	b.n	800786e <UART_SetConfig+0x2fe>
 80077e0:	2310      	movs	r3, #16
 80077e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077e6:	e042      	b.n	800786e <UART_SetConfig+0x2fe>
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a17      	ldr	r2, [pc, #92]	; (800784c <UART_SetConfig+0x2dc>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d13a      	bne.n	8007868 <UART_SetConfig+0x2f8>
 80077f2:	4b18      	ldr	r3, [pc, #96]	; (8007854 <UART_SetConfig+0x2e4>)
 80077f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80077fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007800:	d01a      	beq.n	8007838 <UART_SetConfig+0x2c8>
 8007802:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007806:	d81b      	bhi.n	8007840 <UART_SetConfig+0x2d0>
 8007808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800780c:	d00c      	beq.n	8007828 <UART_SetConfig+0x2b8>
 800780e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007812:	d815      	bhi.n	8007840 <UART_SetConfig+0x2d0>
 8007814:	2b00      	cmp	r3, #0
 8007816:	d003      	beq.n	8007820 <UART_SetConfig+0x2b0>
 8007818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800781c:	d008      	beq.n	8007830 <UART_SetConfig+0x2c0>
 800781e:	e00f      	b.n	8007840 <UART_SetConfig+0x2d0>
 8007820:	2300      	movs	r3, #0
 8007822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007826:	e022      	b.n	800786e <UART_SetConfig+0x2fe>
 8007828:	2302      	movs	r3, #2
 800782a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800782e:	e01e      	b.n	800786e <UART_SetConfig+0x2fe>
 8007830:	2304      	movs	r3, #4
 8007832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007836:	e01a      	b.n	800786e <UART_SetConfig+0x2fe>
 8007838:	2308      	movs	r3, #8
 800783a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800783e:	e016      	b.n	800786e <UART_SetConfig+0x2fe>
 8007840:	2310      	movs	r3, #16
 8007842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007846:	e012      	b.n	800786e <UART_SetConfig+0x2fe>
 8007848:	cfff69f3 	.word	0xcfff69f3
 800784c:	40008000 	.word	0x40008000
 8007850:	40013800 	.word	0x40013800
 8007854:	40021000 	.word	0x40021000
 8007858:	40004400 	.word	0x40004400
 800785c:	40004800 	.word	0x40004800
 8007860:	40004c00 	.word	0x40004c00
 8007864:	40005000 	.word	0x40005000
 8007868:	2310      	movs	r3, #16
 800786a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4aae      	ldr	r2, [pc, #696]	; (8007b2c <UART_SetConfig+0x5bc>)
 8007874:	4293      	cmp	r3, r2
 8007876:	f040 8097 	bne.w	80079a8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800787a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800787e:	2b08      	cmp	r3, #8
 8007880:	d823      	bhi.n	80078ca <UART_SetConfig+0x35a>
 8007882:	a201      	add	r2, pc, #4	; (adr r2, 8007888 <UART_SetConfig+0x318>)
 8007884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007888:	080078ad 	.word	0x080078ad
 800788c:	080078cb 	.word	0x080078cb
 8007890:	080078b5 	.word	0x080078b5
 8007894:	080078cb 	.word	0x080078cb
 8007898:	080078bb 	.word	0x080078bb
 800789c:	080078cb 	.word	0x080078cb
 80078a0:	080078cb 	.word	0x080078cb
 80078a4:	080078cb 	.word	0x080078cb
 80078a8:	080078c3 	.word	0x080078c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078ac:	f7fc fc02 	bl	80040b4 <HAL_RCC_GetPCLK1Freq>
 80078b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078b2:	e010      	b.n	80078d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078b4:	4b9e      	ldr	r3, [pc, #632]	; (8007b30 <UART_SetConfig+0x5c0>)
 80078b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078b8:	e00d      	b.n	80078d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078ba:	f7fc fb8d 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 80078be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078c0:	e009      	b.n	80078d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078c8:	e005      	b.n	80078d6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80078d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 8130 	beq.w	8007b3e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e2:	4a94      	ldr	r2, [pc, #592]	; (8007b34 <UART_SetConfig+0x5c4>)
 80078e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078e8:	461a      	mov	r2, r3
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80078f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	4613      	mov	r3, r2
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	4413      	add	r3, r2
 80078fc:	69ba      	ldr	r2, [r7, #24]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d305      	bcc.n	800790e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007908:	69ba      	ldr	r2, [r7, #24]
 800790a:	429a      	cmp	r2, r3
 800790c:	d903      	bls.n	8007916 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007914:	e113      	b.n	8007b3e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	2200      	movs	r2, #0
 800791a:	60bb      	str	r3, [r7, #8]
 800791c:	60fa      	str	r2, [r7, #12]
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007922:	4a84      	ldr	r2, [pc, #528]	; (8007b34 <UART_SetConfig+0x5c4>)
 8007924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007928:	b29b      	uxth	r3, r3
 800792a:	2200      	movs	r2, #0
 800792c:	603b      	str	r3, [r7, #0]
 800792e:	607a      	str	r2, [r7, #4]
 8007930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007934:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007938:	f7f8 fcd2 	bl	80002e0 <__aeabi_uldivmod>
 800793c:	4602      	mov	r2, r0
 800793e:	460b      	mov	r3, r1
 8007940:	4610      	mov	r0, r2
 8007942:	4619      	mov	r1, r3
 8007944:	f04f 0200 	mov.w	r2, #0
 8007948:	f04f 0300 	mov.w	r3, #0
 800794c:	020b      	lsls	r3, r1, #8
 800794e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007952:	0202      	lsls	r2, r0, #8
 8007954:	6979      	ldr	r1, [r7, #20]
 8007956:	6849      	ldr	r1, [r1, #4]
 8007958:	0849      	lsrs	r1, r1, #1
 800795a:	2000      	movs	r0, #0
 800795c:	460c      	mov	r4, r1
 800795e:	4605      	mov	r5, r0
 8007960:	eb12 0804 	adds.w	r8, r2, r4
 8007964:	eb43 0905 	adc.w	r9, r3, r5
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	469a      	mov	sl, r3
 8007970:	4693      	mov	fp, r2
 8007972:	4652      	mov	r2, sl
 8007974:	465b      	mov	r3, fp
 8007976:	4640      	mov	r0, r8
 8007978:	4649      	mov	r1, r9
 800797a:	f7f8 fcb1 	bl	80002e0 <__aeabi_uldivmod>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4613      	mov	r3, r2
 8007984:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800798c:	d308      	bcc.n	80079a0 <UART_SetConfig+0x430>
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007994:	d204      	bcs.n	80079a0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6a3a      	ldr	r2, [r7, #32]
 800799c:	60da      	str	r2, [r3, #12]
 800799e:	e0ce      	b.n	8007b3e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80079a6:	e0ca      	b.n	8007b3e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b0:	d166      	bne.n	8007a80 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80079b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079b6:	2b08      	cmp	r3, #8
 80079b8:	d827      	bhi.n	8007a0a <UART_SetConfig+0x49a>
 80079ba:	a201      	add	r2, pc, #4	; (adr r2, 80079c0 <UART_SetConfig+0x450>)
 80079bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c0:	080079e5 	.word	0x080079e5
 80079c4:	080079ed 	.word	0x080079ed
 80079c8:	080079f5 	.word	0x080079f5
 80079cc:	08007a0b 	.word	0x08007a0b
 80079d0:	080079fb 	.word	0x080079fb
 80079d4:	08007a0b 	.word	0x08007a0b
 80079d8:	08007a0b 	.word	0x08007a0b
 80079dc:	08007a0b 	.word	0x08007a0b
 80079e0:	08007a03 	.word	0x08007a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079e4:	f7fc fb66 	bl	80040b4 <HAL_RCC_GetPCLK1Freq>
 80079e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80079ea:	e014      	b.n	8007a16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079ec:	f7fc fb78 	bl	80040e0 <HAL_RCC_GetPCLK2Freq>
 80079f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80079f2:	e010      	b.n	8007a16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079f4:	4b4e      	ldr	r3, [pc, #312]	; (8007b30 <UART_SetConfig+0x5c0>)
 80079f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80079f8:	e00d      	b.n	8007a16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079fa:	f7fc faed 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 80079fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a00:	e009      	b.n	8007a16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a08:	e005      	b.n	8007a16 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007a14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 8090 	beq.w	8007b3e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a22:	4a44      	ldr	r2, [pc, #272]	; (8007b34 <UART_SetConfig+0x5c4>)
 8007a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a30:	005a      	lsls	r2, r3, #1
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	085b      	lsrs	r3, r3, #1
 8007a38:	441a      	add	r2, r3
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	2b0f      	cmp	r3, #15
 8007a48:	d916      	bls.n	8007a78 <UART_SetConfig+0x508>
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a50:	d212      	bcs.n	8007a78 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	f023 030f 	bic.w	r3, r3, #15
 8007a5a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	085b      	lsrs	r3, r3, #1
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	8bfb      	ldrh	r3, [r7, #30]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	8bfa      	ldrh	r2, [r7, #30]
 8007a74:	60da      	str	r2, [r3, #12]
 8007a76:	e062      	b.n	8007b3e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007a7e:	e05e      	b.n	8007b3e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a84:	2b08      	cmp	r3, #8
 8007a86:	d828      	bhi.n	8007ada <UART_SetConfig+0x56a>
 8007a88:	a201      	add	r2, pc, #4	; (adr r2, 8007a90 <UART_SetConfig+0x520>)
 8007a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8e:	bf00      	nop
 8007a90:	08007ab5 	.word	0x08007ab5
 8007a94:	08007abd 	.word	0x08007abd
 8007a98:	08007ac5 	.word	0x08007ac5
 8007a9c:	08007adb 	.word	0x08007adb
 8007aa0:	08007acb 	.word	0x08007acb
 8007aa4:	08007adb 	.word	0x08007adb
 8007aa8:	08007adb 	.word	0x08007adb
 8007aac:	08007adb 	.word	0x08007adb
 8007ab0:	08007ad3 	.word	0x08007ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ab4:	f7fc fafe 	bl	80040b4 <HAL_RCC_GetPCLK1Freq>
 8007ab8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007aba:	e014      	b.n	8007ae6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007abc:	f7fc fb10 	bl	80040e0 <HAL_RCC_GetPCLK2Freq>
 8007ac0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ac2:	e010      	b.n	8007ae6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ac4:	4b1a      	ldr	r3, [pc, #104]	; (8007b30 <UART_SetConfig+0x5c0>)
 8007ac6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ac8:	e00d      	b.n	8007ae6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aca:	f7fc fa85 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8007ace:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ad0:	e009      	b.n	8007ae6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ad6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ad8:	e005      	b.n	8007ae6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ae4:	bf00      	nop
    }

    if (pclk != 0U)
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d028      	beq.n	8007b3e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	4a10      	ldr	r2, [pc, #64]	; (8007b34 <UART_SetConfig+0x5c4>)
 8007af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007af6:	461a      	mov	r2, r3
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	fbb3 f2f2 	udiv	r2, r3, r2
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	085b      	lsrs	r3, r3, #1
 8007b04:	441a      	add	r2, r3
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	2b0f      	cmp	r3, #15
 8007b14:	d910      	bls.n	8007b38 <UART_SetConfig+0x5c8>
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b1c:	d20c      	bcs.n	8007b38 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	60da      	str	r2, [r3, #12]
 8007b28:	e009      	b.n	8007b3e <UART_SetConfig+0x5ce>
 8007b2a:	bf00      	nop
 8007b2c:	40008000 	.word	0x40008000
 8007b30:	00f42400 	.word	0x00f42400
 8007b34:	0800a634 	.word	0x0800a634
      }
      else
      {
        ret = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2200      	movs	r2, #0
 8007b52:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	2200      	movs	r2, #0
 8007b58:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007b5a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3730      	adds	r7, #48	; 0x30
 8007b62:	46bd      	mov	sp, r7
 8007b64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007b68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00a      	beq.n	8007b92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00a      	beq.n	8007bb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb8:	f003 0304 	and.w	r3, r3, #4
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00a      	beq.n	8007bd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bda:	f003 0308 	and.w	r3, r3, #8
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfc:	f003 0310 	and.w	r3, r3, #16
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00a      	beq.n	8007c1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1e:	f003 0320 	and.w	r3, r3, #32
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00a      	beq.n	8007c3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d01a      	beq.n	8007c7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c66:	d10a      	bne.n	8007c7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00a      	beq.n	8007ca0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	605a      	str	r2, [r3, #4]
  }
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af02      	add	r7, sp, #8
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cbc:	f7f9 fd4e 	bl	800175c <HAL_GetTick>
 8007cc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0308 	and.w	r3, r3, #8
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	d10e      	bne.n	8007cee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f82f 	bl	8007d42 <UART_WaitOnFlagUntilTimeout>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e025      	b.n	8007d3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0304 	and.w	r3, r3, #4
 8007cf8:	2b04      	cmp	r3, #4
 8007cfa:	d10e      	bne.n	8007d1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f819 	bl	8007d42 <UART_WaitOnFlagUntilTimeout>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e00f      	b.n	8007d3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2220      	movs	r2, #32
 8007d26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b09c      	sub	sp, #112	; 0x70
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	60f8      	str	r0, [r7, #12]
 8007d4a:	60b9      	str	r1, [r7, #8]
 8007d4c:	603b      	str	r3, [r7, #0]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d52:	e0a9      	b.n	8007ea8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5a:	f000 80a5 	beq.w	8007ea8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d5e:	f7f9 fcfd 	bl	800175c <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d302      	bcc.n	8007d74 <UART_WaitOnFlagUntilTimeout+0x32>
 8007d6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d140      	bne.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d7c:	e853 3f00 	ldrex	r3, [r3]
 8007d80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d88:	667b      	str	r3, [r7, #100]	; 0x64
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d94:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1e6      	bne.n	8007d74 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	3308      	adds	r3, #8
 8007dac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	f023 0301 	bic.w	r3, r3, #1
 8007dbc:	663b      	str	r3, [r7, #96]	; 0x60
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3308      	adds	r3, #8
 8007dc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007dc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e5      	bne.n	8007da6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2220      	movs	r2, #32
 8007de6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e069      	b.n	8007eca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0304 	and.w	r3, r3, #4
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d051      	beq.n	8007ea8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	69db      	ldr	r3, [r3, #28]
 8007e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e12:	d149      	bne.n	8007ea8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e26:	e853 3f00 	ldrex	r3, [r3]
 8007e2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e44:	e841 2300 	strex	r3, r2, [r1]
 8007e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1e6      	bne.n	8007e1e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3308      	adds	r3, #8
 8007e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	e853 3f00 	ldrex	r3, [r3]
 8007e5e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	f023 0301 	bic.w	r3, r3, #1
 8007e66:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3308      	adds	r3, #8
 8007e6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e70:	623a      	str	r2, [r7, #32]
 8007e72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e74:	69f9      	ldr	r1, [r7, #28]
 8007e76:	6a3a      	ldr	r2, [r7, #32]
 8007e78:	e841 2300 	strex	r3, r2, [r1]
 8007e7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e5      	bne.n	8007e50 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2220      	movs	r2, #32
 8007e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2220      	movs	r2, #32
 8007e90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e010      	b.n	8007eca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	69da      	ldr	r2, [r3, #28]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	bf0c      	ite	eq
 8007eb8:	2301      	moveq	r3, #1
 8007eba:	2300      	movne	r3, #0
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	79fb      	ldrb	r3, [r7, #7]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	f43f af46 	beq.w	8007d54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3770      	adds	r7, #112	; 0x70
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
	...

08007ed4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b0a3      	sub	sp, #140	; 0x8c
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	88fa      	ldrh	r2, [r7, #6]
 8007eec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	88fa      	ldrh	r2, [r7, #6]
 8007ef4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f06:	d10e      	bne.n	8007f26 <UART_Start_Receive_IT+0x52>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d105      	bne.n	8007f1c <UART_Start_Receive_IT+0x48>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007f16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f1a:	e02d      	b.n	8007f78 <UART_Start_Receive_IT+0xa4>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	22ff      	movs	r2, #255	; 0xff
 8007f20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f24:	e028      	b.n	8007f78 <UART_Start_Receive_IT+0xa4>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10d      	bne.n	8007f4a <UART_Start_Receive_IT+0x76>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d104      	bne.n	8007f40 <UART_Start_Receive_IT+0x6c>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	22ff      	movs	r2, #255	; 0xff
 8007f3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f3e:	e01b      	b.n	8007f78 <UART_Start_Receive_IT+0xa4>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	227f      	movs	r2, #127	; 0x7f
 8007f44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f48:	e016      	b.n	8007f78 <UART_Start_Receive_IT+0xa4>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f52:	d10d      	bne.n	8007f70 <UART_Start_Receive_IT+0x9c>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d104      	bne.n	8007f66 <UART_Start_Receive_IT+0x92>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	227f      	movs	r2, #127	; 0x7f
 8007f60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f64:	e008      	b.n	8007f78 <UART_Start_Receive_IT+0xa4>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	223f      	movs	r2, #63	; 0x3f
 8007f6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f6e:	e003      	b.n	8007f78 <UART_Start_Receive_IT+0xa4>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2222      	movs	r2, #34	; 0x22
 8007f84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3308      	adds	r3, #8
 8007f8e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f92:	e853 3f00 	ldrex	r3, [r3]
 8007f96:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007f98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f9a:	f043 0301 	orr.w	r3, r3, #1
 8007f9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3308      	adds	r3, #8
 8007fa8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007fac:	673a      	str	r2, [r7, #112]	; 0x70
 8007fae:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007fb2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007fb4:	e841 2300 	strex	r3, r2, [r1]
 8007fb8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007fba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1e3      	bne.n	8007f88 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fc8:	d153      	bne.n	8008072 <UART_Start_Receive_IT+0x19e>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007fd0:	88fa      	ldrh	r2, [r7, #6]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d34d      	bcc.n	8008072 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fde:	d107      	bne.n	8007ff0 <UART_Start_Receive_IT+0x11c>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d103      	bne.n	8007ff0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4a4b      	ldr	r2, [pc, #300]	; (8008118 <UART_Start_Receive_IT+0x244>)
 8007fec:	671a      	str	r2, [r3, #112]	; 0x70
 8007fee:	e002      	b.n	8007ff6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4a4a      	ldr	r2, [pc, #296]	; (800811c <UART_Start_Receive_IT+0x248>)
 8007ff4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d01a      	beq.n	800803c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800801a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	461a      	mov	r2, r3
 8008024:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008028:	65fb      	str	r3, [r7, #92]	; 0x5c
 800802a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800802e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008030:	e841 2300 	strex	r3, r2, [r1]
 8008034:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e4      	bne.n	8008006 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3308      	adds	r3, #8
 8008042:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008046:	e853 3f00 	ldrex	r3, [r3]
 800804a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800804c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008052:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	3308      	adds	r3, #8
 800805a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800805c:	64ba      	str	r2, [r7, #72]	; 0x48
 800805e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008060:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008064:	e841 2300 	strex	r3, r2, [r1]
 8008068:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800806a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1e5      	bne.n	800803c <UART_Start_Receive_IT+0x168>
 8008070:	e04a      	b.n	8008108 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800807a:	d107      	bne.n	800808c <UART_Start_Receive_IT+0x1b8>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d103      	bne.n	800808c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4a26      	ldr	r2, [pc, #152]	; (8008120 <UART_Start_Receive_IT+0x24c>)
 8008088:	671a      	str	r2, [r3, #112]	; 0x70
 800808a:	e002      	b.n	8008092 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4a25      	ldr	r2, [pc, #148]	; (8008124 <UART_Start_Receive_IT+0x250>)
 8008090:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d019      	beq.n	80080d6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	e853 3f00 	ldrex	r3, [r3]
 80080ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80080b6:	677b      	str	r3, [r7, #116]	; 0x74
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	461a      	mov	r2, r3
 80080be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080c0:	637b      	str	r3, [r7, #52]	; 0x34
 80080c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080c8:	e841 2300 	strex	r3, r2, [r1]
 80080cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e6      	bne.n	80080a2 <UART_Start_Receive_IT+0x1ce>
 80080d4:	e018      	b.n	8008108 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	e853 3f00 	ldrex	r3, [r3]
 80080e2:	613b      	str	r3, [r7, #16]
   return(result);
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f043 0320 	orr.w	r3, r3, #32
 80080ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	461a      	mov	r2, r3
 80080f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080f4:	623b      	str	r3, [r7, #32]
 80080f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f8:	69f9      	ldr	r1, [r7, #28]
 80080fa:	6a3a      	ldr	r2, [r7, #32]
 80080fc:	e841 2300 	strex	r3, r2, [r1]
 8008100:	61bb      	str	r3, [r7, #24]
   return(result);
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1e6      	bne.n	80080d6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	378c      	adds	r7, #140	; 0x8c
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	08008831 	.word	0x08008831
 800811c:	08008539 	.word	0x08008539
 8008120:	080083d7 	.word	0x080083d7
 8008124:	08008277 	.word	0x08008277

08008128 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008128:	b480      	push	{r7}
 800812a:	b095      	sub	sp, #84	; 0x54
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008138:	e853 3f00 	ldrex	r3, [r3]
 800813c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008144:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	461a      	mov	r2, r3
 800814c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800814e:	643b      	str	r3, [r7, #64]	; 0x40
 8008150:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008152:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008154:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008156:	e841 2300 	strex	r3, r2, [r1]
 800815a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800815c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1e6      	bne.n	8008130 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3308      	adds	r3, #8
 8008168:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	e853 3f00 	ldrex	r3, [r3]
 8008170:	61fb      	str	r3, [r7, #28]
   return(result);
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008178:	f023 0301 	bic.w	r3, r3, #1
 800817c:	64bb      	str	r3, [r7, #72]	; 0x48
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3308      	adds	r3, #8
 8008184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008186:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008188:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800818c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e3      	bne.n	8008162 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d118      	bne.n	80081d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	e853 3f00 	ldrex	r3, [r3]
 80081ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f023 0310 	bic.w	r3, r3, #16
 80081b6:	647b      	str	r3, [r7, #68]	; 0x44
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	461a      	mov	r2, r3
 80081be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081c0:	61bb      	str	r3, [r7, #24]
 80081c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	6979      	ldr	r1, [r7, #20]
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	e841 2300 	strex	r3, r2, [r1]
 80081cc:	613b      	str	r3, [r7, #16]
   return(result);
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1e6      	bne.n	80081a2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2220      	movs	r2, #32
 80081d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80081e8:	bf00      	nop
 80081ea:	3754      	adds	r7, #84	; 0x54
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008200:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f7ff f996 	bl	8007544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008218:	bf00      	nop
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b088      	sub	sp, #32
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	e853 3f00 	ldrex	r3, [r3]
 8008234:	60bb      	str	r3, [r7, #8]
   return(result);
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800823c:	61fb      	str	r3, [r7, #28]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	461a      	mov	r2, r3
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	61bb      	str	r3, [r7, #24]
 8008248:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824a:	6979      	ldr	r1, [r7, #20]
 800824c:	69ba      	ldr	r2, [r7, #24]
 800824e:	e841 2300 	strex	r3, r2, [r1]
 8008252:	613b      	str	r3, [r7, #16]
   return(result);
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1e6      	bne.n	8008228 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2220      	movs	r2, #32
 800825e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7ff f961 	bl	8007530 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800826e:	bf00      	nop
 8008270:	3720      	adds	r7, #32
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b096      	sub	sp, #88	; 0x58
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008284:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800828e:	2b22      	cmp	r3, #34	; 0x22
 8008290:	f040 8095 	bne.w	80083be <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800829e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80082a2:	b2d9      	uxtb	r1, r3
 80082a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ae:	400a      	ands	r2, r1
 80082b0:	b2d2      	uxtb	r2, r2
 80082b2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b8:	1c5a      	adds	r2, r3, #1
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	3b01      	subs	r3, #1
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d178      	bne.n	80083ce <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e4:	e853 3f00 	ldrex	r3, [r3]
 80082e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082f0:	653b      	str	r3, [r7, #80]	; 0x50
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	461a      	mov	r2, r3
 80082f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082fa:	647b      	str	r3, [r7, #68]	; 0x44
 80082fc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008300:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008302:	e841 2300 	strex	r3, r2, [r1]
 8008306:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1e6      	bne.n	80082dc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3308      	adds	r3, #8
 8008314:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	623b      	str	r3, [r7, #32]
   return(result);
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	f023 0301 	bic.w	r3, r3, #1
 8008324:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	3308      	adds	r3, #8
 800832c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800832e:	633a      	str	r2, [r7, #48]	; 0x30
 8008330:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1e5      	bne.n	800830e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2220      	movs	r2, #32
 8008346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008354:	2b01      	cmp	r3, #1
 8008356:	d12e      	bne.n	80083b6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	e853 3f00 	ldrex	r3, [r3]
 800836a:	60fb      	str	r3, [r7, #12]
   return(result);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f023 0310 	bic.w	r3, r3, #16
 8008372:	64bb      	str	r3, [r7, #72]	; 0x48
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	461a      	mov	r2, r3
 800837a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800837c:	61fb      	str	r3, [r7, #28]
 800837e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008380:	69b9      	ldr	r1, [r7, #24]
 8008382:	69fa      	ldr	r2, [r7, #28]
 8008384:	e841 2300 	strex	r3, r2, [r1]
 8008388:	617b      	str	r3, [r7, #20]
   return(result);
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1e6      	bne.n	800835e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	f003 0310 	and.w	r3, r3, #16
 800839a:	2b10      	cmp	r3, #16
 800839c:	d103      	bne.n	80083a6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2210      	movs	r2, #16
 80083a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7ff f8d2 	bl	8007558 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083b4:	e00b      	b.n	80083ce <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7f8 fcb4 	bl	8000d24 <HAL_UART_RxCpltCallback>
}
 80083bc:	e007      	b.n	80083ce <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	699a      	ldr	r2, [r3, #24]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f042 0208 	orr.w	r2, r2, #8
 80083cc:	619a      	str	r2, [r3, #24]
}
 80083ce:	bf00      	nop
 80083d0:	3758      	adds	r7, #88	; 0x58
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b096      	sub	sp, #88	; 0x58
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80083e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ee:	2b22      	cmp	r3, #34	; 0x22
 80083f0:	f040 8095 	bne.w	800851e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008402:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008404:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008408:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800840c:	4013      	ands	r3, r2
 800840e:	b29a      	uxth	r2, r3
 8008410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008412:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008418:	1c9a      	adds	r2, r3, #2
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008424:	b29b      	uxth	r3, r3
 8008426:	3b01      	subs	r3, #1
 8008428:	b29a      	uxth	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008436:	b29b      	uxth	r3, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	d178      	bne.n	800852e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008444:	e853 3f00 	ldrex	r3, [r3]
 8008448:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800844a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	461a      	mov	r2, r3
 8008458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800845a:	643b      	str	r3, [r7, #64]	; 0x40
 800845c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008460:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008462:	e841 2300 	strex	r3, r2, [r1]
 8008466:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1e6      	bne.n	800843c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3308      	adds	r3, #8
 8008474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	e853 3f00 	ldrex	r3, [r3]
 800847c:	61fb      	str	r3, [r7, #28]
   return(result);
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	f023 0301 	bic.w	r3, r3, #1
 8008484:	64bb      	str	r3, [r7, #72]	; 0x48
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3308      	adds	r3, #8
 800848c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800848e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008490:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008496:	e841 2300 	strex	r3, r2, [r1]
 800849a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1e5      	bne.n	800846e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2220      	movs	r2, #32
 80084a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d12e      	bne.n	8008516 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	e853 3f00 	ldrex	r3, [r3]
 80084ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	f023 0310 	bic.w	r3, r3, #16
 80084d2:	647b      	str	r3, [r7, #68]	; 0x44
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	461a      	mov	r2, r3
 80084da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084dc:	61bb      	str	r3, [r7, #24]
 80084de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e0:	6979      	ldr	r1, [r7, #20]
 80084e2:	69ba      	ldr	r2, [r7, #24]
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	613b      	str	r3, [r7, #16]
   return(result);
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e6      	bne.n	80084be <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	f003 0310 	and.w	r3, r3, #16
 80084fa:	2b10      	cmp	r3, #16
 80084fc:	d103      	bne.n	8008506 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2210      	movs	r2, #16
 8008504:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800850c:	4619      	mov	r1, r3
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f7ff f822 	bl	8007558 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008514:	e00b      	b.n	800852e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7f8 fc04 	bl	8000d24 <HAL_UART_RxCpltCallback>
}
 800851c:	e007      	b.n	800852e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	699a      	ldr	r2, [r3, #24]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f042 0208 	orr.w	r2, r2, #8
 800852c:	619a      	str	r2, [r3, #24]
}
 800852e:	bf00      	nop
 8008530:	3758      	adds	r7, #88	; 0x58
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
	...

08008538 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b0a6      	sub	sp, #152	; 0x98
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008546:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	69db      	ldr	r3, [r3, #28]
 8008550:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800856e:	2b22      	cmp	r3, #34	; 0x22
 8008570:	f040 814f 	bne.w	8008812 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800857a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800857e:	e0f6      	b.n	800876e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008586:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800858a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800858e:	b2d9      	uxtb	r1, r3
 8008590:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008594:	b2da      	uxtb	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800859a:	400a      	ands	r2, r1
 800859c:	b2d2      	uxtb	r2, r2
 800859e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a4:	1c5a      	adds	r2, r3, #1
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	3b01      	subs	r3, #1
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	69db      	ldr	r3, [r3, #28]
 80085c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80085c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085ca:	f003 0307 	and.w	r3, r3, #7
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d053      	beq.n	800867a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d011      	beq.n	8008602 <UART_RxISR_8BIT_FIFOEN+0xca>
 80085de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00b      	beq.n	8008602 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2201      	movs	r2, #1
 80085f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085f8:	f043 0201 	orr.w	r2, r3, #1
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008602:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008606:	f003 0302 	and.w	r3, r3, #2
 800860a:	2b00      	cmp	r3, #0
 800860c:	d011      	beq.n	8008632 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800860e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00b      	beq.n	8008632 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2202      	movs	r2, #2
 8008620:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008628:	f043 0204 	orr.w	r2, r3, #4
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008632:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008636:	f003 0304 	and.w	r3, r3, #4
 800863a:	2b00      	cmp	r3, #0
 800863c:	d011      	beq.n	8008662 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800863e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00b      	beq.n	8008662 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2204      	movs	r2, #4
 8008650:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008658:	f043 0202 	orr.w	r2, r3, #2
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008668:	2b00      	cmp	r3, #0
 800866a:	d006      	beq.n	800867a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7fe ff69 	bl	8007544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008680:	b29b      	uxth	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d173      	bne.n	800876e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800868e:	e853 3f00 	ldrex	r3, [r3]
 8008692:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800869a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80086a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80086aa:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ac:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80086ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086b0:	e841 2300 	strex	r3, r2, [r1]
 80086b4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80086b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1e4      	bne.n	8008686 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	3308      	adds	r3, #8
 80086c2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086c6:	e853 3f00 	ldrex	r3, [r3]
 80086ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80086cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086d2:	f023 0301 	bic.w	r3, r3, #1
 80086d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	3308      	adds	r3, #8
 80086de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80086e0:	657a      	str	r2, [r7, #84]	; 0x54
 80086e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086e8:	e841 2300 	strex	r3, r2, [r1]
 80086ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1e3      	bne.n	80086bc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2220      	movs	r2, #32
 80086f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008706:	2b01      	cmp	r3, #1
 8008708:	d12e      	bne.n	8008768 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	f023 0310 	bic.w	r3, r3, #16
 8008724:	67bb      	str	r3, [r7, #120]	; 0x78
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800872e:	643b      	str	r3, [r7, #64]	; 0x40
 8008730:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008734:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008736:	e841 2300 	strex	r3, r2, [r1]
 800873a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800873c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e6      	bne.n	8008710 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	69db      	ldr	r3, [r3, #28]
 8008748:	f003 0310 	and.w	r3, r3, #16
 800874c:	2b10      	cmp	r3, #16
 800874e:	d103      	bne.n	8008758 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2210      	movs	r2, #16
 8008756:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7fe fef9 	bl	8007558 <HAL_UARTEx_RxEventCallback>
 8008766:	e002      	b.n	800876e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7f8 fadb 	bl	8000d24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800876e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008772:	2b00      	cmp	r3, #0
 8008774:	d006      	beq.n	8008784 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008776:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b00      	cmp	r3, #0
 8008780:	f47f aefe 	bne.w	8008580 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800878a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800878e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008792:	2b00      	cmp	r3, #0
 8008794:	d045      	beq.n	8008822 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800879c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d23e      	bcs.n	8008822 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3308      	adds	r3, #8
 80087aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087ba:	673b      	str	r3, [r7, #112]	; 0x70
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3308      	adds	r3, #8
 80087c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80087c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087cc:	e841 2300 	strex	r3, r2, [r1]
 80087d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e5      	bne.n	80087a4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a14      	ldr	r2, [pc, #80]	; (800882c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80087dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	e853 3f00 	ldrex	r3, [r3]
 80087ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	f043 0320 	orr.w	r3, r3, #32
 80087f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	461a      	mov	r2, r3
 80087fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fc:	61bb      	str	r3, [r7, #24]
 80087fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008800:	6979      	ldr	r1, [r7, #20]
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	e841 2300 	strex	r3, r2, [r1]
 8008808:	613b      	str	r3, [r7, #16]
   return(result);
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e6      	bne.n	80087de <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008810:	e007      	b.n	8008822 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	699a      	ldr	r2, [r3, #24]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f042 0208 	orr.w	r2, r2, #8
 8008820:	619a      	str	r2, [r3, #24]
}
 8008822:	bf00      	nop
 8008824:	3798      	adds	r7, #152	; 0x98
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	08008277 	.word	0x08008277

08008830 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b0a8      	sub	sp, #160	; 0xa0
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800883e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	69db      	ldr	r3, [r3, #28]
 8008848:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008866:	2b22      	cmp	r3, #34	; 0x22
 8008868:	f040 8153 	bne.w	8008b12 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008872:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008876:	e0fa      	b.n	8008a6e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008886:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800888a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800888e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008892:	4013      	ands	r3, r2
 8008894:	b29a      	uxth	r2, r3
 8008896:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800889a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a0:	1c9a      	adds	r2, r3, #2
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	3b01      	subs	r3, #1
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80088c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088c6:	f003 0307 	and.w	r3, r3, #7
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d053      	beq.n	8008976 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80088ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d011      	beq.n	80088fe <UART_RxISR_16BIT_FIFOEN+0xce>
 80088da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00b      	beq.n	80088fe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2201      	movs	r2, #1
 80088ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088f4:	f043 0201 	orr.w	r2, r3, #1
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008902:	f003 0302 	and.w	r3, r3, #2
 8008906:	2b00      	cmp	r3, #0
 8008908:	d011      	beq.n	800892e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800890a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00b      	beq.n	800892e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2202      	movs	r2, #2
 800891c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008924:	f043 0204 	orr.w	r2, r3, #4
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800892e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008932:	f003 0304 	and.w	r3, r3, #4
 8008936:	2b00      	cmp	r3, #0
 8008938:	d011      	beq.n	800895e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800893a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00b      	beq.n	800895e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2204      	movs	r2, #4
 800894c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008954:	f043 0202 	orr.w	r2, r3, #2
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008964:	2b00      	cmp	r3, #0
 8008966:	d006      	beq.n	8008976 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7fe fdeb 	bl	8007544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800897c:	b29b      	uxth	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d175      	bne.n	8008a6e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008988:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800898a:	e853 3f00 	ldrex	r3, [r3]
 800898e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008996:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	461a      	mov	r2, r3
 80089a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089a6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80089aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80089ac:	e841 2300 	strex	r3, r2, [r1]
 80089b0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80089b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1e4      	bne.n	8008982 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3308      	adds	r3, #8
 80089be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089c2:	e853 3f00 	ldrex	r3, [r3]
 80089c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089ce:	f023 0301 	bic.w	r3, r3, #1
 80089d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3308      	adds	r3, #8
 80089dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80089e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80089e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089e8:	e841 2300 	strex	r3, r2, [r1]
 80089ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1e1      	bne.n	80089b8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2220      	movs	r2, #32
 80089f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d12e      	bne.n	8008a68 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a18:	e853 3f00 	ldrex	r3, [r3]
 8008a1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a20:	f023 0310 	bic.w	r3, r3, #16
 8008a24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8008a30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a36:	e841 2300 	strex	r3, r2, [r1]
 8008a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1e6      	bne.n	8008a10 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	69db      	ldr	r3, [r3, #28]
 8008a48:	f003 0310 	and.w	r3, r3, #16
 8008a4c:	2b10      	cmp	r3, #16
 8008a4e:	d103      	bne.n	8008a58 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2210      	movs	r2, #16
 8008a56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a5e:	4619      	mov	r1, r3
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7fe fd79 	bl	8007558 <HAL_UARTEx_RxEventCallback>
 8008a66:	e002      	b.n	8008a6e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7f8 f95b 	bl	8000d24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a6e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d006      	beq.n	8008a84 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008a76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a7a:	f003 0320 	and.w	r3, r3, #32
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f47f aefa 	bne.w	8008878 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a8a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008a8e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d045      	beq.n	8008b22 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a9c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d23e      	bcs.n	8008b22 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	e853 3f00 	ldrex	r3, [r3]
 8008ab2:	623b      	str	r3, [r7, #32]
   return(result);
 8008ab4:	6a3b      	ldr	r3, [r7, #32]
 8008ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008aba:	677b      	str	r3, [r7, #116]	; 0x74
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3308      	adds	r3, #8
 8008ac2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008ac4:	633a      	str	r2, [r7, #48]	; 0x30
 8008ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008acc:	e841 2300 	strex	r3, r2, [r1]
 8008ad0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e5      	bne.n	8008aa4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a14      	ldr	r2, [pc, #80]	; (8008b2c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008adc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	e853 3f00 	ldrex	r3, [r3]
 8008aea:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f043 0320 	orr.w	r3, r3, #32
 8008af2:	673b      	str	r3, [r7, #112]	; 0x70
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008afc:	61fb      	str	r3, [r7, #28]
 8008afe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b00:	69b9      	ldr	r1, [r7, #24]
 8008b02:	69fa      	ldr	r2, [r7, #28]
 8008b04:	e841 2300 	strex	r3, r2, [r1]
 8008b08:	617b      	str	r3, [r7, #20]
   return(result);
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1e6      	bne.n	8008ade <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b10:	e007      	b.n	8008b22 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	699a      	ldr	r2, [r3, #24]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f042 0208 	orr.w	r2, r2, #8
 8008b20:	619a      	str	r2, [r3, #24]
}
 8008b22:	bf00      	nop
 8008b24:	37a0      	adds	r7, #160	; 0xa0
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	080083d7 	.word	0x080083d7

08008b30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008b38:	bf00      	nop
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d101      	bne.n	8008b82 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b7e:	2302      	movs	r3, #2
 8008b80:	e027      	b.n	8008bd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2224      	movs	r2, #36	; 0x24
 8008b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f022 0201 	bic.w	r2, r2, #1
 8008ba8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008bb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2220      	movs	r2, #32
 8008bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr

08008bde <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
 8008be6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d101      	bne.n	8008bf6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	e02d      	b.n	8008c52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2224      	movs	r2, #36	; 0x24
 8008c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f022 0201 	bic.w	r2, r2, #1
 8008c1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	683a      	ldr	r2, [r7, #0]
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f850 	bl	8008cd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2220      	movs	r2, #32
 8008c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b084      	sub	sp, #16
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d101      	bne.n	8008c72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c6e:	2302      	movs	r3, #2
 8008c70:	e02d      	b.n	8008cce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2224      	movs	r2, #36	; 0x24
 8008c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f022 0201 	bic.w	r2, r2, #1
 8008c98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	430a      	orrs	r2, r1
 8008cac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f812 	bl	8008cd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
	...

08008cd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d108      	bne.n	8008cfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008cf8:	e031      	b.n	8008d5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008cfa:	2308      	movs	r3, #8
 8008cfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008cfe:	2308      	movs	r3, #8
 8008d00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	0e5b      	lsrs	r3, r3, #25
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	f003 0307 	and.w	r3, r3, #7
 8008d10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	0f5b      	lsrs	r3, r3, #29
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	f003 0307 	and.w	r3, r3, #7
 8008d20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	7b3a      	ldrb	r2, [r7, #12]
 8008d26:	4911      	ldr	r1, [pc, #68]	; (8008d6c <UARTEx_SetNbDataToProcess+0x94>)
 8008d28:	5c8a      	ldrb	r2, [r1, r2]
 8008d2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d2e:	7b3a      	ldrb	r2, [r7, #12]
 8008d30:	490f      	ldr	r1, [pc, #60]	; (8008d70 <UARTEx_SetNbDataToProcess+0x98>)
 8008d32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d34:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	7b7a      	ldrb	r2, [r7, #13]
 8008d44:	4909      	ldr	r1, [pc, #36]	; (8008d6c <UARTEx_SetNbDataToProcess+0x94>)
 8008d46:	5c8a      	ldrb	r2, [r1, r2]
 8008d48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d4c:	7b7a      	ldrb	r2, [r7, #13]
 8008d4e:	4908      	ldr	r1, [pc, #32]	; (8008d70 <UARTEx_SetNbDataToProcess+0x98>)
 8008d50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d52:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d5e:	bf00      	nop
 8008d60:	3714      	adds	r7, #20
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	0800a64c 	.word	0x0800a64c
 8008d70:	0800a654 	.word	0x0800a654

08008d74 <atoi>:
 8008d74:	220a      	movs	r2, #10
 8008d76:	2100      	movs	r1, #0
 8008d78:	f000 b930 	b.w	8008fdc <strtol>

08008d7c <__errno>:
 8008d7c:	4b01      	ldr	r3, [pc, #4]	; (8008d84 <__errno+0x8>)
 8008d7e:	6818      	ldr	r0, [r3, #0]
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	20000010 	.word	0x20000010

08008d88 <__libc_init_array>:
 8008d88:	b570      	push	{r4, r5, r6, lr}
 8008d8a:	4d0d      	ldr	r5, [pc, #52]	; (8008dc0 <__libc_init_array+0x38>)
 8008d8c:	4c0d      	ldr	r4, [pc, #52]	; (8008dc4 <__libc_init_array+0x3c>)
 8008d8e:	1b64      	subs	r4, r4, r5
 8008d90:	10a4      	asrs	r4, r4, #2
 8008d92:	2600      	movs	r6, #0
 8008d94:	42a6      	cmp	r6, r4
 8008d96:	d109      	bne.n	8008dac <__libc_init_array+0x24>
 8008d98:	4d0b      	ldr	r5, [pc, #44]	; (8008dc8 <__libc_init_array+0x40>)
 8008d9a:	4c0c      	ldr	r4, [pc, #48]	; (8008dcc <__libc_init_array+0x44>)
 8008d9c:	f001 fade 	bl	800a35c <_init>
 8008da0:	1b64      	subs	r4, r4, r5
 8008da2:	10a4      	asrs	r4, r4, #2
 8008da4:	2600      	movs	r6, #0
 8008da6:	42a6      	cmp	r6, r4
 8008da8:	d105      	bne.n	8008db6 <__libc_init_array+0x2e>
 8008daa:	bd70      	pop	{r4, r5, r6, pc}
 8008dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8008db0:	4798      	blx	r3
 8008db2:	3601      	adds	r6, #1
 8008db4:	e7ee      	b.n	8008d94 <__libc_init_array+0xc>
 8008db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dba:	4798      	blx	r3
 8008dbc:	3601      	adds	r6, #1
 8008dbe:	e7f2      	b.n	8008da6 <__libc_init_array+0x1e>
 8008dc0:	0800a8ac 	.word	0x0800a8ac
 8008dc4:	0800a8ac 	.word	0x0800a8ac
 8008dc8:	0800a8ac 	.word	0x0800a8ac
 8008dcc:	0800a8b0 	.word	0x0800a8b0

08008dd0 <memset>:
 8008dd0:	4402      	add	r2, r0
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d100      	bne.n	8008dda <memset+0xa>
 8008dd8:	4770      	bx	lr
 8008dda:	f803 1b01 	strb.w	r1, [r3], #1
 8008dde:	e7f9      	b.n	8008dd4 <memset+0x4>

08008de0 <siprintf>:
 8008de0:	b40e      	push	{r1, r2, r3}
 8008de2:	b500      	push	{lr}
 8008de4:	b09c      	sub	sp, #112	; 0x70
 8008de6:	ab1d      	add	r3, sp, #116	; 0x74
 8008de8:	9002      	str	r0, [sp, #8]
 8008dea:	9006      	str	r0, [sp, #24]
 8008dec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008df0:	4809      	ldr	r0, [pc, #36]	; (8008e18 <siprintf+0x38>)
 8008df2:	9107      	str	r1, [sp, #28]
 8008df4:	9104      	str	r1, [sp, #16]
 8008df6:	4909      	ldr	r1, [pc, #36]	; (8008e1c <siprintf+0x3c>)
 8008df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dfc:	9105      	str	r1, [sp, #20]
 8008dfe:	6800      	ldr	r0, [r0, #0]
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	a902      	add	r1, sp, #8
 8008e04:	f000 fa68 	bl	80092d8 <_svfiprintf_r>
 8008e08:	9b02      	ldr	r3, [sp, #8]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	701a      	strb	r2, [r3, #0]
 8008e0e:	b01c      	add	sp, #112	; 0x70
 8008e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e14:	b003      	add	sp, #12
 8008e16:	4770      	bx	lr
 8008e18:	20000010 	.word	0x20000010
 8008e1c:	ffff0208 	.word	0xffff0208

08008e20 <strtok>:
 8008e20:	4b16      	ldr	r3, [pc, #88]	; (8008e7c <strtok+0x5c>)
 8008e22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e24:	681e      	ldr	r6, [r3, #0]
 8008e26:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8008e28:	4605      	mov	r5, r0
 8008e2a:	b9fc      	cbnz	r4, 8008e6c <strtok+0x4c>
 8008e2c:	2050      	movs	r0, #80	; 0x50
 8008e2e:	9101      	str	r1, [sp, #4]
 8008e30:	f000 f90e 	bl	8009050 <malloc>
 8008e34:	9901      	ldr	r1, [sp, #4]
 8008e36:	65b0      	str	r0, [r6, #88]	; 0x58
 8008e38:	4602      	mov	r2, r0
 8008e3a:	b920      	cbnz	r0, 8008e46 <strtok+0x26>
 8008e3c:	4b10      	ldr	r3, [pc, #64]	; (8008e80 <strtok+0x60>)
 8008e3e:	4811      	ldr	r0, [pc, #68]	; (8008e84 <strtok+0x64>)
 8008e40:	2157      	movs	r1, #87	; 0x57
 8008e42:	f000 f8d5 	bl	8008ff0 <__assert_func>
 8008e46:	e9c0 4400 	strd	r4, r4, [r0]
 8008e4a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008e4e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008e52:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008e56:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008e5a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008e5e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008e62:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008e66:	6184      	str	r4, [r0, #24]
 8008e68:	7704      	strb	r4, [r0, #28]
 8008e6a:	6244      	str	r4, [r0, #36]	; 0x24
 8008e6c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8008e6e:	2301      	movs	r3, #1
 8008e70:	4628      	mov	r0, r5
 8008e72:	b002      	add	sp, #8
 8008e74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e78:	f000 b806 	b.w	8008e88 <__strtok_r>
 8008e7c:	20000010 	.word	0x20000010
 8008e80:	0800a660 	.word	0x0800a660
 8008e84:	0800a677 	.word	0x0800a677

08008e88 <__strtok_r>:
 8008e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e8a:	b908      	cbnz	r0, 8008e90 <__strtok_r+0x8>
 8008e8c:	6810      	ldr	r0, [r2, #0]
 8008e8e:	b188      	cbz	r0, 8008eb4 <__strtok_r+0x2c>
 8008e90:	4604      	mov	r4, r0
 8008e92:	4620      	mov	r0, r4
 8008e94:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008e98:	460f      	mov	r7, r1
 8008e9a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008e9e:	b91e      	cbnz	r6, 8008ea8 <__strtok_r+0x20>
 8008ea0:	b965      	cbnz	r5, 8008ebc <__strtok_r+0x34>
 8008ea2:	6015      	str	r5, [r2, #0]
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	e005      	b.n	8008eb4 <__strtok_r+0x2c>
 8008ea8:	42b5      	cmp	r5, r6
 8008eaa:	d1f6      	bne.n	8008e9a <__strtok_r+0x12>
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1f0      	bne.n	8008e92 <__strtok_r+0xa>
 8008eb0:	6014      	str	r4, [r2, #0]
 8008eb2:	7003      	strb	r3, [r0, #0]
 8008eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eb6:	461c      	mov	r4, r3
 8008eb8:	e00c      	b.n	8008ed4 <__strtok_r+0x4c>
 8008eba:	b915      	cbnz	r5, 8008ec2 <__strtok_r+0x3a>
 8008ebc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ec0:	460e      	mov	r6, r1
 8008ec2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008ec6:	42ab      	cmp	r3, r5
 8008ec8:	d1f7      	bne.n	8008eba <__strtok_r+0x32>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d0f3      	beq.n	8008eb6 <__strtok_r+0x2e>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008ed4:	6014      	str	r4, [r2, #0]
 8008ed6:	e7ed      	b.n	8008eb4 <__strtok_r+0x2c>

08008ed8 <_strtol_l.constprop.0>:
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ede:	d001      	beq.n	8008ee4 <_strtol_l.constprop.0+0xc>
 8008ee0:	2b24      	cmp	r3, #36	; 0x24
 8008ee2:	d906      	bls.n	8008ef2 <_strtol_l.constprop.0+0x1a>
 8008ee4:	f7ff ff4a 	bl	8008d7c <__errno>
 8008ee8:	2316      	movs	r3, #22
 8008eea:	6003      	str	r3, [r0, #0]
 8008eec:	2000      	movs	r0, #0
 8008eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008fd8 <_strtol_l.constprop.0+0x100>
 8008ef6:	460d      	mov	r5, r1
 8008ef8:	462e      	mov	r6, r5
 8008efa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008efe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008f02:	f017 0708 	ands.w	r7, r7, #8
 8008f06:	d1f7      	bne.n	8008ef8 <_strtol_l.constprop.0+0x20>
 8008f08:	2c2d      	cmp	r4, #45	; 0x2d
 8008f0a:	d132      	bne.n	8008f72 <_strtol_l.constprop.0+0x9a>
 8008f0c:	782c      	ldrb	r4, [r5, #0]
 8008f0e:	2701      	movs	r7, #1
 8008f10:	1cb5      	adds	r5, r6, #2
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d05b      	beq.n	8008fce <_strtol_l.constprop.0+0xf6>
 8008f16:	2b10      	cmp	r3, #16
 8008f18:	d109      	bne.n	8008f2e <_strtol_l.constprop.0+0x56>
 8008f1a:	2c30      	cmp	r4, #48	; 0x30
 8008f1c:	d107      	bne.n	8008f2e <_strtol_l.constprop.0+0x56>
 8008f1e:	782c      	ldrb	r4, [r5, #0]
 8008f20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008f24:	2c58      	cmp	r4, #88	; 0x58
 8008f26:	d14d      	bne.n	8008fc4 <_strtol_l.constprop.0+0xec>
 8008f28:	786c      	ldrb	r4, [r5, #1]
 8008f2a:	2310      	movs	r3, #16
 8008f2c:	3502      	adds	r5, #2
 8008f2e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008f32:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f36:	f04f 0c00 	mov.w	ip, #0
 8008f3a:	fbb8 f9f3 	udiv	r9, r8, r3
 8008f3e:	4666      	mov	r6, ip
 8008f40:	fb03 8a19 	mls	sl, r3, r9, r8
 8008f44:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008f48:	f1be 0f09 	cmp.w	lr, #9
 8008f4c:	d816      	bhi.n	8008f7c <_strtol_l.constprop.0+0xa4>
 8008f4e:	4674      	mov	r4, lr
 8008f50:	42a3      	cmp	r3, r4
 8008f52:	dd24      	ble.n	8008f9e <_strtol_l.constprop.0+0xc6>
 8008f54:	f1bc 0f00 	cmp.w	ip, #0
 8008f58:	db1e      	blt.n	8008f98 <_strtol_l.constprop.0+0xc0>
 8008f5a:	45b1      	cmp	r9, r6
 8008f5c:	d31c      	bcc.n	8008f98 <_strtol_l.constprop.0+0xc0>
 8008f5e:	d101      	bne.n	8008f64 <_strtol_l.constprop.0+0x8c>
 8008f60:	45a2      	cmp	sl, r4
 8008f62:	db19      	blt.n	8008f98 <_strtol_l.constprop.0+0xc0>
 8008f64:	fb06 4603 	mla	r6, r6, r3, r4
 8008f68:	f04f 0c01 	mov.w	ip, #1
 8008f6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f70:	e7e8      	b.n	8008f44 <_strtol_l.constprop.0+0x6c>
 8008f72:	2c2b      	cmp	r4, #43	; 0x2b
 8008f74:	bf04      	itt	eq
 8008f76:	782c      	ldrbeq	r4, [r5, #0]
 8008f78:	1cb5      	addeq	r5, r6, #2
 8008f7a:	e7ca      	b.n	8008f12 <_strtol_l.constprop.0+0x3a>
 8008f7c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008f80:	f1be 0f19 	cmp.w	lr, #25
 8008f84:	d801      	bhi.n	8008f8a <_strtol_l.constprop.0+0xb2>
 8008f86:	3c37      	subs	r4, #55	; 0x37
 8008f88:	e7e2      	b.n	8008f50 <_strtol_l.constprop.0+0x78>
 8008f8a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008f8e:	f1be 0f19 	cmp.w	lr, #25
 8008f92:	d804      	bhi.n	8008f9e <_strtol_l.constprop.0+0xc6>
 8008f94:	3c57      	subs	r4, #87	; 0x57
 8008f96:	e7db      	b.n	8008f50 <_strtol_l.constprop.0+0x78>
 8008f98:	f04f 3cff 	mov.w	ip, #4294967295
 8008f9c:	e7e6      	b.n	8008f6c <_strtol_l.constprop.0+0x94>
 8008f9e:	f1bc 0f00 	cmp.w	ip, #0
 8008fa2:	da05      	bge.n	8008fb0 <_strtol_l.constprop.0+0xd8>
 8008fa4:	2322      	movs	r3, #34	; 0x22
 8008fa6:	6003      	str	r3, [r0, #0]
 8008fa8:	4646      	mov	r6, r8
 8008faa:	b942      	cbnz	r2, 8008fbe <_strtol_l.constprop.0+0xe6>
 8008fac:	4630      	mov	r0, r6
 8008fae:	e79e      	b.n	8008eee <_strtol_l.constprop.0+0x16>
 8008fb0:	b107      	cbz	r7, 8008fb4 <_strtol_l.constprop.0+0xdc>
 8008fb2:	4276      	negs	r6, r6
 8008fb4:	2a00      	cmp	r2, #0
 8008fb6:	d0f9      	beq.n	8008fac <_strtol_l.constprop.0+0xd4>
 8008fb8:	f1bc 0f00 	cmp.w	ip, #0
 8008fbc:	d000      	beq.n	8008fc0 <_strtol_l.constprop.0+0xe8>
 8008fbe:	1e69      	subs	r1, r5, #1
 8008fc0:	6011      	str	r1, [r2, #0]
 8008fc2:	e7f3      	b.n	8008fac <_strtol_l.constprop.0+0xd4>
 8008fc4:	2430      	movs	r4, #48	; 0x30
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1b1      	bne.n	8008f2e <_strtol_l.constprop.0+0x56>
 8008fca:	2308      	movs	r3, #8
 8008fcc:	e7af      	b.n	8008f2e <_strtol_l.constprop.0+0x56>
 8008fce:	2c30      	cmp	r4, #48	; 0x30
 8008fd0:	d0a5      	beq.n	8008f1e <_strtol_l.constprop.0+0x46>
 8008fd2:	230a      	movs	r3, #10
 8008fd4:	e7ab      	b.n	8008f2e <_strtol_l.constprop.0+0x56>
 8008fd6:	bf00      	nop
 8008fd8:	0800a711 	.word	0x0800a711

08008fdc <strtol>:
 8008fdc:	4613      	mov	r3, r2
 8008fde:	460a      	mov	r2, r1
 8008fe0:	4601      	mov	r1, r0
 8008fe2:	4802      	ldr	r0, [pc, #8]	; (8008fec <strtol+0x10>)
 8008fe4:	6800      	ldr	r0, [r0, #0]
 8008fe6:	f7ff bf77 	b.w	8008ed8 <_strtol_l.constprop.0>
 8008fea:	bf00      	nop
 8008fec:	20000010 	.word	0x20000010

08008ff0 <__assert_func>:
 8008ff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ff2:	4614      	mov	r4, r2
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	4b09      	ldr	r3, [pc, #36]	; (800901c <__assert_func+0x2c>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4605      	mov	r5, r0
 8008ffc:	68d8      	ldr	r0, [r3, #12]
 8008ffe:	b14c      	cbz	r4, 8009014 <__assert_func+0x24>
 8009000:	4b07      	ldr	r3, [pc, #28]	; (8009020 <__assert_func+0x30>)
 8009002:	9100      	str	r1, [sp, #0]
 8009004:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009008:	4906      	ldr	r1, [pc, #24]	; (8009024 <__assert_func+0x34>)
 800900a:	462b      	mov	r3, r5
 800900c:	f000 f80e 	bl	800902c <fiprintf>
 8009010:	f000 fe20 	bl	8009c54 <abort>
 8009014:	4b04      	ldr	r3, [pc, #16]	; (8009028 <__assert_func+0x38>)
 8009016:	461c      	mov	r4, r3
 8009018:	e7f3      	b.n	8009002 <__assert_func+0x12>
 800901a:	bf00      	nop
 800901c:	20000010 	.word	0x20000010
 8009020:	0800a6d4 	.word	0x0800a6d4
 8009024:	0800a6e1 	.word	0x0800a6e1
 8009028:	0800a70f 	.word	0x0800a70f

0800902c <fiprintf>:
 800902c:	b40e      	push	{r1, r2, r3}
 800902e:	b503      	push	{r0, r1, lr}
 8009030:	4601      	mov	r1, r0
 8009032:	ab03      	add	r3, sp, #12
 8009034:	4805      	ldr	r0, [pc, #20]	; (800904c <fiprintf+0x20>)
 8009036:	f853 2b04 	ldr.w	r2, [r3], #4
 800903a:	6800      	ldr	r0, [r0, #0]
 800903c:	9301      	str	r3, [sp, #4]
 800903e:	f000 fa75 	bl	800952c <_vfiprintf_r>
 8009042:	b002      	add	sp, #8
 8009044:	f85d eb04 	ldr.w	lr, [sp], #4
 8009048:	b003      	add	sp, #12
 800904a:	4770      	bx	lr
 800904c:	20000010 	.word	0x20000010

08009050 <malloc>:
 8009050:	4b02      	ldr	r3, [pc, #8]	; (800905c <malloc+0xc>)
 8009052:	4601      	mov	r1, r0
 8009054:	6818      	ldr	r0, [r3, #0]
 8009056:	f000 b86f 	b.w	8009138 <_malloc_r>
 800905a:	bf00      	nop
 800905c:	20000010 	.word	0x20000010

08009060 <_free_r>:
 8009060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009062:	2900      	cmp	r1, #0
 8009064:	d044      	beq.n	80090f0 <_free_r+0x90>
 8009066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800906a:	9001      	str	r0, [sp, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	f1a1 0404 	sub.w	r4, r1, #4
 8009072:	bfb8      	it	lt
 8009074:	18e4      	addlt	r4, r4, r3
 8009076:	f001 f83d 	bl	800a0f4 <__malloc_lock>
 800907a:	4a1e      	ldr	r2, [pc, #120]	; (80090f4 <_free_r+0x94>)
 800907c:	9801      	ldr	r0, [sp, #4]
 800907e:	6813      	ldr	r3, [r2, #0]
 8009080:	b933      	cbnz	r3, 8009090 <_free_r+0x30>
 8009082:	6063      	str	r3, [r4, #4]
 8009084:	6014      	str	r4, [r2, #0]
 8009086:	b003      	add	sp, #12
 8009088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800908c:	f001 b838 	b.w	800a100 <__malloc_unlock>
 8009090:	42a3      	cmp	r3, r4
 8009092:	d908      	bls.n	80090a6 <_free_r+0x46>
 8009094:	6825      	ldr	r5, [r4, #0]
 8009096:	1961      	adds	r1, r4, r5
 8009098:	428b      	cmp	r3, r1
 800909a:	bf01      	itttt	eq
 800909c:	6819      	ldreq	r1, [r3, #0]
 800909e:	685b      	ldreq	r3, [r3, #4]
 80090a0:	1949      	addeq	r1, r1, r5
 80090a2:	6021      	streq	r1, [r4, #0]
 80090a4:	e7ed      	b.n	8009082 <_free_r+0x22>
 80090a6:	461a      	mov	r2, r3
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	b10b      	cbz	r3, 80090b0 <_free_r+0x50>
 80090ac:	42a3      	cmp	r3, r4
 80090ae:	d9fa      	bls.n	80090a6 <_free_r+0x46>
 80090b0:	6811      	ldr	r1, [r2, #0]
 80090b2:	1855      	adds	r5, r2, r1
 80090b4:	42a5      	cmp	r5, r4
 80090b6:	d10b      	bne.n	80090d0 <_free_r+0x70>
 80090b8:	6824      	ldr	r4, [r4, #0]
 80090ba:	4421      	add	r1, r4
 80090bc:	1854      	adds	r4, r2, r1
 80090be:	42a3      	cmp	r3, r4
 80090c0:	6011      	str	r1, [r2, #0]
 80090c2:	d1e0      	bne.n	8009086 <_free_r+0x26>
 80090c4:	681c      	ldr	r4, [r3, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	6053      	str	r3, [r2, #4]
 80090ca:	4421      	add	r1, r4
 80090cc:	6011      	str	r1, [r2, #0]
 80090ce:	e7da      	b.n	8009086 <_free_r+0x26>
 80090d0:	d902      	bls.n	80090d8 <_free_r+0x78>
 80090d2:	230c      	movs	r3, #12
 80090d4:	6003      	str	r3, [r0, #0]
 80090d6:	e7d6      	b.n	8009086 <_free_r+0x26>
 80090d8:	6825      	ldr	r5, [r4, #0]
 80090da:	1961      	adds	r1, r4, r5
 80090dc:	428b      	cmp	r3, r1
 80090de:	bf04      	itt	eq
 80090e0:	6819      	ldreq	r1, [r3, #0]
 80090e2:	685b      	ldreq	r3, [r3, #4]
 80090e4:	6063      	str	r3, [r4, #4]
 80090e6:	bf04      	itt	eq
 80090e8:	1949      	addeq	r1, r1, r5
 80090ea:	6021      	streq	r1, [r4, #0]
 80090ec:	6054      	str	r4, [r2, #4]
 80090ee:	e7ca      	b.n	8009086 <_free_r+0x26>
 80090f0:	b003      	add	sp, #12
 80090f2:	bd30      	pop	{r4, r5, pc}
 80090f4:	200002c4 	.word	0x200002c4

080090f8 <sbrk_aligned>:
 80090f8:	b570      	push	{r4, r5, r6, lr}
 80090fa:	4e0e      	ldr	r6, [pc, #56]	; (8009134 <sbrk_aligned+0x3c>)
 80090fc:	460c      	mov	r4, r1
 80090fe:	6831      	ldr	r1, [r6, #0]
 8009100:	4605      	mov	r5, r0
 8009102:	b911      	cbnz	r1, 800910a <sbrk_aligned+0x12>
 8009104:	f000 fcd6 	bl	8009ab4 <_sbrk_r>
 8009108:	6030      	str	r0, [r6, #0]
 800910a:	4621      	mov	r1, r4
 800910c:	4628      	mov	r0, r5
 800910e:	f000 fcd1 	bl	8009ab4 <_sbrk_r>
 8009112:	1c43      	adds	r3, r0, #1
 8009114:	d00a      	beq.n	800912c <sbrk_aligned+0x34>
 8009116:	1cc4      	adds	r4, r0, #3
 8009118:	f024 0403 	bic.w	r4, r4, #3
 800911c:	42a0      	cmp	r0, r4
 800911e:	d007      	beq.n	8009130 <sbrk_aligned+0x38>
 8009120:	1a21      	subs	r1, r4, r0
 8009122:	4628      	mov	r0, r5
 8009124:	f000 fcc6 	bl	8009ab4 <_sbrk_r>
 8009128:	3001      	adds	r0, #1
 800912a:	d101      	bne.n	8009130 <sbrk_aligned+0x38>
 800912c:	f04f 34ff 	mov.w	r4, #4294967295
 8009130:	4620      	mov	r0, r4
 8009132:	bd70      	pop	{r4, r5, r6, pc}
 8009134:	200002c8 	.word	0x200002c8

08009138 <_malloc_r>:
 8009138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800913c:	1ccd      	adds	r5, r1, #3
 800913e:	f025 0503 	bic.w	r5, r5, #3
 8009142:	3508      	adds	r5, #8
 8009144:	2d0c      	cmp	r5, #12
 8009146:	bf38      	it	cc
 8009148:	250c      	movcc	r5, #12
 800914a:	2d00      	cmp	r5, #0
 800914c:	4607      	mov	r7, r0
 800914e:	db01      	blt.n	8009154 <_malloc_r+0x1c>
 8009150:	42a9      	cmp	r1, r5
 8009152:	d905      	bls.n	8009160 <_malloc_r+0x28>
 8009154:	230c      	movs	r3, #12
 8009156:	603b      	str	r3, [r7, #0]
 8009158:	2600      	movs	r6, #0
 800915a:	4630      	mov	r0, r6
 800915c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009160:	4e2e      	ldr	r6, [pc, #184]	; (800921c <_malloc_r+0xe4>)
 8009162:	f000 ffc7 	bl	800a0f4 <__malloc_lock>
 8009166:	6833      	ldr	r3, [r6, #0]
 8009168:	461c      	mov	r4, r3
 800916a:	bb34      	cbnz	r4, 80091ba <_malloc_r+0x82>
 800916c:	4629      	mov	r1, r5
 800916e:	4638      	mov	r0, r7
 8009170:	f7ff ffc2 	bl	80090f8 <sbrk_aligned>
 8009174:	1c43      	adds	r3, r0, #1
 8009176:	4604      	mov	r4, r0
 8009178:	d14d      	bne.n	8009216 <_malloc_r+0xde>
 800917a:	6834      	ldr	r4, [r6, #0]
 800917c:	4626      	mov	r6, r4
 800917e:	2e00      	cmp	r6, #0
 8009180:	d140      	bne.n	8009204 <_malloc_r+0xcc>
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	4631      	mov	r1, r6
 8009186:	4638      	mov	r0, r7
 8009188:	eb04 0803 	add.w	r8, r4, r3
 800918c:	f000 fc92 	bl	8009ab4 <_sbrk_r>
 8009190:	4580      	cmp	r8, r0
 8009192:	d13a      	bne.n	800920a <_malloc_r+0xd2>
 8009194:	6821      	ldr	r1, [r4, #0]
 8009196:	3503      	adds	r5, #3
 8009198:	1a6d      	subs	r5, r5, r1
 800919a:	f025 0503 	bic.w	r5, r5, #3
 800919e:	3508      	adds	r5, #8
 80091a0:	2d0c      	cmp	r5, #12
 80091a2:	bf38      	it	cc
 80091a4:	250c      	movcc	r5, #12
 80091a6:	4629      	mov	r1, r5
 80091a8:	4638      	mov	r0, r7
 80091aa:	f7ff ffa5 	bl	80090f8 <sbrk_aligned>
 80091ae:	3001      	adds	r0, #1
 80091b0:	d02b      	beq.n	800920a <_malloc_r+0xd2>
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	442b      	add	r3, r5
 80091b6:	6023      	str	r3, [r4, #0]
 80091b8:	e00e      	b.n	80091d8 <_malloc_r+0xa0>
 80091ba:	6822      	ldr	r2, [r4, #0]
 80091bc:	1b52      	subs	r2, r2, r5
 80091be:	d41e      	bmi.n	80091fe <_malloc_r+0xc6>
 80091c0:	2a0b      	cmp	r2, #11
 80091c2:	d916      	bls.n	80091f2 <_malloc_r+0xba>
 80091c4:	1961      	adds	r1, r4, r5
 80091c6:	42a3      	cmp	r3, r4
 80091c8:	6025      	str	r5, [r4, #0]
 80091ca:	bf18      	it	ne
 80091cc:	6059      	strne	r1, [r3, #4]
 80091ce:	6863      	ldr	r3, [r4, #4]
 80091d0:	bf08      	it	eq
 80091d2:	6031      	streq	r1, [r6, #0]
 80091d4:	5162      	str	r2, [r4, r5]
 80091d6:	604b      	str	r3, [r1, #4]
 80091d8:	4638      	mov	r0, r7
 80091da:	f104 060b 	add.w	r6, r4, #11
 80091de:	f000 ff8f 	bl	800a100 <__malloc_unlock>
 80091e2:	f026 0607 	bic.w	r6, r6, #7
 80091e6:	1d23      	adds	r3, r4, #4
 80091e8:	1af2      	subs	r2, r6, r3
 80091ea:	d0b6      	beq.n	800915a <_malloc_r+0x22>
 80091ec:	1b9b      	subs	r3, r3, r6
 80091ee:	50a3      	str	r3, [r4, r2]
 80091f0:	e7b3      	b.n	800915a <_malloc_r+0x22>
 80091f2:	6862      	ldr	r2, [r4, #4]
 80091f4:	42a3      	cmp	r3, r4
 80091f6:	bf0c      	ite	eq
 80091f8:	6032      	streq	r2, [r6, #0]
 80091fa:	605a      	strne	r2, [r3, #4]
 80091fc:	e7ec      	b.n	80091d8 <_malloc_r+0xa0>
 80091fe:	4623      	mov	r3, r4
 8009200:	6864      	ldr	r4, [r4, #4]
 8009202:	e7b2      	b.n	800916a <_malloc_r+0x32>
 8009204:	4634      	mov	r4, r6
 8009206:	6876      	ldr	r6, [r6, #4]
 8009208:	e7b9      	b.n	800917e <_malloc_r+0x46>
 800920a:	230c      	movs	r3, #12
 800920c:	603b      	str	r3, [r7, #0]
 800920e:	4638      	mov	r0, r7
 8009210:	f000 ff76 	bl	800a100 <__malloc_unlock>
 8009214:	e7a1      	b.n	800915a <_malloc_r+0x22>
 8009216:	6025      	str	r5, [r4, #0]
 8009218:	e7de      	b.n	80091d8 <_malloc_r+0xa0>
 800921a:	bf00      	nop
 800921c:	200002c4 	.word	0x200002c4

08009220 <__ssputs_r>:
 8009220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009224:	688e      	ldr	r6, [r1, #8]
 8009226:	429e      	cmp	r6, r3
 8009228:	4682      	mov	sl, r0
 800922a:	460c      	mov	r4, r1
 800922c:	4690      	mov	r8, r2
 800922e:	461f      	mov	r7, r3
 8009230:	d838      	bhi.n	80092a4 <__ssputs_r+0x84>
 8009232:	898a      	ldrh	r2, [r1, #12]
 8009234:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009238:	d032      	beq.n	80092a0 <__ssputs_r+0x80>
 800923a:	6825      	ldr	r5, [r4, #0]
 800923c:	6909      	ldr	r1, [r1, #16]
 800923e:	eba5 0901 	sub.w	r9, r5, r1
 8009242:	6965      	ldr	r5, [r4, #20]
 8009244:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009248:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800924c:	3301      	adds	r3, #1
 800924e:	444b      	add	r3, r9
 8009250:	106d      	asrs	r5, r5, #1
 8009252:	429d      	cmp	r5, r3
 8009254:	bf38      	it	cc
 8009256:	461d      	movcc	r5, r3
 8009258:	0553      	lsls	r3, r2, #21
 800925a:	d531      	bpl.n	80092c0 <__ssputs_r+0xa0>
 800925c:	4629      	mov	r1, r5
 800925e:	f7ff ff6b 	bl	8009138 <_malloc_r>
 8009262:	4606      	mov	r6, r0
 8009264:	b950      	cbnz	r0, 800927c <__ssputs_r+0x5c>
 8009266:	230c      	movs	r3, #12
 8009268:	f8ca 3000 	str.w	r3, [sl]
 800926c:	89a3      	ldrh	r3, [r4, #12]
 800926e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009272:	81a3      	strh	r3, [r4, #12]
 8009274:	f04f 30ff 	mov.w	r0, #4294967295
 8009278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800927c:	6921      	ldr	r1, [r4, #16]
 800927e:	464a      	mov	r2, r9
 8009280:	f000 ff10 	bl	800a0a4 <memcpy>
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800928a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800928e:	81a3      	strh	r3, [r4, #12]
 8009290:	6126      	str	r6, [r4, #16]
 8009292:	6165      	str	r5, [r4, #20]
 8009294:	444e      	add	r6, r9
 8009296:	eba5 0509 	sub.w	r5, r5, r9
 800929a:	6026      	str	r6, [r4, #0]
 800929c:	60a5      	str	r5, [r4, #8]
 800929e:	463e      	mov	r6, r7
 80092a0:	42be      	cmp	r6, r7
 80092a2:	d900      	bls.n	80092a6 <__ssputs_r+0x86>
 80092a4:	463e      	mov	r6, r7
 80092a6:	6820      	ldr	r0, [r4, #0]
 80092a8:	4632      	mov	r2, r6
 80092aa:	4641      	mov	r1, r8
 80092ac:	f000 ff08 	bl	800a0c0 <memmove>
 80092b0:	68a3      	ldr	r3, [r4, #8]
 80092b2:	1b9b      	subs	r3, r3, r6
 80092b4:	60a3      	str	r3, [r4, #8]
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	4433      	add	r3, r6
 80092ba:	6023      	str	r3, [r4, #0]
 80092bc:	2000      	movs	r0, #0
 80092be:	e7db      	b.n	8009278 <__ssputs_r+0x58>
 80092c0:	462a      	mov	r2, r5
 80092c2:	f000 ff23 	bl	800a10c <_realloc_r>
 80092c6:	4606      	mov	r6, r0
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d1e1      	bne.n	8009290 <__ssputs_r+0x70>
 80092cc:	6921      	ldr	r1, [r4, #16]
 80092ce:	4650      	mov	r0, sl
 80092d0:	f7ff fec6 	bl	8009060 <_free_r>
 80092d4:	e7c7      	b.n	8009266 <__ssputs_r+0x46>
	...

080092d8 <_svfiprintf_r>:
 80092d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092dc:	4698      	mov	r8, r3
 80092de:	898b      	ldrh	r3, [r1, #12]
 80092e0:	061b      	lsls	r3, r3, #24
 80092e2:	b09d      	sub	sp, #116	; 0x74
 80092e4:	4607      	mov	r7, r0
 80092e6:	460d      	mov	r5, r1
 80092e8:	4614      	mov	r4, r2
 80092ea:	d50e      	bpl.n	800930a <_svfiprintf_r+0x32>
 80092ec:	690b      	ldr	r3, [r1, #16]
 80092ee:	b963      	cbnz	r3, 800930a <_svfiprintf_r+0x32>
 80092f0:	2140      	movs	r1, #64	; 0x40
 80092f2:	f7ff ff21 	bl	8009138 <_malloc_r>
 80092f6:	6028      	str	r0, [r5, #0]
 80092f8:	6128      	str	r0, [r5, #16]
 80092fa:	b920      	cbnz	r0, 8009306 <_svfiprintf_r+0x2e>
 80092fc:	230c      	movs	r3, #12
 80092fe:	603b      	str	r3, [r7, #0]
 8009300:	f04f 30ff 	mov.w	r0, #4294967295
 8009304:	e0d1      	b.n	80094aa <_svfiprintf_r+0x1d2>
 8009306:	2340      	movs	r3, #64	; 0x40
 8009308:	616b      	str	r3, [r5, #20]
 800930a:	2300      	movs	r3, #0
 800930c:	9309      	str	r3, [sp, #36]	; 0x24
 800930e:	2320      	movs	r3, #32
 8009310:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009314:	f8cd 800c 	str.w	r8, [sp, #12]
 8009318:	2330      	movs	r3, #48	; 0x30
 800931a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80094c4 <_svfiprintf_r+0x1ec>
 800931e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009322:	f04f 0901 	mov.w	r9, #1
 8009326:	4623      	mov	r3, r4
 8009328:	469a      	mov	sl, r3
 800932a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800932e:	b10a      	cbz	r2, 8009334 <_svfiprintf_r+0x5c>
 8009330:	2a25      	cmp	r2, #37	; 0x25
 8009332:	d1f9      	bne.n	8009328 <_svfiprintf_r+0x50>
 8009334:	ebba 0b04 	subs.w	fp, sl, r4
 8009338:	d00b      	beq.n	8009352 <_svfiprintf_r+0x7a>
 800933a:	465b      	mov	r3, fp
 800933c:	4622      	mov	r2, r4
 800933e:	4629      	mov	r1, r5
 8009340:	4638      	mov	r0, r7
 8009342:	f7ff ff6d 	bl	8009220 <__ssputs_r>
 8009346:	3001      	adds	r0, #1
 8009348:	f000 80aa 	beq.w	80094a0 <_svfiprintf_r+0x1c8>
 800934c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800934e:	445a      	add	r2, fp
 8009350:	9209      	str	r2, [sp, #36]	; 0x24
 8009352:	f89a 3000 	ldrb.w	r3, [sl]
 8009356:	2b00      	cmp	r3, #0
 8009358:	f000 80a2 	beq.w	80094a0 <_svfiprintf_r+0x1c8>
 800935c:	2300      	movs	r3, #0
 800935e:	f04f 32ff 	mov.w	r2, #4294967295
 8009362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009366:	f10a 0a01 	add.w	sl, sl, #1
 800936a:	9304      	str	r3, [sp, #16]
 800936c:	9307      	str	r3, [sp, #28]
 800936e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009372:	931a      	str	r3, [sp, #104]	; 0x68
 8009374:	4654      	mov	r4, sl
 8009376:	2205      	movs	r2, #5
 8009378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800937c:	4851      	ldr	r0, [pc, #324]	; (80094c4 <_svfiprintf_r+0x1ec>)
 800937e:	f7f6 ff5f 	bl	8000240 <memchr>
 8009382:	9a04      	ldr	r2, [sp, #16]
 8009384:	b9d8      	cbnz	r0, 80093be <_svfiprintf_r+0xe6>
 8009386:	06d0      	lsls	r0, r2, #27
 8009388:	bf44      	itt	mi
 800938a:	2320      	movmi	r3, #32
 800938c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009390:	0711      	lsls	r1, r2, #28
 8009392:	bf44      	itt	mi
 8009394:	232b      	movmi	r3, #43	; 0x2b
 8009396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800939a:	f89a 3000 	ldrb.w	r3, [sl]
 800939e:	2b2a      	cmp	r3, #42	; 0x2a
 80093a0:	d015      	beq.n	80093ce <_svfiprintf_r+0xf6>
 80093a2:	9a07      	ldr	r2, [sp, #28]
 80093a4:	4654      	mov	r4, sl
 80093a6:	2000      	movs	r0, #0
 80093a8:	f04f 0c0a 	mov.w	ip, #10
 80093ac:	4621      	mov	r1, r4
 80093ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093b2:	3b30      	subs	r3, #48	; 0x30
 80093b4:	2b09      	cmp	r3, #9
 80093b6:	d94e      	bls.n	8009456 <_svfiprintf_r+0x17e>
 80093b8:	b1b0      	cbz	r0, 80093e8 <_svfiprintf_r+0x110>
 80093ba:	9207      	str	r2, [sp, #28]
 80093bc:	e014      	b.n	80093e8 <_svfiprintf_r+0x110>
 80093be:	eba0 0308 	sub.w	r3, r0, r8
 80093c2:	fa09 f303 	lsl.w	r3, r9, r3
 80093c6:	4313      	orrs	r3, r2
 80093c8:	9304      	str	r3, [sp, #16]
 80093ca:	46a2      	mov	sl, r4
 80093cc:	e7d2      	b.n	8009374 <_svfiprintf_r+0x9c>
 80093ce:	9b03      	ldr	r3, [sp, #12]
 80093d0:	1d19      	adds	r1, r3, #4
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	9103      	str	r1, [sp, #12]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	bfbb      	ittet	lt
 80093da:	425b      	neglt	r3, r3
 80093dc:	f042 0202 	orrlt.w	r2, r2, #2
 80093e0:	9307      	strge	r3, [sp, #28]
 80093e2:	9307      	strlt	r3, [sp, #28]
 80093e4:	bfb8      	it	lt
 80093e6:	9204      	strlt	r2, [sp, #16]
 80093e8:	7823      	ldrb	r3, [r4, #0]
 80093ea:	2b2e      	cmp	r3, #46	; 0x2e
 80093ec:	d10c      	bne.n	8009408 <_svfiprintf_r+0x130>
 80093ee:	7863      	ldrb	r3, [r4, #1]
 80093f0:	2b2a      	cmp	r3, #42	; 0x2a
 80093f2:	d135      	bne.n	8009460 <_svfiprintf_r+0x188>
 80093f4:	9b03      	ldr	r3, [sp, #12]
 80093f6:	1d1a      	adds	r2, r3, #4
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	9203      	str	r2, [sp, #12]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	bfb8      	it	lt
 8009400:	f04f 33ff 	movlt.w	r3, #4294967295
 8009404:	3402      	adds	r4, #2
 8009406:	9305      	str	r3, [sp, #20]
 8009408:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094d4 <_svfiprintf_r+0x1fc>
 800940c:	7821      	ldrb	r1, [r4, #0]
 800940e:	2203      	movs	r2, #3
 8009410:	4650      	mov	r0, sl
 8009412:	f7f6 ff15 	bl	8000240 <memchr>
 8009416:	b140      	cbz	r0, 800942a <_svfiprintf_r+0x152>
 8009418:	2340      	movs	r3, #64	; 0x40
 800941a:	eba0 000a 	sub.w	r0, r0, sl
 800941e:	fa03 f000 	lsl.w	r0, r3, r0
 8009422:	9b04      	ldr	r3, [sp, #16]
 8009424:	4303      	orrs	r3, r0
 8009426:	3401      	adds	r4, #1
 8009428:	9304      	str	r3, [sp, #16]
 800942a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800942e:	4826      	ldr	r0, [pc, #152]	; (80094c8 <_svfiprintf_r+0x1f0>)
 8009430:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009434:	2206      	movs	r2, #6
 8009436:	f7f6 ff03 	bl	8000240 <memchr>
 800943a:	2800      	cmp	r0, #0
 800943c:	d038      	beq.n	80094b0 <_svfiprintf_r+0x1d8>
 800943e:	4b23      	ldr	r3, [pc, #140]	; (80094cc <_svfiprintf_r+0x1f4>)
 8009440:	bb1b      	cbnz	r3, 800948a <_svfiprintf_r+0x1b2>
 8009442:	9b03      	ldr	r3, [sp, #12]
 8009444:	3307      	adds	r3, #7
 8009446:	f023 0307 	bic.w	r3, r3, #7
 800944a:	3308      	adds	r3, #8
 800944c:	9303      	str	r3, [sp, #12]
 800944e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009450:	4433      	add	r3, r6
 8009452:	9309      	str	r3, [sp, #36]	; 0x24
 8009454:	e767      	b.n	8009326 <_svfiprintf_r+0x4e>
 8009456:	fb0c 3202 	mla	r2, ip, r2, r3
 800945a:	460c      	mov	r4, r1
 800945c:	2001      	movs	r0, #1
 800945e:	e7a5      	b.n	80093ac <_svfiprintf_r+0xd4>
 8009460:	2300      	movs	r3, #0
 8009462:	3401      	adds	r4, #1
 8009464:	9305      	str	r3, [sp, #20]
 8009466:	4619      	mov	r1, r3
 8009468:	f04f 0c0a 	mov.w	ip, #10
 800946c:	4620      	mov	r0, r4
 800946e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009472:	3a30      	subs	r2, #48	; 0x30
 8009474:	2a09      	cmp	r2, #9
 8009476:	d903      	bls.n	8009480 <_svfiprintf_r+0x1a8>
 8009478:	2b00      	cmp	r3, #0
 800947a:	d0c5      	beq.n	8009408 <_svfiprintf_r+0x130>
 800947c:	9105      	str	r1, [sp, #20]
 800947e:	e7c3      	b.n	8009408 <_svfiprintf_r+0x130>
 8009480:	fb0c 2101 	mla	r1, ip, r1, r2
 8009484:	4604      	mov	r4, r0
 8009486:	2301      	movs	r3, #1
 8009488:	e7f0      	b.n	800946c <_svfiprintf_r+0x194>
 800948a:	ab03      	add	r3, sp, #12
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	462a      	mov	r2, r5
 8009490:	4b0f      	ldr	r3, [pc, #60]	; (80094d0 <_svfiprintf_r+0x1f8>)
 8009492:	a904      	add	r1, sp, #16
 8009494:	4638      	mov	r0, r7
 8009496:	f3af 8000 	nop.w
 800949a:	1c42      	adds	r2, r0, #1
 800949c:	4606      	mov	r6, r0
 800949e:	d1d6      	bne.n	800944e <_svfiprintf_r+0x176>
 80094a0:	89ab      	ldrh	r3, [r5, #12]
 80094a2:	065b      	lsls	r3, r3, #25
 80094a4:	f53f af2c 	bmi.w	8009300 <_svfiprintf_r+0x28>
 80094a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094aa:	b01d      	add	sp, #116	; 0x74
 80094ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b0:	ab03      	add	r3, sp, #12
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	462a      	mov	r2, r5
 80094b6:	4b06      	ldr	r3, [pc, #24]	; (80094d0 <_svfiprintf_r+0x1f8>)
 80094b8:	a904      	add	r1, sp, #16
 80094ba:	4638      	mov	r0, r7
 80094bc:	f000 f9d4 	bl	8009868 <_printf_i>
 80094c0:	e7eb      	b.n	800949a <_svfiprintf_r+0x1c2>
 80094c2:	bf00      	nop
 80094c4:	0800a811 	.word	0x0800a811
 80094c8:	0800a81b 	.word	0x0800a81b
 80094cc:	00000000 	.word	0x00000000
 80094d0:	08009221 	.word	0x08009221
 80094d4:	0800a817 	.word	0x0800a817

080094d8 <__sfputc_r>:
 80094d8:	6893      	ldr	r3, [r2, #8]
 80094da:	3b01      	subs	r3, #1
 80094dc:	2b00      	cmp	r3, #0
 80094de:	b410      	push	{r4}
 80094e0:	6093      	str	r3, [r2, #8]
 80094e2:	da08      	bge.n	80094f6 <__sfputc_r+0x1e>
 80094e4:	6994      	ldr	r4, [r2, #24]
 80094e6:	42a3      	cmp	r3, r4
 80094e8:	db01      	blt.n	80094ee <__sfputc_r+0x16>
 80094ea:	290a      	cmp	r1, #10
 80094ec:	d103      	bne.n	80094f6 <__sfputc_r+0x1e>
 80094ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094f2:	f000 baef 	b.w	8009ad4 <__swbuf_r>
 80094f6:	6813      	ldr	r3, [r2, #0]
 80094f8:	1c58      	adds	r0, r3, #1
 80094fa:	6010      	str	r0, [r2, #0]
 80094fc:	7019      	strb	r1, [r3, #0]
 80094fe:	4608      	mov	r0, r1
 8009500:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009504:	4770      	bx	lr

08009506 <__sfputs_r>:
 8009506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009508:	4606      	mov	r6, r0
 800950a:	460f      	mov	r7, r1
 800950c:	4614      	mov	r4, r2
 800950e:	18d5      	adds	r5, r2, r3
 8009510:	42ac      	cmp	r4, r5
 8009512:	d101      	bne.n	8009518 <__sfputs_r+0x12>
 8009514:	2000      	movs	r0, #0
 8009516:	e007      	b.n	8009528 <__sfputs_r+0x22>
 8009518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800951c:	463a      	mov	r2, r7
 800951e:	4630      	mov	r0, r6
 8009520:	f7ff ffda 	bl	80094d8 <__sfputc_r>
 8009524:	1c43      	adds	r3, r0, #1
 8009526:	d1f3      	bne.n	8009510 <__sfputs_r+0xa>
 8009528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800952c <_vfiprintf_r>:
 800952c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009530:	460d      	mov	r5, r1
 8009532:	b09d      	sub	sp, #116	; 0x74
 8009534:	4614      	mov	r4, r2
 8009536:	4698      	mov	r8, r3
 8009538:	4606      	mov	r6, r0
 800953a:	b118      	cbz	r0, 8009544 <_vfiprintf_r+0x18>
 800953c:	6983      	ldr	r3, [r0, #24]
 800953e:	b90b      	cbnz	r3, 8009544 <_vfiprintf_r+0x18>
 8009540:	f000 fcaa 	bl	8009e98 <__sinit>
 8009544:	4b89      	ldr	r3, [pc, #548]	; (800976c <_vfiprintf_r+0x240>)
 8009546:	429d      	cmp	r5, r3
 8009548:	d11b      	bne.n	8009582 <_vfiprintf_r+0x56>
 800954a:	6875      	ldr	r5, [r6, #4]
 800954c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800954e:	07d9      	lsls	r1, r3, #31
 8009550:	d405      	bmi.n	800955e <_vfiprintf_r+0x32>
 8009552:	89ab      	ldrh	r3, [r5, #12]
 8009554:	059a      	lsls	r2, r3, #22
 8009556:	d402      	bmi.n	800955e <_vfiprintf_r+0x32>
 8009558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800955a:	f000 fd3b 	bl	8009fd4 <__retarget_lock_acquire_recursive>
 800955e:	89ab      	ldrh	r3, [r5, #12]
 8009560:	071b      	lsls	r3, r3, #28
 8009562:	d501      	bpl.n	8009568 <_vfiprintf_r+0x3c>
 8009564:	692b      	ldr	r3, [r5, #16]
 8009566:	b9eb      	cbnz	r3, 80095a4 <_vfiprintf_r+0x78>
 8009568:	4629      	mov	r1, r5
 800956a:	4630      	mov	r0, r6
 800956c:	f000 fb04 	bl	8009b78 <__swsetup_r>
 8009570:	b1c0      	cbz	r0, 80095a4 <_vfiprintf_r+0x78>
 8009572:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009574:	07dc      	lsls	r4, r3, #31
 8009576:	d50e      	bpl.n	8009596 <_vfiprintf_r+0x6a>
 8009578:	f04f 30ff 	mov.w	r0, #4294967295
 800957c:	b01d      	add	sp, #116	; 0x74
 800957e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009582:	4b7b      	ldr	r3, [pc, #492]	; (8009770 <_vfiprintf_r+0x244>)
 8009584:	429d      	cmp	r5, r3
 8009586:	d101      	bne.n	800958c <_vfiprintf_r+0x60>
 8009588:	68b5      	ldr	r5, [r6, #8]
 800958a:	e7df      	b.n	800954c <_vfiprintf_r+0x20>
 800958c:	4b79      	ldr	r3, [pc, #484]	; (8009774 <_vfiprintf_r+0x248>)
 800958e:	429d      	cmp	r5, r3
 8009590:	bf08      	it	eq
 8009592:	68f5      	ldreq	r5, [r6, #12]
 8009594:	e7da      	b.n	800954c <_vfiprintf_r+0x20>
 8009596:	89ab      	ldrh	r3, [r5, #12]
 8009598:	0598      	lsls	r0, r3, #22
 800959a:	d4ed      	bmi.n	8009578 <_vfiprintf_r+0x4c>
 800959c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800959e:	f000 fd1a 	bl	8009fd6 <__retarget_lock_release_recursive>
 80095a2:	e7e9      	b.n	8009578 <_vfiprintf_r+0x4c>
 80095a4:	2300      	movs	r3, #0
 80095a6:	9309      	str	r3, [sp, #36]	; 0x24
 80095a8:	2320      	movs	r3, #32
 80095aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80095b2:	2330      	movs	r3, #48	; 0x30
 80095b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009778 <_vfiprintf_r+0x24c>
 80095b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095bc:	f04f 0901 	mov.w	r9, #1
 80095c0:	4623      	mov	r3, r4
 80095c2:	469a      	mov	sl, r3
 80095c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095c8:	b10a      	cbz	r2, 80095ce <_vfiprintf_r+0xa2>
 80095ca:	2a25      	cmp	r2, #37	; 0x25
 80095cc:	d1f9      	bne.n	80095c2 <_vfiprintf_r+0x96>
 80095ce:	ebba 0b04 	subs.w	fp, sl, r4
 80095d2:	d00b      	beq.n	80095ec <_vfiprintf_r+0xc0>
 80095d4:	465b      	mov	r3, fp
 80095d6:	4622      	mov	r2, r4
 80095d8:	4629      	mov	r1, r5
 80095da:	4630      	mov	r0, r6
 80095dc:	f7ff ff93 	bl	8009506 <__sfputs_r>
 80095e0:	3001      	adds	r0, #1
 80095e2:	f000 80aa 	beq.w	800973a <_vfiprintf_r+0x20e>
 80095e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095e8:	445a      	add	r2, fp
 80095ea:	9209      	str	r2, [sp, #36]	; 0x24
 80095ec:	f89a 3000 	ldrb.w	r3, [sl]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 80a2 	beq.w	800973a <_vfiprintf_r+0x20e>
 80095f6:	2300      	movs	r3, #0
 80095f8:	f04f 32ff 	mov.w	r2, #4294967295
 80095fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009600:	f10a 0a01 	add.w	sl, sl, #1
 8009604:	9304      	str	r3, [sp, #16]
 8009606:	9307      	str	r3, [sp, #28]
 8009608:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800960c:	931a      	str	r3, [sp, #104]	; 0x68
 800960e:	4654      	mov	r4, sl
 8009610:	2205      	movs	r2, #5
 8009612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009616:	4858      	ldr	r0, [pc, #352]	; (8009778 <_vfiprintf_r+0x24c>)
 8009618:	f7f6 fe12 	bl	8000240 <memchr>
 800961c:	9a04      	ldr	r2, [sp, #16]
 800961e:	b9d8      	cbnz	r0, 8009658 <_vfiprintf_r+0x12c>
 8009620:	06d1      	lsls	r1, r2, #27
 8009622:	bf44      	itt	mi
 8009624:	2320      	movmi	r3, #32
 8009626:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800962a:	0713      	lsls	r3, r2, #28
 800962c:	bf44      	itt	mi
 800962e:	232b      	movmi	r3, #43	; 0x2b
 8009630:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009634:	f89a 3000 	ldrb.w	r3, [sl]
 8009638:	2b2a      	cmp	r3, #42	; 0x2a
 800963a:	d015      	beq.n	8009668 <_vfiprintf_r+0x13c>
 800963c:	9a07      	ldr	r2, [sp, #28]
 800963e:	4654      	mov	r4, sl
 8009640:	2000      	movs	r0, #0
 8009642:	f04f 0c0a 	mov.w	ip, #10
 8009646:	4621      	mov	r1, r4
 8009648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800964c:	3b30      	subs	r3, #48	; 0x30
 800964e:	2b09      	cmp	r3, #9
 8009650:	d94e      	bls.n	80096f0 <_vfiprintf_r+0x1c4>
 8009652:	b1b0      	cbz	r0, 8009682 <_vfiprintf_r+0x156>
 8009654:	9207      	str	r2, [sp, #28]
 8009656:	e014      	b.n	8009682 <_vfiprintf_r+0x156>
 8009658:	eba0 0308 	sub.w	r3, r0, r8
 800965c:	fa09 f303 	lsl.w	r3, r9, r3
 8009660:	4313      	orrs	r3, r2
 8009662:	9304      	str	r3, [sp, #16]
 8009664:	46a2      	mov	sl, r4
 8009666:	e7d2      	b.n	800960e <_vfiprintf_r+0xe2>
 8009668:	9b03      	ldr	r3, [sp, #12]
 800966a:	1d19      	adds	r1, r3, #4
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	9103      	str	r1, [sp, #12]
 8009670:	2b00      	cmp	r3, #0
 8009672:	bfbb      	ittet	lt
 8009674:	425b      	neglt	r3, r3
 8009676:	f042 0202 	orrlt.w	r2, r2, #2
 800967a:	9307      	strge	r3, [sp, #28]
 800967c:	9307      	strlt	r3, [sp, #28]
 800967e:	bfb8      	it	lt
 8009680:	9204      	strlt	r2, [sp, #16]
 8009682:	7823      	ldrb	r3, [r4, #0]
 8009684:	2b2e      	cmp	r3, #46	; 0x2e
 8009686:	d10c      	bne.n	80096a2 <_vfiprintf_r+0x176>
 8009688:	7863      	ldrb	r3, [r4, #1]
 800968a:	2b2a      	cmp	r3, #42	; 0x2a
 800968c:	d135      	bne.n	80096fa <_vfiprintf_r+0x1ce>
 800968e:	9b03      	ldr	r3, [sp, #12]
 8009690:	1d1a      	adds	r2, r3, #4
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	9203      	str	r2, [sp, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	bfb8      	it	lt
 800969a:	f04f 33ff 	movlt.w	r3, #4294967295
 800969e:	3402      	adds	r4, #2
 80096a0:	9305      	str	r3, [sp, #20]
 80096a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009788 <_vfiprintf_r+0x25c>
 80096a6:	7821      	ldrb	r1, [r4, #0]
 80096a8:	2203      	movs	r2, #3
 80096aa:	4650      	mov	r0, sl
 80096ac:	f7f6 fdc8 	bl	8000240 <memchr>
 80096b0:	b140      	cbz	r0, 80096c4 <_vfiprintf_r+0x198>
 80096b2:	2340      	movs	r3, #64	; 0x40
 80096b4:	eba0 000a 	sub.w	r0, r0, sl
 80096b8:	fa03 f000 	lsl.w	r0, r3, r0
 80096bc:	9b04      	ldr	r3, [sp, #16]
 80096be:	4303      	orrs	r3, r0
 80096c0:	3401      	adds	r4, #1
 80096c2:	9304      	str	r3, [sp, #16]
 80096c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c8:	482c      	ldr	r0, [pc, #176]	; (800977c <_vfiprintf_r+0x250>)
 80096ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096ce:	2206      	movs	r2, #6
 80096d0:	f7f6 fdb6 	bl	8000240 <memchr>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d03f      	beq.n	8009758 <_vfiprintf_r+0x22c>
 80096d8:	4b29      	ldr	r3, [pc, #164]	; (8009780 <_vfiprintf_r+0x254>)
 80096da:	bb1b      	cbnz	r3, 8009724 <_vfiprintf_r+0x1f8>
 80096dc:	9b03      	ldr	r3, [sp, #12]
 80096de:	3307      	adds	r3, #7
 80096e0:	f023 0307 	bic.w	r3, r3, #7
 80096e4:	3308      	adds	r3, #8
 80096e6:	9303      	str	r3, [sp, #12]
 80096e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ea:	443b      	add	r3, r7
 80096ec:	9309      	str	r3, [sp, #36]	; 0x24
 80096ee:	e767      	b.n	80095c0 <_vfiprintf_r+0x94>
 80096f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80096f4:	460c      	mov	r4, r1
 80096f6:	2001      	movs	r0, #1
 80096f8:	e7a5      	b.n	8009646 <_vfiprintf_r+0x11a>
 80096fa:	2300      	movs	r3, #0
 80096fc:	3401      	adds	r4, #1
 80096fe:	9305      	str	r3, [sp, #20]
 8009700:	4619      	mov	r1, r3
 8009702:	f04f 0c0a 	mov.w	ip, #10
 8009706:	4620      	mov	r0, r4
 8009708:	f810 2b01 	ldrb.w	r2, [r0], #1
 800970c:	3a30      	subs	r2, #48	; 0x30
 800970e:	2a09      	cmp	r2, #9
 8009710:	d903      	bls.n	800971a <_vfiprintf_r+0x1ee>
 8009712:	2b00      	cmp	r3, #0
 8009714:	d0c5      	beq.n	80096a2 <_vfiprintf_r+0x176>
 8009716:	9105      	str	r1, [sp, #20]
 8009718:	e7c3      	b.n	80096a2 <_vfiprintf_r+0x176>
 800971a:	fb0c 2101 	mla	r1, ip, r1, r2
 800971e:	4604      	mov	r4, r0
 8009720:	2301      	movs	r3, #1
 8009722:	e7f0      	b.n	8009706 <_vfiprintf_r+0x1da>
 8009724:	ab03      	add	r3, sp, #12
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	462a      	mov	r2, r5
 800972a:	4b16      	ldr	r3, [pc, #88]	; (8009784 <_vfiprintf_r+0x258>)
 800972c:	a904      	add	r1, sp, #16
 800972e:	4630      	mov	r0, r6
 8009730:	f3af 8000 	nop.w
 8009734:	4607      	mov	r7, r0
 8009736:	1c78      	adds	r0, r7, #1
 8009738:	d1d6      	bne.n	80096e8 <_vfiprintf_r+0x1bc>
 800973a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800973c:	07d9      	lsls	r1, r3, #31
 800973e:	d405      	bmi.n	800974c <_vfiprintf_r+0x220>
 8009740:	89ab      	ldrh	r3, [r5, #12]
 8009742:	059a      	lsls	r2, r3, #22
 8009744:	d402      	bmi.n	800974c <_vfiprintf_r+0x220>
 8009746:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009748:	f000 fc45 	bl	8009fd6 <__retarget_lock_release_recursive>
 800974c:	89ab      	ldrh	r3, [r5, #12]
 800974e:	065b      	lsls	r3, r3, #25
 8009750:	f53f af12 	bmi.w	8009578 <_vfiprintf_r+0x4c>
 8009754:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009756:	e711      	b.n	800957c <_vfiprintf_r+0x50>
 8009758:	ab03      	add	r3, sp, #12
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	462a      	mov	r2, r5
 800975e:	4b09      	ldr	r3, [pc, #36]	; (8009784 <_vfiprintf_r+0x258>)
 8009760:	a904      	add	r1, sp, #16
 8009762:	4630      	mov	r0, r6
 8009764:	f000 f880 	bl	8009868 <_printf_i>
 8009768:	e7e4      	b.n	8009734 <_vfiprintf_r+0x208>
 800976a:	bf00      	nop
 800976c:	0800a864 	.word	0x0800a864
 8009770:	0800a884 	.word	0x0800a884
 8009774:	0800a844 	.word	0x0800a844
 8009778:	0800a811 	.word	0x0800a811
 800977c:	0800a81b 	.word	0x0800a81b
 8009780:	00000000 	.word	0x00000000
 8009784:	08009507 	.word	0x08009507
 8009788:	0800a817 	.word	0x0800a817

0800978c <_printf_common>:
 800978c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009790:	4616      	mov	r6, r2
 8009792:	4699      	mov	r9, r3
 8009794:	688a      	ldr	r2, [r1, #8]
 8009796:	690b      	ldr	r3, [r1, #16]
 8009798:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800979c:	4293      	cmp	r3, r2
 800979e:	bfb8      	it	lt
 80097a0:	4613      	movlt	r3, r2
 80097a2:	6033      	str	r3, [r6, #0]
 80097a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097a8:	4607      	mov	r7, r0
 80097aa:	460c      	mov	r4, r1
 80097ac:	b10a      	cbz	r2, 80097b2 <_printf_common+0x26>
 80097ae:	3301      	adds	r3, #1
 80097b0:	6033      	str	r3, [r6, #0]
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	0699      	lsls	r1, r3, #26
 80097b6:	bf42      	ittt	mi
 80097b8:	6833      	ldrmi	r3, [r6, #0]
 80097ba:	3302      	addmi	r3, #2
 80097bc:	6033      	strmi	r3, [r6, #0]
 80097be:	6825      	ldr	r5, [r4, #0]
 80097c0:	f015 0506 	ands.w	r5, r5, #6
 80097c4:	d106      	bne.n	80097d4 <_printf_common+0x48>
 80097c6:	f104 0a19 	add.w	sl, r4, #25
 80097ca:	68e3      	ldr	r3, [r4, #12]
 80097cc:	6832      	ldr	r2, [r6, #0]
 80097ce:	1a9b      	subs	r3, r3, r2
 80097d0:	42ab      	cmp	r3, r5
 80097d2:	dc26      	bgt.n	8009822 <_printf_common+0x96>
 80097d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097d8:	1e13      	subs	r3, r2, #0
 80097da:	6822      	ldr	r2, [r4, #0]
 80097dc:	bf18      	it	ne
 80097de:	2301      	movne	r3, #1
 80097e0:	0692      	lsls	r2, r2, #26
 80097e2:	d42b      	bmi.n	800983c <_printf_common+0xb0>
 80097e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097e8:	4649      	mov	r1, r9
 80097ea:	4638      	mov	r0, r7
 80097ec:	47c0      	blx	r8
 80097ee:	3001      	adds	r0, #1
 80097f0:	d01e      	beq.n	8009830 <_printf_common+0xa4>
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	68e5      	ldr	r5, [r4, #12]
 80097f6:	6832      	ldr	r2, [r6, #0]
 80097f8:	f003 0306 	and.w	r3, r3, #6
 80097fc:	2b04      	cmp	r3, #4
 80097fe:	bf08      	it	eq
 8009800:	1aad      	subeq	r5, r5, r2
 8009802:	68a3      	ldr	r3, [r4, #8]
 8009804:	6922      	ldr	r2, [r4, #16]
 8009806:	bf0c      	ite	eq
 8009808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800980c:	2500      	movne	r5, #0
 800980e:	4293      	cmp	r3, r2
 8009810:	bfc4      	itt	gt
 8009812:	1a9b      	subgt	r3, r3, r2
 8009814:	18ed      	addgt	r5, r5, r3
 8009816:	2600      	movs	r6, #0
 8009818:	341a      	adds	r4, #26
 800981a:	42b5      	cmp	r5, r6
 800981c:	d11a      	bne.n	8009854 <_printf_common+0xc8>
 800981e:	2000      	movs	r0, #0
 8009820:	e008      	b.n	8009834 <_printf_common+0xa8>
 8009822:	2301      	movs	r3, #1
 8009824:	4652      	mov	r2, sl
 8009826:	4649      	mov	r1, r9
 8009828:	4638      	mov	r0, r7
 800982a:	47c0      	blx	r8
 800982c:	3001      	adds	r0, #1
 800982e:	d103      	bne.n	8009838 <_printf_common+0xac>
 8009830:	f04f 30ff 	mov.w	r0, #4294967295
 8009834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009838:	3501      	adds	r5, #1
 800983a:	e7c6      	b.n	80097ca <_printf_common+0x3e>
 800983c:	18e1      	adds	r1, r4, r3
 800983e:	1c5a      	adds	r2, r3, #1
 8009840:	2030      	movs	r0, #48	; 0x30
 8009842:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009846:	4422      	add	r2, r4
 8009848:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800984c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009850:	3302      	adds	r3, #2
 8009852:	e7c7      	b.n	80097e4 <_printf_common+0x58>
 8009854:	2301      	movs	r3, #1
 8009856:	4622      	mov	r2, r4
 8009858:	4649      	mov	r1, r9
 800985a:	4638      	mov	r0, r7
 800985c:	47c0      	blx	r8
 800985e:	3001      	adds	r0, #1
 8009860:	d0e6      	beq.n	8009830 <_printf_common+0xa4>
 8009862:	3601      	adds	r6, #1
 8009864:	e7d9      	b.n	800981a <_printf_common+0x8e>
	...

08009868 <_printf_i>:
 8009868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800986c:	7e0f      	ldrb	r7, [r1, #24]
 800986e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009870:	2f78      	cmp	r7, #120	; 0x78
 8009872:	4691      	mov	r9, r2
 8009874:	4680      	mov	r8, r0
 8009876:	460c      	mov	r4, r1
 8009878:	469a      	mov	sl, r3
 800987a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800987e:	d807      	bhi.n	8009890 <_printf_i+0x28>
 8009880:	2f62      	cmp	r7, #98	; 0x62
 8009882:	d80a      	bhi.n	800989a <_printf_i+0x32>
 8009884:	2f00      	cmp	r7, #0
 8009886:	f000 80d8 	beq.w	8009a3a <_printf_i+0x1d2>
 800988a:	2f58      	cmp	r7, #88	; 0x58
 800988c:	f000 80a3 	beq.w	80099d6 <_printf_i+0x16e>
 8009890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009894:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009898:	e03a      	b.n	8009910 <_printf_i+0xa8>
 800989a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800989e:	2b15      	cmp	r3, #21
 80098a0:	d8f6      	bhi.n	8009890 <_printf_i+0x28>
 80098a2:	a101      	add	r1, pc, #4	; (adr r1, 80098a8 <_printf_i+0x40>)
 80098a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098a8:	08009901 	.word	0x08009901
 80098ac:	08009915 	.word	0x08009915
 80098b0:	08009891 	.word	0x08009891
 80098b4:	08009891 	.word	0x08009891
 80098b8:	08009891 	.word	0x08009891
 80098bc:	08009891 	.word	0x08009891
 80098c0:	08009915 	.word	0x08009915
 80098c4:	08009891 	.word	0x08009891
 80098c8:	08009891 	.word	0x08009891
 80098cc:	08009891 	.word	0x08009891
 80098d0:	08009891 	.word	0x08009891
 80098d4:	08009a21 	.word	0x08009a21
 80098d8:	08009945 	.word	0x08009945
 80098dc:	08009a03 	.word	0x08009a03
 80098e0:	08009891 	.word	0x08009891
 80098e4:	08009891 	.word	0x08009891
 80098e8:	08009a43 	.word	0x08009a43
 80098ec:	08009891 	.word	0x08009891
 80098f0:	08009945 	.word	0x08009945
 80098f4:	08009891 	.word	0x08009891
 80098f8:	08009891 	.word	0x08009891
 80098fc:	08009a0b 	.word	0x08009a0b
 8009900:	682b      	ldr	r3, [r5, #0]
 8009902:	1d1a      	adds	r2, r3, #4
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	602a      	str	r2, [r5, #0]
 8009908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800990c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009910:	2301      	movs	r3, #1
 8009912:	e0a3      	b.n	8009a5c <_printf_i+0x1f4>
 8009914:	6820      	ldr	r0, [r4, #0]
 8009916:	6829      	ldr	r1, [r5, #0]
 8009918:	0606      	lsls	r6, r0, #24
 800991a:	f101 0304 	add.w	r3, r1, #4
 800991e:	d50a      	bpl.n	8009936 <_printf_i+0xce>
 8009920:	680e      	ldr	r6, [r1, #0]
 8009922:	602b      	str	r3, [r5, #0]
 8009924:	2e00      	cmp	r6, #0
 8009926:	da03      	bge.n	8009930 <_printf_i+0xc8>
 8009928:	232d      	movs	r3, #45	; 0x2d
 800992a:	4276      	negs	r6, r6
 800992c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009930:	485e      	ldr	r0, [pc, #376]	; (8009aac <_printf_i+0x244>)
 8009932:	230a      	movs	r3, #10
 8009934:	e019      	b.n	800996a <_printf_i+0x102>
 8009936:	680e      	ldr	r6, [r1, #0]
 8009938:	602b      	str	r3, [r5, #0]
 800993a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800993e:	bf18      	it	ne
 8009940:	b236      	sxthne	r6, r6
 8009942:	e7ef      	b.n	8009924 <_printf_i+0xbc>
 8009944:	682b      	ldr	r3, [r5, #0]
 8009946:	6820      	ldr	r0, [r4, #0]
 8009948:	1d19      	adds	r1, r3, #4
 800994a:	6029      	str	r1, [r5, #0]
 800994c:	0601      	lsls	r1, r0, #24
 800994e:	d501      	bpl.n	8009954 <_printf_i+0xec>
 8009950:	681e      	ldr	r6, [r3, #0]
 8009952:	e002      	b.n	800995a <_printf_i+0xf2>
 8009954:	0646      	lsls	r6, r0, #25
 8009956:	d5fb      	bpl.n	8009950 <_printf_i+0xe8>
 8009958:	881e      	ldrh	r6, [r3, #0]
 800995a:	4854      	ldr	r0, [pc, #336]	; (8009aac <_printf_i+0x244>)
 800995c:	2f6f      	cmp	r7, #111	; 0x6f
 800995e:	bf0c      	ite	eq
 8009960:	2308      	moveq	r3, #8
 8009962:	230a      	movne	r3, #10
 8009964:	2100      	movs	r1, #0
 8009966:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800996a:	6865      	ldr	r5, [r4, #4]
 800996c:	60a5      	str	r5, [r4, #8]
 800996e:	2d00      	cmp	r5, #0
 8009970:	bfa2      	ittt	ge
 8009972:	6821      	ldrge	r1, [r4, #0]
 8009974:	f021 0104 	bicge.w	r1, r1, #4
 8009978:	6021      	strge	r1, [r4, #0]
 800997a:	b90e      	cbnz	r6, 8009980 <_printf_i+0x118>
 800997c:	2d00      	cmp	r5, #0
 800997e:	d04d      	beq.n	8009a1c <_printf_i+0x1b4>
 8009980:	4615      	mov	r5, r2
 8009982:	fbb6 f1f3 	udiv	r1, r6, r3
 8009986:	fb03 6711 	mls	r7, r3, r1, r6
 800998a:	5dc7      	ldrb	r7, [r0, r7]
 800998c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009990:	4637      	mov	r7, r6
 8009992:	42bb      	cmp	r3, r7
 8009994:	460e      	mov	r6, r1
 8009996:	d9f4      	bls.n	8009982 <_printf_i+0x11a>
 8009998:	2b08      	cmp	r3, #8
 800999a:	d10b      	bne.n	80099b4 <_printf_i+0x14c>
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	07de      	lsls	r6, r3, #31
 80099a0:	d508      	bpl.n	80099b4 <_printf_i+0x14c>
 80099a2:	6923      	ldr	r3, [r4, #16]
 80099a4:	6861      	ldr	r1, [r4, #4]
 80099a6:	4299      	cmp	r1, r3
 80099a8:	bfde      	ittt	le
 80099aa:	2330      	movle	r3, #48	; 0x30
 80099ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099b4:	1b52      	subs	r2, r2, r5
 80099b6:	6122      	str	r2, [r4, #16]
 80099b8:	f8cd a000 	str.w	sl, [sp]
 80099bc:	464b      	mov	r3, r9
 80099be:	aa03      	add	r2, sp, #12
 80099c0:	4621      	mov	r1, r4
 80099c2:	4640      	mov	r0, r8
 80099c4:	f7ff fee2 	bl	800978c <_printf_common>
 80099c8:	3001      	adds	r0, #1
 80099ca:	d14c      	bne.n	8009a66 <_printf_i+0x1fe>
 80099cc:	f04f 30ff 	mov.w	r0, #4294967295
 80099d0:	b004      	add	sp, #16
 80099d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d6:	4835      	ldr	r0, [pc, #212]	; (8009aac <_printf_i+0x244>)
 80099d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80099dc:	6829      	ldr	r1, [r5, #0]
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80099e4:	6029      	str	r1, [r5, #0]
 80099e6:	061d      	lsls	r5, r3, #24
 80099e8:	d514      	bpl.n	8009a14 <_printf_i+0x1ac>
 80099ea:	07df      	lsls	r7, r3, #31
 80099ec:	bf44      	itt	mi
 80099ee:	f043 0320 	orrmi.w	r3, r3, #32
 80099f2:	6023      	strmi	r3, [r4, #0]
 80099f4:	b91e      	cbnz	r6, 80099fe <_printf_i+0x196>
 80099f6:	6823      	ldr	r3, [r4, #0]
 80099f8:	f023 0320 	bic.w	r3, r3, #32
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	2310      	movs	r3, #16
 8009a00:	e7b0      	b.n	8009964 <_printf_i+0xfc>
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	f043 0320 	orr.w	r3, r3, #32
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	2378      	movs	r3, #120	; 0x78
 8009a0c:	4828      	ldr	r0, [pc, #160]	; (8009ab0 <_printf_i+0x248>)
 8009a0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a12:	e7e3      	b.n	80099dc <_printf_i+0x174>
 8009a14:	0659      	lsls	r1, r3, #25
 8009a16:	bf48      	it	mi
 8009a18:	b2b6      	uxthmi	r6, r6
 8009a1a:	e7e6      	b.n	80099ea <_printf_i+0x182>
 8009a1c:	4615      	mov	r5, r2
 8009a1e:	e7bb      	b.n	8009998 <_printf_i+0x130>
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	6826      	ldr	r6, [r4, #0]
 8009a24:	6961      	ldr	r1, [r4, #20]
 8009a26:	1d18      	adds	r0, r3, #4
 8009a28:	6028      	str	r0, [r5, #0]
 8009a2a:	0635      	lsls	r5, r6, #24
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	d501      	bpl.n	8009a34 <_printf_i+0x1cc>
 8009a30:	6019      	str	r1, [r3, #0]
 8009a32:	e002      	b.n	8009a3a <_printf_i+0x1d2>
 8009a34:	0670      	lsls	r0, r6, #25
 8009a36:	d5fb      	bpl.n	8009a30 <_printf_i+0x1c8>
 8009a38:	8019      	strh	r1, [r3, #0]
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	6123      	str	r3, [r4, #16]
 8009a3e:	4615      	mov	r5, r2
 8009a40:	e7ba      	b.n	80099b8 <_printf_i+0x150>
 8009a42:	682b      	ldr	r3, [r5, #0]
 8009a44:	1d1a      	adds	r2, r3, #4
 8009a46:	602a      	str	r2, [r5, #0]
 8009a48:	681d      	ldr	r5, [r3, #0]
 8009a4a:	6862      	ldr	r2, [r4, #4]
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	4628      	mov	r0, r5
 8009a50:	f7f6 fbf6 	bl	8000240 <memchr>
 8009a54:	b108      	cbz	r0, 8009a5a <_printf_i+0x1f2>
 8009a56:	1b40      	subs	r0, r0, r5
 8009a58:	6060      	str	r0, [r4, #4]
 8009a5a:	6863      	ldr	r3, [r4, #4]
 8009a5c:	6123      	str	r3, [r4, #16]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a64:	e7a8      	b.n	80099b8 <_printf_i+0x150>
 8009a66:	6923      	ldr	r3, [r4, #16]
 8009a68:	462a      	mov	r2, r5
 8009a6a:	4649      	mov	r1, r9
 8009a6c:	4640      	mov	r0, r8
 8009a6e:	47d0      	blx	sl
 8009a70:	3001      	adds	r0, #1
 8009a72:	d0ab      	beq.n	80099cc <_printf_i+0x164>
 8009a74:	6823      	ldr	r3, [r4, #0]
 8009a76:	079b      	lsls	r3, r3, #30
 8009a78:	d413      	bmi.n	8009aa2 <_printf_i+0x23a>
 8009a7a:	68e0      	ldr	r0, [r4, #12]
 8009a7c:	9b03      	ldr	r3, [sp, #12]
 8009a7e:	4298      	cmp	r0, r3
 8009a80:	bfb8      	it	lt
 8009a82:	4618      	movlt	r0, r3
 8009a84:	e7a4      	b.n	80099d0 <_printf_i+0x168>
 8009a86:	2301      	movs	r3, #1
 8009a88:	4632      	mov	r2, r6
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	47d0      	blx	sl
 8009a90:	3001      	adds	r0, #1
 8009a92:	d09b      	beq.n	80099cc <_printf_i+0x164>
 8009a94:	3501      	adds	r5, #1
 8009a96:	68e3      	ldr	r3, [r4, #12]
 8009a98:	9903      	ldr	r1, [sp, #12]
 8009a9a:	1a5b      	subs	r3, r3, r1
 8009a9c:	42ab      	cmp	r3, r5
 8009a9e:	dcf2      	bgt.n	8009a86 <_printf_i+0x21e>
 8009aa0:	e7eb      	b.n	8009a7a <_printf_i+0x212>
 8009aa2:	2500      	movs	r5, #0
 8009aa4:	f104 0619 	add.w	r6, r4, #25
 8009aa8:	e7f5      	b.n	8009a96 <_printf_i+0x22e>
 8009aaa:	bf00      	nop
 8009aac:	0800a822 	.word	0x0800a822
 8009ab0:	0800a833 	.word	0x0800a833

08009ab4 <_sbrk_r>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	4d06      	ldr	r5, [pc, #24]	; (8009ad0 <_sbrk_r+0x1c>)
 8009ab8:	2300      	movs	r3, #0
 8009aba:	4604      	mov	r4, r0
 8009abc:	4608      	mov	r0, r1
 8009abe:	602b      	str	r3, [r5, #0]
 8009ac0:	f7f7 fb12 	bl	80010e8 <_sbrk>
 8009ac4:	1c43      	adds	r3, r0, #1
 8009ac6:	d102      	bne.n	8009ace <_sbrk_r+0x1a>
 8009ac8:	682b      	ldr	r3, [r5, #0]
 8009aca:	b103      	cbz	r3, 8009ace <_sbrk_r+0x1a>
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	bd38      	pop	{r3, r4, r5, pc}
 8009ad0:	200002d0 	.word	0x200002d0

08009ad4 <__swbuf_r>:
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	460e      	mov	r6, r1
 8009ad8:	4614      	mov	r4, r2
 8009ada:	4605      	mov	r5, r0
 8009adc:	b118      	cbz	r0, 8009ae6 <__swbuf_r+0x12>
 8009ade:	6983      	ldr	r3, [r0, #24]
 8009ae0:	b90b      	cbnz	r3, 8009ae6 <__swbuf_r+0x12>
 8009ae2:	f000 f9d9 	bl	8009e98 <__sinit>
 8009ae6:	4b21      	ldr	r3, [pc, #132]	; (8009b6c <__swbuf_r+0x98>)
 8009ae8:	429c      	cmp	r4, r3
 8009aea:	d12b      	bne.n	8009b44 <__swbuf_r+0x70>
 8009aec:	686c      	ldr	r4, [r5, #4]
 8009aee:	69a3      	ldr	r3, [r4, #24]
 8009af0:	60a3      	str	r3, [r4, #8]
 8009af2:	89a3      	ldrh	r3, [r4, #12]
 8009af4:	071a      	lsls	r2, r3, #28
 8009af6:	d52f      	bpl.n	8009b58 <__swbuf_r+0x84>
 8009af8:	6923      	ldr	r3, [r4, #16]
 8009afa:	b36b      	cbz	r3, 8009b58 <__swbuf_r+0x84>
 8009afc:	6923      	ldr	r3, [r4, #16]
 8009afe:	6820      	ldr	r0, [r4, #0]
 8009b00:	1ac0      	subs	r0, r0, r3
 8009b02:	6963      	ldr	r3, [r4, #20]
 8009b04:	b2f6      	uxtb	r6, r6
 8009b06:	4283      	cmp	r3, r0
 8009b08:	4637      	mov	r7, r6
 8009b0a:	dc04      	bgt.n	8009b16 <__swbuf_r+0x42>
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	4628      	mov	r0, r5
 8009b10:	f000 f92e 	bl	8009d70 <_fflush_r>
 8009b14:	bb30      	cbnz	r0, 8009b64 <__swbuf_r+0x90>
 8009b16:	68a3      	ldr	r3, [r4, #8]
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	60a3      	str	r3, [r4, #8]
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	6022      	str	r2, [r4, #0]
 8009b22:	701e      	strb	r6, [r3, #0]
 8009b24:	6963      	ldr	r3, [r4, #20]
 8009b26:	3001      	adds	r0, #1
 8009b28:	4283      	cmp	r3, r0
 8009b2a:	d004      	beq.n	8009b36 <__swbuf_r+0x62>
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	07db      	lsls	r3, r3, #31
 8009b30:	d506      	bpl.n	8009b40 <__swbuf_r+0x6c>
 8009b32:	2e0a      	cmp	r6, #10
 8009b34:	d104      	bne.n	8009b40 <__swbuf_r+0x6c>
 8009b36:	4621      	mov	r1, r4
 8009b38:	4628      	mov	r0, r5
 8009b3a:	f000 f919 	bl	8009d70 <_fflush_r>
 8009b3e:	b988      	cbnz	r0, 8009b64 <__swbuf_r+0x90>
 8009b40:	4638      	mov	r0, r7
 8009b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b44:	4b0a      	ldr	r3, [pc, #40]	; (8009b70 <__swbuf_r+0x9c>)
 8009b46:	429c      	cmp	r4, r3
 8009b48:	d101      	bne.n	8009b4e <__swbuf_r+0x7a>
 8009b4a:	68ac      	ldr	r4, [r5, #8]
 8009b4c:	e7cf      	b.n	8009aee <__swbuf_r+0x1a>
 8009b4e:	4b09      	ldr	r3, [pc, #36]	; (8009b74 <__swbuf_r+0xa0>)
 8009b50:	429c      	cmp	r4, r3
 8009b52:	bf08      	it	eq
 8009b54:	68ec      	ldreq	r4, [r5, #12]
 8009b56:	e7ca      	b.n	8009aee <__swbuf_r+0x1a>
 8009b58:	4621      	mov	r1, r4
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	f000 f80c 	bl	8009b78 <__swsetup_r>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d0cb      	beq.n	8009afc <__swbuf_r+0x28>
 8009b64:	f04f 37ff 	mov.w	r7, #4294967295
 8009b68:	e7ea      	b.n	8009b40 <__swbuf_r+0x6c>
 8009b6a:	bf00      	nop
 8009b6c:	0800a864 	.word	0x0800a864
 8009b70:	0800a884 	.word	0x0800a884
 8009b74:	0800a844 	.word	0x0800a844

08009b78 <__swsetup_r>:
 8009b78:	4b32      	ldr	r3, [pc, #200]	; (8009c44 <__swsetup_r+0xcc>)
 8009b7a:	b570      	push	{r4, r5, r6, lr}
 8009b7c:	681d      	ldr	r5, [r3, #0]
 8009b7e:	4606      	mov	r6, r0
 8009b80:	460c      	mov	r4, r1
 8009b82:	b125      	cbz	r5, 8009b8e <__swsetup_r+0x16>
 8009b84:	69ab      	ldr	r3, [r5, #24]
 8009b86:	b913      	cbnz	r3, 8009b8e <__swsetup_r+0x16>
 8009b88:	4628      	mov	r0, r5
 8009b8a:	f000 f985 	bl	8009e98 <__sinit>
 8009b8e:	4b2e      	ldr	r3, [pc, #184]	; (8009c48 <__swsetup_r+0xd0>)
 8009b90:	429c      	cmp	r4, r3
 8009b92:	d10f      	bne.n	8009bb4 <__swsetup_r+0x3c>
 8009b94:	686c      	ldr	r4, [r5, #4]
 8009b96:	89a3      	ldrh	r3, [r4, #12]
 8009b98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b9c:	0719      	lsls	r1, r3, #28
 8009b9e:	d42c      	bmi.n	8009bfa <__swsetup_r+0x82>
 8009ba0:	06dd      	lsls	r5, r3, #27
 8009ba2:	d411      	bmi.n	8009bc8 <__swsetup_r+0x50>
 8009ba4:	2309      	movs	r3, #9
 8009ba6:	6033      	str	r3, [r6, #0]
 8009ba8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009bac:	81a3      	strh	r3, [r4, #12]
 8009bae:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb2:	e03e      	b.n	8009c32 <__swsetup_r+0xba>
 8009bb4:	4b25      	ldr	r3, [pc, #148]	; (8009c4c <__swsetup_r+0xd4>)
 8009bb6:	429c      	cmp	r4, r3
 8009bb8:	d101      	bne.n	8009bbe <__swsetup_r+0x46>
 8009bba:	68ac      	ldr	r4, [r5, #8]
 8009bbc:	e7eb      	b.n	8009b96 <__swsetup_r+0x1e>
 8009bbe:	4b24      	ldr	r3, [pc, #144]	; (8009c50 <__swsetup_r+0xd8>)
 8009bc0:	429c      	cmp	r4, r3
 8009bc2:	bf08      	it	eq
 8009bc4:	68ec      	ldreq	r4, [r5, #12]
 8009bc6:	e7e6      	b.n	8009b96 <__swsetup_r+0x1e>
 8009bc8:	0758      	lsls	r0, r3, #29
 8009bca:	d512      	bpl.n	8009bf2 <__swsetup_r+0x7a>
 8009bcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bce:	b141      	cbz	r1, 8009be2 <__swsetup_r+0x6a>
 8009bd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bd4:	4299      	cmp	r1, r3
 8009bd6:	d002      	beq.n	8009bde <__swsetup_r+0x66>
 8009bd8:	4630      	mov	r0, r6
 8009bda:	f7ff fa41 	bl	8009060 <_free_r>
 8009bde:	2300      	movs	r3, #0
 8009be0:	6363      	str	r3, [r4, #52]	; 0x34
 8009be2:	89a3      	ldrh	r3, [r4, #12]
 8009be4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009be8:	81a3      	strh	r3, [r4, #12]
 8009bea:	2300      	movs	r3, #0
 8009bec:	6063      	str	r3, [r4, #4]
 8009bee:	6923      	ldr	r3, [r4, #16]
 8009bf0:	6023      	str	r3, [r4, #0]
 8009bf2:	89a3      	ldrh	r3, [r4, #12]
 8009bf4:	f043 0308 	orr.w	r3, r3, #8
 8009bf8:	81a3      	strh	r3, [r4, #12]
 8009bfa:	6923      	ldr	r3, [r4, #16]
 8009bfc:	b94b      	cbnz	r3, 8009c12 <__swsetup_r+0x9a>
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c08:	d003      	beq.n	8009c12 <__swsetup_r+0x9a>
 8009c0a:	4621      	mov	r1, r4
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	f000 fa09 	bl	800a024 <__smakebuf_r>
 8009c12:	89a0      	ldrh	r0, [r4, #12]
 8009c14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c18:	f010 0301 	ands.w	r3, r0, #1
 8009c1c:	d00a      	beq.n	8009c34 <__swsetup_r+0xbc>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	60a3      	str	r3, [r4, #8]
 8009c22:	6963      	ldr	r3, [r4, #20]
 8009c24:	425b      	negs	r3, r3
 8009c26:	61a3      	str	r3, [r4, #24]
 8009c28:	6923      	ldr	r3, [r4, #16]
 8009c2a:	b943      	cbnz	r3, 8009c3e <__swsetup_r+0xc6>
 8009c2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c30:	d1ba      	bne.n	8009ba8 <__swsetup_r+0x30>
 8009c32:	bd70      	pop	{r4, r5, r6, pc}
 8009c34:	0781      	lsls	r1, r0, #30
 8009c36:	bf58      	it	pl
 8009c38:	6963      	ldrpl	r3, [r4, #20]
 8009c3a:	60a3      	str	r3, [r4, #8]
 8009c3c:	e7f4      	b.n	8009c28 <__swsetup_r+0xb0>
 8009c3e:	2000      	movs	r0, #0
 8009c40:	e7f7      	b.n	8009c32 <__swsetup_r+0xba>
 8009c42:	bf00      	nop
 8009c44:	20000010 	.word	0x20000010
 8009c48:	0800a864 	.word	0x0800a864
 8009c4c:	0800a884 	.word	0x0800a884
 8009c50:	0800a844 	.word	0x0800a844

08009c54 <abort>:
 8009c54:	b508      	push	{r3, lr}
 8009c56:	2006      	movs	r0, #6
 8009c58:	f000 fab0 	bl	800a1bc <raise>
 8009c5c:	2001      	movs	r0, #1
 8009c5e:	f7f7 f9cb 	bl	8000ff8 <_exit>
	...

08009c64 <__sflush_r>:
 8009c64:	898a      	ldrh	r2, [r1, #12]
 8009c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c6a:	4605      	mov	r5, r0
 8009c6c:	0710      	lsls	r0, r2, #28
 8009c6e:	460c      	mov	r4, r1
 8009c70:	d458      	bmi.n	8009d24 <__sflush_r+0xc0>
 8009c72:	684b      	ldr	r3, [r1, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	dc05      	bgt.n	8009c84 <__sflush_r+0x20>
 8009c78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	dc02      	bgt.n	8009c84 <__sflush_r+0x20>
 8009c7e:	2000      	movs	r0, #0
 8009c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c86:	2e00      	cmp	r6, #0
 8009c88:	d0f9      	beq.n	8009c7e <__sflush_r+0x1a>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c90:	682f      	ldr	r7, [r5, #0]
 8009c92:	602b      	str	r3, [r5, #0]
 8009c94:	d032      	beq.n	8009cfc <__sflush_r+0x98>
 8009c96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c98:	89a3      	ldrh	r3, [r4, #12]
 8009c9a:	075a      	lsls	r2, r3, #29
 8009c9c:	d505      	bpl.n	8009caa <__sflush_r+0x46>
 8009c9e:	6863      	ldr	r3, [r4, #4]
 8009ca0:	1ac0      	subs	r0, r0, r3
 8009ca2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ca4:	b10b      	cbz	r3, 8009caa <__sflush_r+0x46>
 8009ca6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ca8:	1ac0      	subs	r0, r0, r3
 8009caa:	2300      	movs	r3, #0
 8009cac:	4602      	mov	r2, r0
 8009cae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cb0:	6a21      	ldr	r1, [r4, #32]
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	47b0      	blx	r6
 8009cb6:	1c43      	adds	r3, r0, #1
 8009cb8:	89a3      	ldrh	r3, [r4, #12]
 8009cba:	d106      	bne.n	8009cca <__sflush_r+0x66>
 8009cbc:	6829      	ldr	r1, [r5, #0]
 8009cbe:	291d      	cmp	r1, #29
 8009cc0:	d82c      	bhi.n	8009d1c <__sflush_r+0xb8>
 8009cc2:	4a2a      	ldr	r2, [pc, #168]	; (8009d6c <__sflush_r+0x108>)
 8009cc4:	40ca      	lsrs	r2, r1
 8009cc6:	07d6      	lsls	r6, r2, #31
 8009cc8:	d528      	bpl.n	8009d1c <__sflush_r+0xb8>
 8009cca:	2200      	movs	r2, #0
 8009ccc:	6062      	str	r2, [r4, #4]
 8009cce:	04d9      	lsls	r1, r3, #19
 8009cd0:	6922      	ldr	r2, [r4, #16]
 8009cd2:	6022      	str	r2, [r4, #0]
 8009cd4:	d504      	bpl.n	8009ce0 <__sflush_r+0x7c>
 8009cd6:	1c42      	adds	r2, r0, #1
 8009cd8:	d101      	bne.n	8009cde <__sflush_r+0x7a>
 8009cda:	682b      	ldr	r3, [r5, #0]
 8009cdc:	b903      	cbnz	r3, 8009ce0 <__sflush_r+0x7c>
 8009cde:	6560      	str	r0, [r4, #84]	; 0x54
 8009ce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ce2:	602f      	str	r7, [r5, #0]
 8009ce4:	2900      	cmp	r1, #0
 8009ce6:	d0ca      	beq.n	8009c7e <__sflush_r+0x1a>
 8009ce8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cec:	4299      	cmp	r1, r3
 8009cee:	d002      	beq.n	8009cf6 <__sflush_r+0x92>
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	f7ff f9b5 	bl	8009060 <_free_r>
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	6360      	str	r0, [r4, #52]	; 0x34
 8009cfa:	e7c1      	b.n	8009c80 <__sflush_r+0x1c>
 8009cfc:	6a21      	ldr	r1, [r4, #32]
 8009cfe:	2301      	movs	r3, #1
 8009d00:	4628      	mov	r0, r5
 8009d02:	47b0      	blx	r6
 8009d04:	1c41      	adds	r1, r0, #1
 8009d06:	d1c7      	bne.n	8009c98 <__sflush_r+0x34>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d0c4      	beq.n	8009c98 <__sflush_r+0x34>
 8009d0e:	2b1d      	cmp	r3, #29
 8009d10:	d001      	beq.n	8009d16 <__sflush_r+0xb2>
 8009d12:	2b16      	cmp	r3, #22
 8009d14:	d101      	bne.n	8009d1a <__sflush_r+0xb6>
 8009d16:	602f      	str	r7, [r5, #0]
 8009d18:	e7b1      	b.n	8009c7e <__sflush_r+0x1a>
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d20:	81a3      	strh	r3, [r4, #12]
 8009d22:	e7ad      	b.n	8009c80 <__sflush_r+0x1c>
 8009d24:	690f      	ldr	r7, [r1, #16]
 8009d26:	2f00      	cmp	r7, #0
 8009d28:	d0a9      	beq.n	8009c7e <__sflush_r+0x1a>
 8009d2a:	0793      	lsls	r3, r2, #30
 8009d2c:	680e      	ldr	r6, [r1, #0]
 8009d2e:	bf08      	it	eq
 8009d30:	694b      	ldreq	r3, [r1, #20]
 8009d32:	600f      	str	r7, [r1, #0]
 8009d34:	bf18      	it	ne
 8009d36:	2300      	movne	r3, #0
 8009d38:	eba6 0807 	sub.w	r8, r6, r7
 8009d3c:	608b      	str	r3, [r1, #8]
 8009d3e:	f1b8 0f00 	cmp.w	r8, #0
 8009d42:	dd9c      	ble.n	8009c7e <__sflush_r+0x1a>
 8009d44:	6a21      	ldr	r1, [r4, #32]
 8009d46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d48:	4643      	mov	r3, r8
 8009d4a:	463a      	mov	r2, r7
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b0      	blx	r6
 8009d50:	2800      	cmp	r0, #0
 8009d52:	dc06      	bgt.n	8009d62 <__sflush_r+0xfe>
 8009d54:	89a3      	ldrh	r3, [r4, #12]
 8009d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d5a:	81a3      	strh	r3, [r4, #12]
 8009d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d60:	e78e      	b.n	8009c80 <__sflush_r+0x1c>
 8009d62:	4407      	add	r7, r0
 8009d64:	eba8 0800 	sub.w	r8, r8, r0
 8009d68:	e7e9      	b.n	8009d3e <__sflush_r+0xda>
 8009d6a:	bf00      	nop
 8009d6c:	20400001 	.word	0x20400001

08009d70 <_fflush_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	690b      	ldr	r3, [r1, #16]
 8009d74:	4605      	mov	r5, r0
 8009d76:	460c      	mov	r4, r1
 8009d78:	b913      	cbnz	r3, 8009d80 <_fflush_r+0x10>
 8009d7a:	2500      	movs	r5, #0
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	bd38      	pop	{r3, r4, r5, pc}
 8009d80:	b118      	cbz	r0, 8009d8a <_fflush_r+0x1a>
 8009d82:	6983      	ldr	r3, [r0, #24]
 8009d84:	b90b      	cbnz	r3, 8009d8a <_fflush_r+0x1a>
 8009d86:	f000 f887 	bl	8009e98 <__sinit>
 8009d8a:	4b14      	ldr	r3, [pc, #80]	; (8009ddc <_fflush_r+0x6c>)
 8009d8c:	429c      	cmp	r4, r3
 8009d8e:	d11b      	bne.n	8009dc8 <_fflush_r+0x58>
 8009d90:	686c      	ldr	r4, [r5, #4]
 8009d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d0ef      	beq.n	8009d7a <_fflush_r+0xa>
 8009d9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d9c:	07d0      	lsls	r0, r2, #31
 8009d9e:	d404      	bmi.n	8009daa <_fflush_r+0x3a>
 8009da0:	0599      	lsls	r1, r3, #22
 8009da2:	d402      	bmi.n	8009daa <_fflush_r+0x3a>
 8009da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009da6:	f000 f915 	bl	8009fd4 <__retarget_lock_acquire_recursive>
 8009daa:	4628      	mov	r0, r5
 8009dac:	4621      	mov	r1, r4
 8009dae:	f7ff ff59 	bl	8009c64 <__sflush_r>
 8009db2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009db4:	07da      	lsls	r2, r3, #31
 8009db6:	4605      	mov	r5, r0
 8009db8:	d4e0      	bmi.n	8009d7c <_fflush_r+0xc>
 8009dba:	89a3      	ldrh	r3, [r4, #12]
 8009dbc:	059b      	lsls	r3, r3, #22
 8009dbe:	d4dd      	bmi.n	8009d7c <_fflush_r+0xc>
 8009dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dc2:	f000 f908 	bl	8009fd6 <__retarget_lock_release_recursive>
 8009dc6:	e7d9      	b.n	8009d7c <_fflush_r+0xc>
 8009dc8:	4b05      	ldr	r3, [pc, #20]	; (8009de0 <_fflush_r+0x70>)
 8009dca:	429c      	cmp	r4, r3
 8009dcc:	d101      	bne.n	8009dd2 <_fflush_r+0x62>
 8009dce:	68ac      	ldr	r4, [r5, #8]
 8009dd0:	e7df      	b.n	8009d92 <_fflush_r+0x22>
 8009dd2:	4b04      	ldr	r3, [pc, #16]	; (8009de4 <_fflush_r+0x74>)
 8009dd4:	429c      	cmp	r4, r3
 8009dd6:	bf08      	it	eq
 8009dd8:	68ec      	ldreq	r4, [r5, #12]
 8009dda:	e7da      	b.n	8009d92 <_fflush_r+0x22>
 8009ddc:	0800a864 	.word	0x0800a864
 8009de0:	0800a884 	.word	0x0800a884
 8009de4:	0800a844 	.word	0x0800a844

08009de8 <std>:
 8009de8:	2300      	movs	r3, #0
 8009dea:	b510      	push	{r4, lr}
 8009dec:	4604      	mov	r4, r0
 8009dee:	e9c0 3300 	strd	r3, r3, [r0]
 8009df2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009df6:	6083      	str	r3, [r0, #8]
 8009df8:	8181      	strh	r1, [r0, #12]
 8009dfa:	6643      	str	r3, [r0, #100]	; 0x64
 8009dfc:	81c2      	strh	r2, [r0, #14]
 8009dfe:	6183      	str	r3, [r0, #24]
 8009e00:	4619      	mov	r1, r3
 8009e02:	2208      	movs	r2, #8
 8009e04:	305c      	adds	r0, #92	; 0x5c
 8009e06:	f7fe ffe3 	bl	8008dd0 <memset>
 8009e0a:	4b05      	ldr	r3, [pc, #20]	; (8009e20 <std+0x38>)
 8009e0c:	6263      	str	r3, [r4, #36]	; 0x24
 8009e0e:	4b05      	ldr	r3, [pc, #20]	; (8009e24 <std+0x3c>)
 8009e10:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e12:	4b05      	ldr	r3, [pc, #20]	; (8009e28 <std+0x40>)
 8009e14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e16:	4b05      	ldr	r3, [pc, #20]	; (8009e2c <std+0x44>)
 8009e18:	6224      	str	r4, [r4, #32]
 8009e1a:	6323      	str	r3, [r4, #48]	; 0x30
 8009e1c:	bd10      	pop	{r4, pc}
 8009e1e:	bf00      	nop
 8009e20:	0800a1f5 	.word	0x0800a1f5
 8009e24:	0800a217 	.word	0x0800a217
 8009e28:	0800a24f 	.word	0x0800a24f
 8009e2c:	0800a273 	.word	0x0800a273

08009e30 <_cleanup_r>:
 8009e30:	4901      	ldr	r1, [pc, #4]	; (8009e38 <_cleanup_r+0x8>)
 8009e32:	f000 b8af 	b.w	8009f94 <_fwalk_reent>
 8009e36:	bf00      	nop
 8009e38:	08009d71 	.word	0x08009d71

08009e3c <__sfmoreglue>:
 8009e3c:	b570      	push	{r4, r5, r6, lr}
 8009e3e:	2268      	movs	r2, #104	; 0x68
 8009e40:	1e4d      	subs	r5, r1, #1
 8009e42:	4355      	muls	r5, r2
 8009e44:	460e      	mov	r6, r1
 8009e46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e4a:	f7ff f975 	bl	8009138 <_malloc_r>
 8009e4e:	4604      	mov	r4, r0
 8009e50:	b140      	cbz	r0, 8009e64 <__sfmoreglue+0x28>
 8009e52:	2100      	movs	r1, #0
 8009e54:	e9c0 1600 	strd	r1, r6, [r0]
 8009e58:	300c      	adds	r0, #12
 8009e5a:	60a0      	str	r0, [r4, #8]
 8009e5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e60:	f7fe ffb6 	bl	8008dd0 <memset>
 8009e64:	4620      	mov	r0, r4
 8009e66:	bd70      	pop	{r4, r5, r6, pc}

08009e68 <__sfp_lock_acquire>:
 8009e68:	4801      	ldr	r0, [pc, #4]	; (8009e70 <__sfp_lock_acquire+0x8>)
 8009e6a:	f000 b8b3 	b.w	8009fd4 <__retarget_lock_acquire_recursive>
 8009e6e:	bf00      	nop
 8009e70:	200002cd 	.word	0x200002cd

08009e74 <__sfp_lock_release>:
 8009e74:	4801      	ldr	r0, [pc, #4]	; (8009e7c <__sfp_lock_release+0x8>)
 8009e76:	f000 b8ae 	b.w	8009fd6 <__retarget_lock_release_recursive>
 8009e7a:	bf00      	nop
 8009e7c:	200002cd 	.word	0x200002cd

08009e80 <__sinit_lock_acquire>:
 8009e80:	4801      	ldr	r0, [pc, #4]	; (8009e88 <__sinit_lock_acquire+0x8>)
 8009e82:	f000 b8a7 	b.w	8009fd4 <__retarget_lock_acquire_recursive>
 8009e86:	bf00      	nop
 8009e88:	200002ce 	.word	0x200002ce

08009e8c <__sinit_lock_release>:
 8009e8c:	4801      	ldr	r0, [pc, #4]	; (8009e94 <__sinit_lock_release+0x8>)
 8009e8e:	f000 b8a2 	b.w	8009fd6 <__retarget_lock_release_recursive>
 8009e92:	bf00      	nop
 8009e94:	200002ce 	.word	0x200002ce

08009e98 <__sinit>:
 8009e98:	b510      	push	{r4, lr}
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	f7ff fff0 	bl	8009e80 <__sinit_lock_acquire>
 8009ea0:	69a3      	ldr	r3, [r4, #24]
 8009ea2:	b11b      	cbz	r3, 8009eac <__sinit+0x14>
 8009ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ea8:	f7ff bff0 	b.w	8009e8c <__sinit_lock_release>
 8009eac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009eb0:	6523      	str	r3, [r4, #80]	; 0x50
 8009eb2:	4b13      	ldr	r3, [pc, #76]	; (8009f00 <__sinit+0x68>)
 8009eb4:	4a13      	ldr	r2, [pc, #76]	; (8009f04 <__sinit+0x6c>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009eba:	42a3      	cmp	r3, r4
 8009ebc:	bf04      	itt	eq
 8009ebe:	2301      	moveq	r3, #1
 8009ec0:	61a3      	streq	r3, [r4, #24]
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f000 f820 	bl	8009f08 <__sfp>
 8009ec8:	6060      	str	r0, [r4, #4]
 8009eca:	4620      	mov	r0, r4
 8009ecc:	f000 f81c 	bl	8009f08 <__sfp>
 8009ed0:	60a0      	str	r0, [r4, #8]
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	f000 f818 	bl	8009f08 <__sfp>
 8009ed8:	2200      	movs	r2, #0
 8009eda:	60e0      	str	r0, [r4, #12]
 8009edc:	2104      	movs	r1, #4
 8009ede:	6860      	ldr	r0, [r4, #4]
 8009ee0:	f7ff ff82 	bl	8009de8 <std>
 8009ee4:	68a0      	ldr	r0, [r4, #8]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	2109      	movs	r1, #9
 8009eea:	f7ff ff7d 	bl	8009de8 <std>
 8009eee:	68e0      	ldr	r0, [r4, #12]
 8009ef0:	2202      	movs	r2, #2
 8009ef2:	2112      	movs	r1, #18
 8009ef4:	f7ff ff78 	bl	8009de8 <std>
 8009ef8:	2301      	movs	r3, #1
 8009efa:	61a3      	str	r3, [r4, #24]
 8009efc:	e7d2      	b.n	8009ea4 <__sinit+0xc>
 8009efe:	bf00      	nop
 8009f00:	0800a65c 	.word	0x0800a65c
 8009f04:	08009e31 	.word	0x08009e31

08009f08 <__sfp>:
 8009f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0a:	4607      	mov	r7, r0
 8009f0c:	f7ff ffac 	bl	8009e68 <__sfp_lock_acquire>
 8009f10:	4b1e      	ldr	r3, [pc, #120]	; (8009f8c <__sfp+0x84>)
 8009f12:	681e      	ldr	r6, [r3, #0]
 8009f14:	69b3      	ldr	r3, [r6, #24]
 8009f16:	b913      	cbnz	r3, 8009f1e <__sfp+0x16>
 8009f18:	4630      	mov	r0, r6
 8009f1a:	f7ff ffbd 	bl	8009e98 <__sinit>
 8009f1e:	3648      	adds	r6, #72	; 0x48
 8009f20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f24:	3b01      	subs	r3, #1
 8009f26:	d503      	bpl.n	8009f30 <__sfp+0x28>
 8009f28:	6833      	ldr	r3, [r6, #0]
 8009f2a:	b30b      	cbz	r3, 8009f70 <__sfp+0x68>
 8009f2c:	6836      	ldr	r6, [r6, #0]
 8009f2e:	e7f7      	b.n	8009f20 <__sfp+0x18>
 8009f30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f34:	b9d5      	cbnz	r5, 8009f6c <__sfp+0x64>
 8009f36:	4b16      	ldr	r3, [pc, #88]	; (8009f90 <__sfp+0x88>)
 8009f38:	60e3      	str	r3, [r4, #12]
 8009f3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f3e:	6665      	str	r5, [r4, #100]	; 0x64
 8009f40:	f000 f847 	bl	8009fd2 <__retarget_lock_init_recursive>
 8009f44:	f7ff ff96 	bl	8009e74 <__sfp_lock_release>
 8009f48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f50:	6025      	str	r5, [r4, #0]
 8009f52:	61a5      	str	r5, [r4, #24]
 8009f54:	2208      	movs	r2, #8
 8009f56:	4629      	mov	r1, r5
 8009f58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f5c:	f7fe ff38 	bl	8008dd0 <memset>
 8009f60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f68:	4620      	mov	r0, r4
 8009f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f6c:	3468      	adds	r4, #104	; 0x68
 8009f6e:	e7d9      	b.n	8009f24 <__sfp+0x1c>
 8009f70:	2104      	movs	r1, #4
 8009f72:	4638      	mov	r0, r7
 8009f74:	f7ff ff62 	bl	8009e3c <__sfmoreglue>
 8009f78:	4604      	mov	r4, r0
 8009f7a:	6030      	str	r0, [r6, #0]
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d1d5      	bne.n	8009f2c <__sfp+0x24>
 8009f80:	f7ff ff78 	bl	8009e74 <__sfp_lock_release>
 8009f84:	230c      	movs	r3, #12
 8009f86:	603b      	str	r3, [r7, #0]
 8009f88:	e7ee      	b.n	8009f68 <__sfp+0x60>
 8009f8a:	bf00      	nop
 8009f8c:	0800a65c 	.word	0x0800a65c
 8009f90:	ffff0001 	.word	0xffff0001

08009f94 <_fwalk_reent>:
 8009f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f98:	4606      	mov	r6, r0
 8009f9a:	4688      	mov	r8, r1
 8009f9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009fa0:	2700      	movs	r7, #0
 8009fa2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fa6:	f1b9 0901 	subs.w	r9, r9, #1
 8009faa:	d505      	bpl.n	8009fb8 <_fwalk_reent+0x24>
 8009fac:	6824      	ldr	r4, [r4, #0]
 8009fae:	2c00      	cmp	r4, #0
 8009fb0:	d1f7      	bne.n	8009fa2 <_fwalk_reent+0xe>
 8009fb2:	4638      	mov	r0, r7
 8009fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fb8:	89ab      	ldrh	r3, [r5, #12]
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d907      	bls.n	8009fce <_fwalk_reent+0x3a>
 8009fbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	d003      	beq.n	8009fce <_fwalk_reent+0x3a>
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	4630      	mov	r0, r6
 8009fca:	47c0      	blx	r8
 8009fcc:	4307      	orrs	r7, r0
 8009fce:	3568      	adds	r5, #104	; 0x68
 8009fd0:	e7e9      	b.n	8009fa6 <_fwalk_reent+0x12>

08009fd2 <__retarget_lock_init_recursive>:
 8009fd2:	4770      	bx	lr

08009fd4 <__retarget_lock_acquire_recursive>:
 8009fd4:	4770      	bx	lr

08009fd6 <__retarget_lock_release_recursive>:
 8009fd6:	4770      	bx	lr

08009fd8 <__swhatbuf_r>:
 8009fd8:	b570      	push	{r4, r5, r6, lr}
 8009fda:	460e      	mov	r6, r1
 8009fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fe0:	2900      	cmp	r1, #0
 8009fe2:	b096      	sub	sp, #88	; 0x58
 8009fe4:	4614      	mov	r4, r2
 8009fe6:	461d      	mov	r5, r3
 8009fe8:	da08      	bge.n	8009ffc <__swhatbuf_r+0x24>
 8009fea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	602a      	str	r2, [r5, #0]
 8009ff2:	061a      	lsls	r2, r3, #24
 8009ff4:	d410      	bmi.n	800a018 <__swhatbuf_r+0x40>
 8009ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ffa:	e00e      	b.n	800a01a <__swhatbuf_r+0x42>
 8009ffc:	466a      	mov	r2, sp
 8009ffe:	f000 f95f 	bl	800a2c0 <_fstat_r>
 800a002:	2800      	cmp	r0, #0
 800a004:	dbf1      	blt.n	8009fea <__swhatbuf_r+0x12>
 800a006:	9a01      	ldr	r2, [sp, #4]
 800a008:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a00c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a010:	425a      	negs	r2, r3
 800a012:	415a      	adcs	r2, r3
 800a014:	602a      	str	r2, [r5, #0]
 800a016:	e7ee      	b.n	8009ff6 <__swhatbuf_r+0x1e>
 800a018:	2340      	movs	r3, #64	; 0x40
 800a01a:	2000      	movs	r0, #0
 800a01c:	6023      	str	r3, [r4, #0]
 800a01e:	b016      	add	sp, #88	; 0x58
 800a020:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a024 <__smakebuf_r>:
 800a024:	898b      	ldrh	r3, [r1, #12]
 800a026:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a028:	079d      	lsls	r5, r3, #30
 800a02a:	4606      	mov	r6, r0
 800a02c:	460c      	mov	r4, r1
 800a02e:	d507      	bpl.n	800a040 <__smakebuf_r+0x1c>
 800a030:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a034:	6023      	str	r3, [r4, #0]
 800a036:	6123      	str	r3, [r4, #16]
 800a038:	2301      	movs	r3, #1
 800a03a:	6163      	str	r3, [r4, #20]
 800a03c:	b002      	add	sp, #8
 800a03e:	bd70      	pop	{r4, r5, r6, pc}
 800a040:	ab01      	add	r3, sp, #4
 800a042:	466a      	mov	r2, sp
 800a044:	f7ff ffc8 	bl	8009fd8 <__swhatbuf_r>
 800a048:	9900      	ldr	r1, [sp, #0]
 800a04a:	4605      	mov	r5, r0
 800a04c:	4630      	mov	r0, r6
 800a04e:	f7ff f873 	bl	8009138 <_malloc_r>
 800a052:	b948      	cbnz	r0, 800a068 <__smakebuf_r+0x44>
 800a054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a058:	059a      	lsls	r2, r3, #22
 800a05a:	d4ef      	bmi.n	800a03c <__smakebuf_r+0x18>
 800a05c:	f023 0303 	bic.w	r3, r3, #3
 800a060:	f043 0302 	orr.w	r3, r3, #2
 800a064:	81a3      	strh	r3, [r4, #12]
 800a066:	e7e3      	b.n	800a030 <__smakebuf_r+0xc>
 800a068:	4b0d      	ldr	r3, [pc, #52]	; (800a0a0 <__smakebuf_r+0x7c>)
 800a06a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a06c:	89a3      	ldrh	r3, [r4, #12]
 800a06e:	6020      	str	r0, [r4, #0]
 800a070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a074:	81a3      	strh	r3, [r4, #12]
 800a076:	9b00      	ldr	r3, [sp, #0]
 800a078:	6163      	str	r3, [r4, #20]
 800a07a:	9b01      	ldr	r3, [sp, #4]
 800a07c:	6120      	str	r0, [r4, #16]
 800a07e:	b15b      	cbz	r3, 800a098 <__smakebuf_r+0x74>
 800a080:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a084:	4630      	mov	r0, r6
 800a086:	f000 f92d 	bl	800a2e4 <_isatty_r>
 800a08a:	b128      	cbz	r0, 800a098 <__smakebuf_r+0x74>
 800a08c:	89a3      	ldrh	r3, [r4, #12]
 800a08e:	f023 0303 	bic.w	r3, r3, #3
 800a092:	f043 0301 	orr.w	r3, r3, #1
 800a096:	81a3      	strh	r3, [r4, #12]
 800a098:	89a0      	ldrh	r0, [r4, #12]
 800a09a:	4305      	orrs	r5, r0
 800a09c:	81a5      	strh	r5, [r4, #12]
 800a09e:	e7cd      	b.n	800a03c <__smakebuf_r+0x18>
 800a0a0:	08009e31 	.word	0x08009e31

0800a0a4 <memcpy>:
 800a0a4:	440a      	add	r2, r1
 800a0a6:	4291      	cmp	r1, r2
 800a0a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0ac:	d100      	bne.n	800a0b0 <memcpy+0xc>
 800a0ae:	4770      	bx	lr
 800a0b0:	b510      	push	{r4, lr}
 800a0b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0ba:	4291      	cmp	r1, r2
 800a0bc:	d1f9      	bne.n	800a0b2 <memcpy+0xe>
 800a0be:	bd10      	pop	{r4, pc}

0800a0c0 <memmove>:
 800a0c0:	4288      	cmp	r0, r1
 800a0c2:	b510      	push	{r4, lr}
 800a0c4:	eb01 0402 	add.w	r4, r1, r2
 800a0c8:	d902      	bls.n	800a0d0 <memmove+0x10>
 800a0ca:	4284      	cmp	r4, r0
 800a0cc:	4623      	mov	r3, r4
 800a0ce:	d807      	bhi.n	800a0e0 <memmove+0x20>
 800a0d0:	1e43      	subs	r3, r0, #1
 800a0d2:	42a1      	cmp	r1, r4
 800a0d4:	d008      	beq.n	800a0e8 <memmove+0x28>
 800a0d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0de:	e7f8      	b.n	800a0d2 <memmove+0x12>
 800a0e0:	4402      	add	r2, r0
 800a0e2:	4601      	mov	r1, r0
 800a0e4:	428a      	cmp	r2, r1
 800a0e6:	d100      	bne.n	800a0ea <memmove+0x2a>
 800a0e8:	bd10      	pop	{r4, pc}
 800a0ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0f2:	e7f7      	b.n	800a0e4 <memmove+0x24>

0800a0f4 <__malloc_lock>:
 800a0f4:	4801      	ldr	r0, [pc, #4]	; (800a0fc <__malloc_lock+0x8>)
 800a0f6:	f7ff bf6d 	b.w	8009fd4 <__retarget_lock_acquire_recursive>
 800a0fa:	bf00      	nop
 800a0fc:	200002cc 	.word	0x200002cc

0800a100 <__malloc_unlock>:
 800a100:	4801      	ldr	r0, [pc, #4]	; (800a108 <__malloc_unlock+0x8>)
 800a102:	f7ff bf68 	b.w	8009fd6 <__retarget_lock_release_recursive>
 800a106:	bf00      	nop
 800a108:	200002cc 	.word	0x200002cc

0800a10c <_realloc_r>:
 800a10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a110:	4680      	mov	r8, r0
 800a112:	4614      	mov	r4, r2
 800a114:	460e      	mov	r6, r1
 800a116:	b921      	cbnz	r1, 800a122 <_realloc_r+0x16>
 800a118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a11c:	4611      	mov	r1, r2
 800a11e:	f7ff b80b 	b.w	8009138 <_malloc_r>
 800a122:	b92a      	cbnz	r2, 800a130 <_realloc_r+0x24>
 800a124:	f7fe ff9c 	bl	8009060 <_free_r>
 800a128:	4625      	mov	r5, r4
 800a12a:	4628      	mov	r0, r5
 800a12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a130:	f000 f8fa 	bl	800a328 <_malloc_usable_size_r>
 800a134:	4284      	cmp	r4, r0
 800a136:	4607      	mov	r7, r0
 800a138:	d802      	bhi.n	800a140 <_realloc_r+0x34>
 800a13a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a13e:	d812      	bhi.n	800a166 <_realloc_r+0x5a>
 800a140:	4621      	mov	r1, r4
 800a142:	4640      	mov	r0, r8
 800a144:	f7fe fff8 	bl	8009138 <_malloc_r>
 800a148:	4605      	mov	r5, r0
 800a14a:	2800      	cmp	r0, #0
 800a14c:	d0ed      	beq.n	800a12a <_realloc_r+0x1e>
 800a14e:	42bc      	cmp	r4, r7
 800a150:	4622      	mov	r2, r4
 800a152:	4631      	mov	r1, r6
 800a154:	bf28      	it	cs
 800a156:	463a      	movcs	r2, r7
 800a158:	f7ff ffa4 	bl	800a0a4 <memcpy>
 800a15c:	4631      	mov	r1, r6
 800a15e:	4640      	mov	r0, r8
 800a160:	f7fe ff7e 	bl	8009060 <_free_r>
 800a164:	e7e1      	b.n	800a12a <_realloc_r+0x1e>
 800a166:	4635      	mov	r5, r6
 800a168:	e7df      	b.n	800a12a <_realloc_r+0x1e>

0800a16a <_raise_r>:
 800a16a:	291f      	cmp	r1, #31
 800a16c:	b538      	push	{r3, r4, r5, lr}
 800a16e:	4604      	mov	r4, r0
 800a170:	460d      	mov	r5, r1
 800a172:	d904      	bls.n	800a17e <_raise_r+0x14>
 800a174:	2316      	movs	r3, #22
 800a176:	6003      	str	r3, [r0, #0]
 800a178:	f04f 30ff 	mov.w	r0, #4294967295
 800a17c:	bd38      	pop	{r3, r4, r5, pc}
 800a17e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a180:	b112      	cbz	r2, 800a188 <_raise_r+0x1e>
 800a182:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a186:	b94b      	cbnz	r3, 800a19c <_raise_r+0x32>
 800a188:	4620      	mov	r0, r4
 800a18a:	f000 f831 	bl	800a1f0 <_getpid_r>
 800a18e:	462a      	mov	r2, r5
 800a190:	4601      	mov	r1, r0
 800a192:	4620      	mov	r0, r4
 800a194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a198:	f000 b818 	b.w	800a1cc <_kill_r>
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d00a      	beq.n	800a1b6 <_raise_r+0x4c>
 800a1a0:	1c59      	adds	r1, r3, #1
 800a1a2:	d103      	bne.n	800a1ac <_raise_r+0x42>
 800a1a4:	2316      	movs	r3, #22
 800a1a6:	6003      	str	r3, [r0, #0]
 800a1a8:	2001      	movs	r0, #1
 800a1aa:	e7e7      	b.n	800a17c <_raise_r+0x12>
 800a1ac:	2400      	movs	r4, #0
 800a1ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	4798      	blx	r3
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	e7e0      	b.n	800a17c <_raise_r+0x12>
	...

0800a1bc <raise>:
 800a1bc:	4b02      	ldr	r3, [pc, #8]	; (800a1c8 <raise+0xc>)
 800a1be:	4601      	mov	r1, r0
 800a1c0:	6818      	ldr	r0, [r3, #0]
 800a1c2:	f7ff bfd2 	b.w	800a16a <_raise_r>
 800a1c6:	bf00      	nop
 800a1c8:	20000010 	.word	0x20000010

0800a1cc <_kill_r>:
 800a1cc:	b538      	push	{r3, r4, r5, lr}
 800a1ce:	4d07      	ldr	r5, [pc, #28]	; (800a1ec <_kill_r+0x20>)
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	4608      	mov	r0, r1
 800a1d6:	4611      	mov	r1, r2
 800a1d8:	602b      	str	r3, [r5, #0]
 800a1da:	f7f6 fefd 	bl	8000fd8 <_kill>
 800a1de:	1c43      	adds	r3, r0, #1
 800a1e0:	d102      	bne.n	800a1e8 <_kill_r+0x1c>
 800a1e2:	682b      	ldr	r3, [r5, #0]
 800a1e4:	b103      	cbz	r3, 800a1e8 <_kill_r+0x1c>
 800a1e6:	6023      	str	r3, [r4, #0]
 800a1e8:	bd38      	pop	{r3, r4, r5, pc}
 800a1ea:	bf00      	nop
 800a1ec:	200002d0 	.word	0x200002d0

0800a1f0 <_getpid_r>:
 800a1f0:	f7f6 beea 	b.w	8000fc8 <_getpid>

0800a1f4 <__sread>:
 800a1f4:	b510      	push	{r4, lr}
 800a1f6:	460c      	mov	r4, r1
 800a1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1fc:	f000 f89c 	bl	800a338 <_read_r>
 800a200:	2800      	cmp	r0, #0
 800a202:	bfab      	itete	ge
 800a204:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a206:	89a3      	ldrhlt	r3, [r4, #12]
 800a208:	181b      	addge	r3, r3, r0
 800a20a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a20e:	bfac      	ite	ge
 800a210:	6563      	strge	r3, [r4, #84]	; 0x54
 800a212:	81a3      	strhlt	r3, [r4, #12]
 800a214:	bd10      	pop	{r4, pc}

0800a216 <__swrite>:
 800a216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a21a:	461f      	mov	r7, r3
 800a21c:	898b      	ldrh	r3, [r1, #12]
 800a21e:	05db      	lsls	r3, r3, #23
 800a220:	4605      	mov	r5, r0
 800a222:	460c      	mov	r4, r1
 800a224:	4616      	mov	r6, r2
 800a226:	d505      	bpl.n	800a234 <__swrite+0x1e>
 800a228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a22c:	2302      	movs	r3, #2
 800a22e:	2200      	movs	r2, #0
 800a230:	f000 f868 	bl	800a304 <_lseek_r>
 800a234:	89a3      	ldrh	r3, [r4, #12]
 800a236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a23a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a23e:	81a3      	strh	r3, [r4, #12]
 800a240:	4632      	mov	r2, r6
 800a242:	463b      	mov	r3, r7
 800a244:	4628      	mov	r0, r5
 800a246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a24a:	f000 b817 	b.w	800a27c <_write_r>

0800a24e <__sseek>:
 800a24e:	b510      	push	{r4, lr}
 800a250:	460c      	mov	r4, r1
 800a252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a256:	f000 f855 	bl	800a304 <_lseek_r>
 800a25a:	1c43      	adds	r3, r0, #1
 800a25c:	89a3      	ldrh	r3, [r4, #12]
 800a25e:	bf15      	itete	ne
 800a260:	6560      	strne	r0, [r4, #84]	; 0x54
 800a262:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a266:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a26a:	81a3      	strheq	r3, [r4, #12]
 800a26c:	bf18      	it	ne
 800a26e:	81a3      	strhne	r3, [r4, #12]
 800a270:	bd10      	pop	{r4, pc}

0800a272 <__sclose>:
 800a272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a276:	f000 b813 	b.w	800a2a0 <_close_r>
	...

0800a27c <_write_r>:
 800a27c:	b538      	push	{r3, r4, r5, lr}
 800a27e:	4d07      	ldr	r5, [pc, #28]	; (800a29c <_write_r+0x20>)
 800a280:	4604      	mov	r4, r0
 800a282:	4608      	mov	r0, r1
 800a284:	4611      	mov	r1, r2
 800a286:	2200      	movs	r2, #0
 800a288:	602a      	str	r2, [r5, #0]
 800a28a:	461a      	mov	r2, r3
 800a28c:	f7f6 fedb 	bl	8001046 <_write>
 800a290:	1c43      	adds	r3, r0, #1
 800a292:	d102      	bne.n	800a29a <_write_r+0x1e>
 800a294:	682b      	ldr	r3, [r5, #0]
 800a296:	b103      	cbz	r3, 800a29a <_write_r+0x1e>
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	bd38      	pop	{r3, r4, r5, pc}
 800a29c:	200002d0 	.word	0x200002d0

0800a2a0 <_close_r>:
 800a2a0:	b538      	push	{r3, r4, r5, lr}
 800a2a2:	4d06      	ldr	r5, [pc, #24]	; (800a2bc <_close_r+0x1c>)
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	4608      	mov	r0, r1
 800a2aa:	602b      	str	r3, [r5, #0]
 800a2ac:	f7f6 fee7 	bl	800107e <_close>
 800a2b0:	1c43      	adds	r3, r0, #1
 800a2b2:	d102      	bne.n	800a2ba <_close_r+0x1a>
 800a2b4:	682b      	ldr	r3, [r5, #0]
 800a2b6:	b103      	cbz	r3, 800a2ba <_close_r+0x1a>
 800a2b8:	6023      	str	r3, [r4, #0]
 800a2ba:	bd38      	pop	{r3, r4, r5, pc}
 800a2bc:	200002d0 	.word	0x200002d0

0800a2c0 <_fstat_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4d07      	ldr	r5, [pc, #28]	; (800a2e0 <_fstat_r+0x20>)
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	4604      	mov	r4, r0
 800a2c8:	4608      	mov	r0, r1
 800a2ca:	4611      	mov	r1, r2
 800a2cc:	602b      	str	r3, [r5, #0]
 800a2ce:	f7f6 fee2 	bl	8001096 <_fstat>
 800a2d2:	1c43      	adds	r3, r0, #1
 800a2d4:	d102      	bne.n	800a2dc <_fstat_r+0x1c>
 800a2d6:	682b      	ldr	r3, [r5, #0]
 800a2d8:	b103      	cbz	r3, 800a2dc <_fstat_r+0x1c>
 800a2da:	6023      	str	r3, [r4, #0]
 800a2dc:	bd38      	pop	{r3, r4, r5, pc}
 800a2de:	bf00      	nop
 800a2e0:	200002d0 	.word	0x200002d0

0800a2e4 <_isatty_r>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	4d06      	ldr	r5, [pc, #24]	; (800a300 <_isatty_r+0x1c>)
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	4608      	mov	r0, r1
 800a2ee:	602b      	str	r3, [r5, #0]
 800a2f0:	f7f6 fee1 	bl	80010b6 <_isatty>
 800a2f4:	1c43      	adds	r3, r0, #1
 800a2f6:	d102      	bne.n	800a2fe <_isatty_r+0x1a>
 800a2f8:	682b      	ldr	r3, [r5, #0]
 800a2fa:	b103      	cbz	r3, 800a2fe <_isatty_r+0x1a>
 800a2fc:	6023      	str	r3, [r4, #0]
 800a2fe:	bd38      	pop	{r3, r4, r5, pc}
 800a300:	200002d0 	.word	0x200002d0

0800a304 <_lseek_r>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	4d07      	ldr	r5, [pc, #28]	; (800a324 <_lseek_r+0x20>)
 800a308:	4604      	mov	r4, r0
 800a30a:	4608      	mov	r0, r1
 800a30c:	4611      	mov	r1, r2
 800a30e:	2200      	movs	r2, #0
 800a310:	602a      	str	r2, [r5, #0]
 800a312:	461a      	mov	r2, r3
 800a314:	f7f6 feda 	bl	80010cc <_lseek>
 800a318:	1c43      	adds	r3, r0, #1
 800a31a:	d102      	bne.n	800a322 <_lseek_r+0x1e>
 800a31c:	682b      	ldr	r3, [r5, #0]
 800a31e:	b103      	cbz	r3, 800a322 <_lseek_r+0x1e>
 800a320:	6023      	str	r3, [r4, #0]
 800a322:	bd38      	pop	{r3, r4, r5, pc}
 800a324:	200002d0 	.word	0x200002d0

0800a328 <_malloc_usable_size_r>:
 800a328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a32c:	1f18      	subs	r0, r3, #4
 800a32e:	2b00      	cmp	r3, #0
 800a330:	bfbc      	itt	lt
 800a332:	580b      	ldrlt	r3, [r1, r0]
 800a334:	18c0      	addlt	r0, r0, r3
 800a336:	4770      	bx	lr

0800a338 <_read_r>:
 800a338:	b538      	push	{r3, r4, r5, lr}
 800a33a:	4d07      	ldr	r5, [pc, #28]	; (800a358 <_read_r+0x20>)
 800a33c:	4604      	mov	r4, r0
 800a33e:	4608      	mov	r0, r1
 800a340:	4611      	mov	r1, r2
 800a342:	2200      	movs	r2, #0
 800a344:	602a      	str	r2, [r5, #0]
 800a346:	461a      	mov	r2, r3
 800a348:	f7f6 fe60 	bl	800100c <_read>
 800a34c:	1c43      	adds	r3, r0, #1
 800a34e:	d102      	bne.n	800a356 <_read_r+0x1e>
 800a350:	682b      	ldr	r3, [r5, #0]
 800a352:	b103      	cbz	r3, 800a356 <_read_r+0x1e>
 800a354:	6023      	str	r3, [r4, #0]
 800a356:	bd38      	pop	{r3, r4, r5, pc}
 800a358:	200002d0 	.word	0x200002d0

0800a35c <_init>:
 800a35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35e:	bf00      	nop
 800a360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a362:	bc08      	pop	{r3}
 800a364:	469e      	mov	lr, r3
 800a366:	4770      	bx	lr

0800a368 <_fini>:
 800a368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36a:	bf00      	nop
 800a36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a36e:	bc08      	pop	{r3}
 800a370:	469e      	mov	lr, r3
 800a372:	4770      	bx	lr
