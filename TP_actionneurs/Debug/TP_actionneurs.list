
TP_actionneurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a30  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  08007c10  08007c10  00017c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008128  08008128  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008128  08008128  00018128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008130  08008130  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008130  08008130  00018130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008134  08008134  00018134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000074  080081ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  080081ac  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d60  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb5  00000000  00000000  00035e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  000389c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  00039b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a01  00000000  00000000  0003ab78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151b4  00000000  00000000  00062579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd4bf  00000000  00000000  0007772d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00174bec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c4  00000000  00000000  00174c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007bf8 	.word	0x08007bf8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08007bf8 	.word	0x08007bf8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <MX_GPIO_Init+0xe4>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a32      	ldr	r2, [pc, #200]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b30      	ldr	r3, [pc, #192]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000612:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a2c      	ldr	r2, [pc, #176]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000618:	f043 0320 	orr.w	r3, r3, #32
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0320 	and.w	r3, r3, #32
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <MX_GPIO_Init+0xe4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	4a26      	ldr	r2, [pc, #152]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000636:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4821      	ldr	r0, [pc, #132]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000648:	f001 f9b8 	bl	80019bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2120      	movs	r1, #32
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f001 f9b2 	bl	80019bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800065e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	4817      	ldr	r0, [pc, #92]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000670:	f001 f822 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8000674:	2308      	movs	r3, #8
 8000676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	4810      	ldr	r0, [pc, #64]	; (80006cc <MX_GPIO_Init+0xe8>)
 800068c:	f001 f814 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000690:	2320      	movs	r3, #32
 8000692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 f805 	bl	80016b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2028      	movs	r0, #40	; 0x28
 80006b4:	f000 ff18 	bl	80014e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b8:	2028      	movs	r0, #40	; 0x28
 80006ba:	f000 ff2f 	bl	800151c <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000800 	.word	0x48000800

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b0a2      	sub	sp, #136	; 0x88
 80006d4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char	 	cmd[CMD_BUFFER_SIZE];
	int 		idxCmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	67bb      	str	r3, [r7, #120]	; 0x78
	char*		token;
	int 		newCmdReady = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	673b      	str	r3, [r7, #112]	; 0x70
	int		speed = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint16_t  CCR1 = 5312;
 80006e2:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 80006e6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	uint16_t  CCR2 = 5312;
 80006ea:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 80006ee:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f000 fde8 	bl	80012c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f9b9 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f7ff ff73 	bl	80005e4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006fe:	f000 fbf7 	bl	8000ef0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000702:	f000 fd0b 	bl	800111c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000706:	2100      	movs	r1, #0
 8000708:	48b3      	ldr	r0, [pc, #716]	; (80009d8 <main+0x308>)
 800070a:	f002 fb1d 	bl	8002d48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800070e:	2104      	movs	r1, #4
 8000710:	48b1      	ldr	r0, [pc, #708]	; (80009d8 <main+0x308>)
 8000712:	f002 fb19 	bl	8002d48 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000716:	2100      	movs	r1, #0
 8000718:	48af      	ldr	r0, [pc, #700]	; (80009d8 <main+0x308>)
 800071a:	f003 fc8d 	bl	8004038 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800071e:	2104      	movs	r1, #4
 8000720:	48ad      	ldr	r0, [pc, #692]	; (80009d8 <main+0x308>)
 8000722:	f003 fc89 	bl	8004038 <HAL_TIMEx_PWMN_Start>

	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2224      	movs	r2, #36	; 0x24
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f005 ff9d 	bl	800666c <memset>
	memset(cmd,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000736:	2240      	movs	r2, #64	; 0x40
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f005 ff96 	bl	800666c <memset>
 8000740:	4ba6      	ldr	r3, [pc, #664]	; (80009dc <main+0x30c>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000746:	2240      	movs	r2, #64	; 0x40
 8000748:	2100      	movs	r1, #0
 800074a:	48a5      	ldr	r0, [pc, #660]	; (80009e0 <main+0x310>)
 800074c:	f005 ff8e 	bl	800666c <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000750:	2201      	movs	r2, #1
 8000752:	49a2      	ldr	r1, [pc, #648]	; (80009dc <main+0x30c>)
 8000754:	48a3      	ldr	r0, [pc, #652]	; (80009e4 <main+0x314>)
 8000756:	f003 ffcb 	bl	80046f0 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 800075a:	200a      	movs	r0, #10
 800075c:	f000 fdea 	bl	8001334 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	2266      	movs	r2, #102	; 0x66
 8000766:	49a0      	ldr	r1, [pc, #640]	; (80009e8 <main+0x318>)
 8000768:	489e      	ldr	r0, [pc, #632]	; (80009e4 <main+0x314>)
 800076a:	f003 ff2a 	bl	80045c2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	2218      	movs	r2, #24
 8000774:	499d      	ldr	r1, [pc, #628]	; (80009ec <main+0x31c>)
 8000776:	489b      	ldr	r0, [pc, #620]	; (80009e4 <main+0x314>)
 8000778:	f003 ff23 	bl	80045c2 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 2
		if(uartRxReceived){
 800077c:	4b9c      	ldr	r3, [pc, #624]	; (80009f0 <main+0x320>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d058      	beq.n	8000836 <main+0x166>
			switch(uartRxBuffer[0]){
 8000784:	4b95      	ldr	r3, [pc, #596]	; (80009dc <main+0x30c>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b0d      	cmp	r3, #13
 800078a:	d002      	beq.n	8000792 <main+0xc2>
 800078c:	2b7f      	cmp	r3, #127	; 0x7f
 800078e:	d02f      	beq.n	80007f0 <main+0x120>
 8000790:	e03e      	b.n	8000810 <main+0x140>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newLine, sizeof(newLine), HAL_MAX_DELAY);
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	2203      	movs	r2, #3
 8000798:	4996      	ldr	r1, [pc, #600]	; (80009f4 <main+0x324>)
 800079a:	4892      	ldr	r0, [pc, #584]	; (80009e4 <main+0x314>)
 800079c:	f003 ff11 	bl	80045c2 <HAL_UART_Transmit>
				cmd[idxCmd] = '\0';
 80007a0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80007a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80007a6:	4413      	add	r3, r2
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
				argc = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	67bb      	str	r3, [r7, #120]	; 0x78
				token = strtok(cmd, separators);
 80007b0:	4b91      	ldr	r3, [pc, #580]	; (80009f8 <main+0x328>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007b8:	4611      	mov	r1, r2
 80007ba:	4618      	mov	r0, r3
 80007bc:	f005 ff7e 	bl	80066bc <strtok>
 80007c0:	6778      	str	r0, [r7, #116]	; 0x74
				while(token!=NULL){
 80007c2:	e00d      	b.n	80007e0 <main+0x110>
					argv[argc++] = token;
 80007c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80007c6:	1c5a      	adds	r2, r3, #1
 80007c8:	67ba      	str	r2, [r7, #120]	; 0x78
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	3380      	adds	r3, #128	; 0x80
 80007ce:	443b      	add	r3, r7
 80007d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80007d2:	f843 2c7c 	str.w	r2, [r3, #-124]
					token = strtok(NULL, " ");
 80007d6:	4989      	ldr	r1, [pc, #548]	; (80009fc <main+0x32c>)
 80007d8:	2000      	movs	r0, #0
 80007da:	f005 ff6f 	bl	80066bc <strtok>
 80007de:	6778      	str	r0, [r7, #116]	; 0x74
				while(token!=NULL){
 80007e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1ee      	bne.n	80007c4 <main+0xf4>
				}

				idxCmd = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	67fb      	str	r3, [r7, #124]	; 0x7c
				newCmdReady = 1;
 80007ea:	2301      	movs	r3, #1
 80007ec:	673b      	str	r3, [r7, #112]	; 0x70
				break;
 80007ee:	e01f      	b.n	8000830 <main+0x160>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmd[idxCmd--] = '\0';
 80007f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80007f2:	1e5a      	subs	r2, r3, #1
 80007f4:	67fa      	str	r2, [r7, #124]	; 0x7c
 80007f6:	3380      	adds	r3, #128	; 0x80
 80007f8:	443b      	add	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	f803 2c58 	strb.w	r2, [r3, #-88]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000800:	f04f 33ff 	mov.w	r3, #4294967295
 8000804:	2201      	movs	r2, #1
 8000806:	4975      	ldr	r1, [pc, #468]	; (80009dc <main+0x30c>)
 8000808:	4876      	ldr	r0, [pc, #472]	; (80009e4 <main+0x314>)
 800080a:	f003 feda 	bl	80045c2 <HAL_UART_Transmit>
				break;
 800080e:	e00f      	b.n	8000830 <main+0x160>
				// Nouveau caractère
			default:
				cmd[idxCmd++] = uartRxBuffer[0];
 8000810:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000816:	4a71      	ldr	r2, [pc, #452]	; (80009dc <main+0x30c>)
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	3380      	adds	r3, #128	; 0x80
 800081c:	443b      	add	r3, r7
 800081e:	f803 2c58 	strb.w	r2, [r3, #-88]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	2201      	movs	r2, #1
 8000828:	496c      	ldr	r1, [pc, #432]	; (80009dc <main+0x30c>)
 800082a:	486e      	ldr	r0, [pc, #440]	; (80009e4 <main+0x314>)
 800082c:	f003 fec9 	bl	80045c2 <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 8000830:	4b6f      	ldr	r3, [pc, #444]	; (80009f0 <main+0x320>)
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
		}


		if(newCmdReady){
 8000836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000838:	2b00      	cmp	r3, #0
 800083a:	d09f      	beq.n	800077c <main+0xac>
			if(strcmp(argv[0],"set")==0){
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4970      	ldr	r1, [pc, #448]	; (8000a00 <main+0x330>)
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fced 	bl	8000220 <strcmp>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d12d      	bne.n	80008a8 <main+0x1d8>
				if(strcmp(argv[1],"PA5")==0){
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	496d      	ldr	r1, [pc, #436]	; (8000a04 <main+0x334>)
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fce5 	bl	8000220 <strcmp>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d11d      	bne.n	8000898 <main+0x1c8>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	4618      	mov	r0, r3
 8000860:	f005 fed6 	bl	8006610 <atoi>
 8000864:	4603      	mov	r3, r0
 8000866:	b2db      	uxtb	r3, r3
 8000868:	461a      	mov	r2, r3
 800086a:	2120      	movs	r1, #32
 800086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000870:	f001 f8a4 	bl	80019bc <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	4618      	mov	r0, r3
 8000878:	f005 feca 	bl	8006610 <atoi>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	4961      	ldr	r1, [pc, #388]	; (8000a08 <main+0x338>)
 8000882:	4857      	ldr	r0, [pc, #348]	; (80009e0 <main+0x310>)
 8000884:	f005 fefa 	bl	800667c <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
 800088c:	2220      	movs	r2, #32
 800088e:	4954      	ldr	r1, [pc, #336]	; (80009e0 <main+0x310>)
 8000890:	4854      	ldr	r0, [pc, #336]	; (80009e4 <main+0x314>)
 8000892:	f003 fe96 	bl	80045c2 <HAL_UART_Transmit>
 8000896:	e0d8      	b.n	8000a4a <main+0x37a>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	2214      	movs	r2, #20
 800089e:	495b      	ldr	r1, [pc, #364]	; (8000a0c <main+0x33c>)
 80008a0:	4850      	ldr	r0, [pc, #320]	; (80009e4 <main+0x314>)
 80008a2:	f003 fe8e 	bl	80045c2 <HAL_UART_Transmit>
 80008a6:	e0d0      	b.n	8000a4a <main+0x37a>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4959      	ldr	r1, [pc, #356]	; (8000a10 <main+0x340>)
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fcb7 	bl	8000220 <strcmp>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d107      	bne.n	80008c8 <main+0x1f8>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295
 80008bc:	2214      	movs	r2, #20
 80008be:	4953      	ldr	r1, [pc, #332]	; (8000a0c <main+0x33c>)
 80008c0:	4848      	ldr	r0, [pc, #288]	; (80009e4 <main+0x314>)
 80008c2:	f003 fe7e 	bl	80045c2 <HAL_UART_Transmit>
 80008c6:	e0c0      	b.n	8000a4a <main+0x37a>
			}
			else if(strcmp(argv[0],"help")==0)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4952      	ldr	r1, [pc, #328]	; (8000a14 <main+0x344>)
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fca7 	bl	8000220 <strcmp>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d107      	bne.n	80008e8 <main+0x218>
			{
				HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 80008d8:	f04f 33ff 	mov.w	r3, #4294967295
 80008dc:	229e      	movs	r2, #158	; 0x9e
 80008de:	494e      	ldr	r1, [pc, #312]	; (8000a18 <main+0x348>)
 80008e0:	4840      	ldr	r0, [pc, #256]	; (80009e4 <main+0x314>)
 80008e2:	f003 fe6e 	bl	80045c2 <HAL_UART_Transmit>
 80008e6:	e0b0      	b.n	8000a4a <main+0x37a>
			}
			else if(strcmp(argv[0],"pinout")==0)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	494c      	ldr	r1, [pc, #304]	; (8000a1c <main+0x34c>)
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fc97 	bl	8000220 <strcmp>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d107      	bne.n	8000908 <main+0x238>
			{
				HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 80008f8:	f04f 33ff 	mov.w	r3, #4294967295
 80008fc:	226b      	movs	r2, #107	; 0x6b
 80008fe:	4948      	ldr	r1, [pc, #288]	; (8000a20 <main+0x350>)
 8000900:	4838      	ldr	r0, [pc, #224]	; (80009e4 <main+0x314>)
 8000902:	f003 fe5e 	bl	80045c2 <HAL_UART_Transmit>
 8000906:	e0a0      	b.n	8000a4a <main+0x37a>
			}
			else if(strcmp(argv[0],"start")==0)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4946      	ldr	r1, [pc, #280]	; (8000a24 <main+0x354>)
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fc87 	bl	8000220 <strcmp>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d109      	bne.n	800092c <main+0x25c>
			{
				powerUpSequence();
 8000918:	f000 f908 	bl	8000b2c <powerUpSequence>
				HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	2232      	movs	r2, #50	; 0x32
 8000922:	4941      	ldr	r1, [pc, #260]	; (8000a28 <main+0x358>)
 8000924:	482f      	ldr	r0, [pc, #188]	; (80009e4 <main+0x314>)
 8000926:	f003 fe4c 	bl	80045c2 <HAL_UART_Transmit>
 800092a:	e08e      	b.n	8000a4a <main+0x37a>
			}
			else if(strcmp(argv[0],"stop")==0)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	493f      	ldr	r1, [pc, #252]	; (8000a2c <main+0x35c>)
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fc75 	bl	8000220 <strcmp>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d107      	bne.n	800094c <main+0x27c>
			{
				HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
 8000940:	2233      	movs	r2, #51	; 0x33
 8000942:	493b      	ldr	r1, [pc, #236]	; (8000a30 <main+0x360>)
 8000944:	4827      	ldr	r0, [pc, #156]	; (80009e4 <main+0x314>)
 8000946:	f003 fe3c 	bl	80045c2 <HAL_UART_Transmit>
 800094a:	e07e      	b.n	8000a4a <main+0x37a>
			}
			else if(strcmp(argv[0],"speed")==0){
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4939      	ldr	r1, [pc, #228]	; (8000a34 <main+0x364>)
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fc65 	bl	8000220 <strcmp>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d16f      	bne.n	8000a3c <main+0x36c>
				speed = atoi(argv[1]);
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4618      	mov	r0, r3
 8000960:	f005 fe56 	bl	8006610 <atoi>
 8000964:	66f8      	str	r0, [r7, #108]	; 0x6c
				if (speed > SPEED_MAX)	speed = SPEED_MAX;
 8000966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800096c:	dd02      	ble.n	8000974 <main+0x2a4>
 800096e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000972:	66fb      	str	r3, [r7, #108]	; 0x6c
				CCR1=5312*(SPEED_MAX+speed)/(2*SPEED_MAX);
 8000974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000976:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800097a:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 800097e:	fb02 f303 	mul.w	r3, r2, r3
 8000982:	2b00      	cmp	r3, #0
 8000984:	da01      	bge.n	800098a <main+0x2ba>
 8000986:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800098a:	129b      	asrs	r3, r3, #10
 800098c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
				CCR2=5312-CCR1;
 8000990:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8000994:	f5c3 53a6 	rsb	r3, r3, #5312	; 0x14c0
 8000998:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,CCR1);
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <main+0x308>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80009a4:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,CCR2);
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <main+0x308>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 80009ae:	639a      	str	r2, [r3, #56]	; 0x38
				sprintf(uartTxBuffer,"Speed set to : %d | CCR1 = %d | CCR2= %d \r\n",speed,CCR1,CCR2);
 80009b0:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80009b4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	4613      	mov	r3, r2
 80009bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80009be:	491e      	ldr	r1, [pc, #120]	; (8000a38 <main+0x368>)
 80009c0:	4807      	ldr	r0, [pc, #28]	; (80009e0 <main+0x310>)
 80009c2:	f005 fe5b 	bl	800667c <siprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	2240      	movs	r2, #64	; 0x40
 80009cc:	4904      	ldr	r1, [pc, #16]	; (80009e0 <main+0x310>)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <main+0x314>)
 80009d0:	f003 fdf7 	bl	80045c2 <HAL_UART_Transmit>
 80009d4:	e039      	b.n	8000a4a <main+0x37a>
 80009d6:	bf00      	nop
 80009d8:	20000128 	.word	0x20000128
 80009dc:	20000094 	.word	0x20000094
 80009e0:	20000098 	.word	0x20000098
 80009e4:	20000174 	.word	0x20000174
 80009e8:	08007cac 	.word	0x08007cac
 80009ec:	08007c94 	.word	0x08007c94
 80009f0:	20000090 	.word	0x20000090
 80009f4:	08007d14 	.word	0x08007d14
 80009f8:	20000000 	.word	0x20000000
 80009fc:	08007c14 	.word	0x08007c14
 8000a00:	08007c18 	.word	0x08007c18
 8000a04:	08007c1c 	.word	0x08007c1c
 8000a08:	08007c20 	.word	0x08007c20
 8000a0c:	08007d18 	.word	0x08007d18
 8000a10:	08007c3c 	.word	0x08007c3c
 8000a14:	08007c40 	.word	0x08007c40
 8000a18:	08007d2c 	.word	0x08007d2c
 8000a1c:	08007c48 	.word	0x08007c48
 8000a20:	08007dcc 	.word	0x08007dcc
 8000a24:	08007c50 	.word	0x08007c50
 8000a28:	08007e38 	.word	0x08007e38
 8000a2c:	08007c58 	.word	0x08007c58
 8000a30:	08007e6c 	.word	0x08007e6c
 8000a34:	08007c60 	.word	0x08007c60
 8000a38:	08007c68 	.word	0x08007c68
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a40:	2214      	movs	r2, #20
 8000a42:	4907      	ldr	r1, [pc, #28]	; (8000a60 <main+0x390>)
 8000a44:	4807      	ldr	r0, [pc, #28]	; (8000a64 <main+0x394>)
 8000a46:	f003 fdbc 	bl	80045c2 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4e:	2218      	movs	r2, #24
 8000a50:	4905      	ldr	r1, [pc, #20]	; (8000a68 <main+0x398>)
 8000a52:	4804      	ldr	r0, [pc, #16]	; (8000a64 <main+0x394>)
 8000a54:	f003 fdb5 	bl	80045c2 <HAL_UART_Transmit>
			newCmdReady = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	673b      	str	r3, [r7, #112]	; 0x70
		if(uartRxReceived){
 8000a5c:	e68e      	b.n	800077c <main+0xac>
 8000a5e:	bf00      	nop
 8000a60:	08007d18 	.word	0x08007d18
 8000a64:	20000174 	.word	0x20000174
 8000a68:	08007c94 	.word	0x08007c94

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b094      	sub	sp, #80	; 0x50
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0318 	add.w	r3, r7, #24
 8000a76:	2238      	movs	r2, #56	; 0x38
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f005 fdf6 	bl	800666c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 ffd0 	bl	8001a34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a9c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000aa6:	2306      	movs	r3, #6
 8000aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000aaa:	2355      	movs	r3, #85	; 0x55
 8000aac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aba:	f107 0318 	add.w	r3, r7, #24
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 f85c 	bl	8001b7c <HAL_RCC_OscConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000aca:	f000 f855 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ace:	230f      	movs	r3, #15
 8000ad0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 fb60 	bl	80021ac <HAL_RCC_ClockConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000af2:	f000 f841 	bl	8000b78 <Error_Handler>
  }
}
 8000af6:	bf00      	nop
 8000af8:	3750      	adds	r7, #80	; 0x50
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_UART_RxCpltCallback+0x20>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4904      	ldr	r1, [pc, #16]	; (8000b24 <HAL_UART_RxCpltCallback+0x24>)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <HAL_UART_RxCpltCallback+0x28>)
 8000b14:	f003 fdec 	bl	80046f0 <HAL_UART_Receive_IT>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000090 	.word	0x20000090
 8000b24:	20000094 	.word	0x20000094
 8000b28:	20000174 	.word	0x20000174

08000b2c <powerUpSequence>:

void powerUpSequence (void){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	2108      	movs	r1, #8
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <powerUpSequence+0x24>)
 8000b36:	f000 ff41 	bl	80019bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f000 fbfa 	bl	8001334 <HAL_Delay>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2108      	movs	r1, #8
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <powerUpSequence+0x24>)
 8000b46:	f000 ff39 	bl	80019bc <HAL_GPIO_WritePin>
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	48000800 	.word	0x48000800

08000b54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d101      	bne.n	8000b6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b66:	f000 fbc7 	bl	80012f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40001000 	.word	0x40001000

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>
	...

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_MspInit+0x44>)
 8000b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <HAL_MspInit+0x44>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6613      	str	r3, [r2, #96]	; 0x60
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_MspInit+0x44>)
 8000b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_MspInit+0x44>)
 8000ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_MspInit+0x44>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	6593      	str	r3, [r2, #88]	; 0x58
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_MspInit+0x44>)
 8000bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000

08000bcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08c      	sub	sp, #48	; 0x30
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000be2:	4b2d      	ldr	r3, [pc, #180]	; (8000c98 <HAL_InitTick+0xcc>)
 8000be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be6:	4a2c      	ldr	r2, [pc, #176]	; (8000c98 <HAL_InitTick+0xcc>)
 8000be8:	f043 0310 	orr.w	r3, r3, #16
 8000bec:	6593      	str	r3, [r2, #88]	; 0x58
 8000bee:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <HAL_InitTick+0xcc>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf2:	f003 0310 	and.w	r3, r3, #16
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bfa:	f107 020c 	add.w	r2, r7, #12
 8000bfe:	f107 0310 	add.w	r3, r7, #16
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f001 fca7 	bl	8002558 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c0a:	f001 fc79 	bl	8002500 <HAL_RCC_GetPCLK1Freq>
 8000c0e:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c12:	4a22      	ldr	r2, [pc, #136]	; (8000c9c <HAL_InitTick+0xd0>)
 8000c14:	fba2 2303 	umull	r2, r3, r2, r3
 8000c18:	0c9b      	lsrs	r3, r3, #18
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <HAL_InitTick+0xd4>)
 8000c20:	4a20      	ldr	r2, [pc, #128]	; (8000ca4 <HAL_InitTick+0xd8>)
 8000c22:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <HAL_InitTick+0xd4>)
 8000c26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c2a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c2c:	4a1c      	ldr	r2, [pc, #112]	; (8000ca0 <HAL_InitTick+0xd4>)
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c32:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <HAL_InitTick+0xd4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c38:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <HAL_InitTick+0xd4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000c3e:	4818      	ldr	r0, [pc, #96]	; (8000ca0 <HAL_InitTick+0xd4>)
 8000c40:	f001 ff50 	bl	8002ae4 <HAL_TIM_Base_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d11b      	bne.n	8000c8a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c52:	4813      	ldr	r0, [pc, #76]	; (8000ca0 <HAL_InitTick+0xd4>)
 8000c54:	f001 ff9e 	bl	8002b94 <HAL_TIM_Base_Start_IT>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d111      	bne.n	8000c8a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c66:	2036      	movs	r0, #54	; 0x36
 8000c68:	f000 fc58 	bl	800151c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b0f      	cmp	r3, #15
 8000c70:	d808      	bhi.n	8000c84 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c72:	2200      	movs	r2, #0
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	2036      	movs	r0, #54	; 0x36
 8000c78:	f000 fc36 	bl	80014e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <HAL_InitTick+0xdc>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	e002      	b.n	8000c8a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3730      	adds	r7, #48	; 0x30
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	431bde83 	.word	0x431bde83
 8000ca0:	200000d8 	.word	0x200000d8
 8000ca4:	40001000 	.word	0x40001000
 8000ca8:	20000008 	.word	0x20000008

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <MemManage_Handler+0x4>

08000cbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <USART2_IRQHandler+0x10>)
 8000d0a:	f003 fd47 	bl	800479c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000174 	.word	0x20000174

08000d18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000d1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d20:	f000 fe64 	bl	80019ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
	powerUpSequence();
 8000d24:	f7ff ff02 	bl	8000b2c <powerUpSequence>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <TIM6_DAC_IRQHandler+0x10>)
 8000d32:	f002 f91b 	bl	8002f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200000d8 	.word	0x200000d8

08000d40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
	return 1;
 8000d44:	2301      	movs	r3, #1
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <_kill>:

int _kill(int pid, int sig)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d5a:	f005 fc5d 	bl	8006618 <__errno>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2216      	movs	r2, #22
 8000d62:	601a      	str	r2, [r3, #0]
	return -1;
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <_exit>:

void _exit (int status)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ffe7 	bl	8000d50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d82:	e7fe      	b.n	8000d82 <_exit+0x12>

08000d84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	e00a      	b.n	8000dac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d96:	f3af 8000 	nop.w
 8000d9a:	4601      	mov	r1, r0
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	60ba      	str	r2, [r7, #8]
 8000da2:	b2ca      	uxtb	r2, r1
 8000da4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbf0      	blt.n	8000d96 <_read+0x12>
	}

return len;
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	e009      	b.n	8000de4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	60ba      	str	r2, [r7, #8]
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3301      	adds	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	dbf1      	blt.n	8000dd0 <_write+0x12>
	}
	return len;
 8000dec:	687b      	ldr	r3, [r7, #4]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <_close>:

int _close(int file)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
	return -1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e1e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <_isatty>:

int _isatty(int file)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
	return 1;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e68:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <_sbrk+0x5c>)
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <_sbrk+0x60>)
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <_sbrk+0x64>)
 8000e7e:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <_sbrk+0x68>)
 8000e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d207      	bcs.n	8000ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e90:	f005 fbc2 	bl	8006618 <__errno>
 8000e94:	4603      	mov	r3, r0
 8000e96:	220c      	movs	r2, #12
 8000e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	e009      	b.n	8000eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <_sbrk+0x64>)
 8000eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20020000 	.word	0x20020000
 8000ec0:	00000400 	.word	0x00000400
 8000ec4:	20000124 	.word	0x20000124
 8000ec8:	20000218 	.word	0x20000218

08000ecc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <SystemInit+0x20>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <SystemInit+0x20>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09c      	sub	sp, #112	; 0x70
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
 8000f20:	615a      	str	r2, [r3, #20]
 8000f22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2234      	movs	r2, #52	; 0x34
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f005 fb9e 	bl	800666c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f30:	4b4c      	ldr	r3, [pc, #304]	; (8001064 <MX_TIM1_Init+0x174>)
 8000f32:	4a4d      	ldr	r2, [pc, #308]	; (8001068 <MX_TIM1_Init+0x178>)
 8000f34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f36:	4b4b      	ldr	r3, [pc, #300]	; (8001064 <MX_TIM1_Init+0x174>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f3c:	4b49      	ldr	r3, [pc, #292]	; (8001064 <MX_TIM1_Init+0x174>)
 8000f3e:	2220      	movs	r2, #32
 8000f40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5312;
 8000f42:	4b48      	ldr	r3, [pc, #288]	; (8001064 <MX_TIM1_Init+0x174>)
 8000f44:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8000f48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4a:	4b46      	ldr	r3, [pc, #280]	; (8001064 <MX_TIM1_Init+0x174>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f50:	4b44      	ldr	r3, [pc, #272]	; (8001064 <MX_TIM1_Init+0x174>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f56:	4b43      	ldr	r3, [pc, #268]	; (8001064 <MX_TIM1_Init+0x174>)
 8000f58:	2280      	movs	r2, #128	; 0x80
 8000f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f5c:	4841      	ldr	r0, [pc, #260]	; (8001064 <MX_TIM1_Init+0x174>)
 8000f5e:	f001 fdc1 	bl	8002ae4 <HAL_TIM_Base_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f68:	f7ff fe06 	bl	8000b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f70:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f72:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f76:	4619      	mov	r1, r3
 8000f78:	483a      	ldr	r0, [pc, #232]	; (8001064 <MX_TIM1_Init+0x174>)
 8000f7a:	f002 fa8b 	bl	8003494 <HAL_TIM_ConfigClockSource>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f84:	f7ff fdf8 	bl	8000b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f88:	4836      	ldr	r0, [pc, #216]	; (8001064 <MX_TIM1_Init+0x174>)
 8000f8a:	f001 fe7b 	bl	8002c84 <HAL_TIM_PWM_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f94:	f7ff fdf0 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fa4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fa8:	4619      	mov	r1, r3
 8000faa:	482e      	ldr	r0, [pc, #184]	; (8001064 <MX_TIM1_Init+0x174>)
 8000fac:	f003 f906 	bl	80041bc <HAL_TIMEx_MasterConfigSynchronization>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000fb6:	f7ff fddf 	bl	8000b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fba:	2360      	movs	r3, #96	; 0x60
 8000fbc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2656;
 8000fbe:	f44f 6326 	mov.w	r3, #2656	; 0xa60
 8000fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fdc:	2200      	movs	r2, #0
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4820      	ldr	r0, [pc, #128]	; (8001064 <MX_TIM1_Init+0x174>)
 8000fe2:	f002 f943 	bl	800326c <HAL_TIM_PWM_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000fec:	f7ff fdc4 	bl	8000b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	481a      	ldr	r0, [pc, #104]	; (8001064 <MX_TIM1_Init+0x174>)
 8000ffa:	f002 f937 	bl	800326c <HAL_TIM_PWM_ConfigChannel>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001004:	f7ff fdb8 	bl	8000b78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 210;
 8001014:	23d2      	movs	r3, #210	; 0xd2
 8001016:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800101c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001020:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800102e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001038:	2300      	movs	r3, #0
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	4619      	mov	r1, r3
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <MX_TIM1_Init+0x174>)
 8001046:	f003 f94f 	bl	80042e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8001050:	f7ff fd92 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <MX_TIM1_Init+0x174>)
 8001056:	f000 f829 	bl	80010ac <HAL_TIM_MspPostInit>

}
 800105a:	bf00      	nop
 800105c:	3770      	adds	r7, #112	; 0x70
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000128 	.word	0x20000128
 8001068:	40012c00 	.word	0x40012c00

0800106c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <HAL_TIM_Base_MspInit+0x38>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d10b      	bne.n	8001096 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_TIM_Base_MspInit+0x3c>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001082:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <HAL_TIM_Base_MspInit+0x3c>)
 8001084:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001088:	6613      	str	r3, [r2, #96]	; 0x60
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HAL_TIM_Base_MspInit+0x3c>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40012c00 	.word	0x40012c00
 80010a8:	40021000 	.word	0x40021000

080010ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a12      	ldr	r2, [pc, #72]	; (8001114 <HAL_TIM_MspPostInit+0x68>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d11d      	bne.n	800110a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_TIM_MspPostInit+0x6c>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	4a11      	ldr	r2, [pc, #68]	; (8001118 <HAL_TIM_MspPostInit+0x6c>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_TIM_MspPostInit+0x6c>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 80010e6:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80010ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001106:	f000 fad7 	bl	80016b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800110a:	bf00      	nop
 800110c:	3720      	adds	r7, #32
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40012c00 	.word	0x40012c00
 8001118:	40021000 	.word	0x40021000

0800111c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001122:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <MX_USART2_UART_Init+0x94>)
 8001124:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800112c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <MX_USART2_UART_Init+0x90>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001142:	220c      	movs	r2, #12
 8001144:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_USART2_UART_Init+0x90>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_USART2_UART_Init+0x90>)
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001164:	4811      	ldr	r0, [pc, #68]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001166:	f003 f9dc 	bl	8004522 <HAL_UART_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001170:	f7ff fd02 	bl	8000b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001174:	2100      	movs	r1, #0
 8001176:	480d      	ldr	r0, [pc, #52]	; (80011ac <MX_USART2_UART_Init+0x90>)
 8001178:	f005 f97f 	bl	800647a <HAL_UARTEx_SetTxFifoThreshold>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001182:	f7ff fcf9 	bl	8000b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001186:	2100      	movs	r1, #0
 8001188:	4808      	ldr	r0, [pc, #32]	; (80011ac <MX_USART2_UART_Init+0x90>)
 800118a:	f005 f9b4 	bl	80064f6 <HAL_UARTEx_SetRxFifoThreshold>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001194:	f7ff fcf0 	bl	8000b78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_USART2_UART_Init+0x90>)
 800119a:	f005 f935 	bl	8006408 <HAL_UARTEx_DisableFifoMode>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011a4:	f7ff fce8 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000174 	.word	0x20000174
 80011b0:	40004400 	.word	0x40004400

080011b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b09e      	sub	sp, #120	; 0x78
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	2254      	movs	r2, #84	; 0x54
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f005 fa49 	bl	800666c <memset>
  if(uartHandle->Instance==USART2)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_UART_MspInit+0xb8>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d13e      	bne.n	8001262 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 fa29 	bl	8002648 <HAL_RCCEx_PeriphCLKConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011fc:	f7ff fcbc 	bl	8000b78 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <HAL_UART_MspInit+0xbc>)
 8001202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001204:	4a1a      	ldr	r2, [pc, #104]	; (8001270 <HAL_UART_MspInit+0xbc>)
 8001206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120a:	6593      	str	r3, [r2, #88]	; 0x58
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <HAL_UART_MspInit+0xbc>)
 800120e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <HAL_UART_MspInit+0xbc>)
 800121a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <HAL_UART_MspInit+0xbc>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_UART_MspInit+0xbc>)
 8001226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001230:	230c      	movs	r3, #12
 8001232:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001240:	2307      	movs	r3, #7
 8001242:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001248:	4619      	mov	r1, r3
 800124a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124e:	f000 fa33 	bl	80016b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	2026      	movs	r0, #38	; 0x26
 8001258:	f000 f946 	bl	80014e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800125c:	2026      	movs	r0, #38	; 0x26
 800125e:	f000 f95d 	bl	800151c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001262:	bf00      	nop
 8001264:	3778      	adds	r7, #120	; 0x78
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40004400 	.word	0x40004400
 8001270:	40021000 	.word	0x40021000

08001274 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001276:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800127a:	490e      	ldr	r1, [pc, #56]	; (80012b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800127c:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <LoopForever+0xe>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001290:	4c0b      	ldr	r4, [pc, #44]	; (80012c0 <LoopForever+0x16>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800129e:	f7ff fe15 	bl	8000ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a2:	f005 f9bf 	bl	8006624 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012a6:	f7ff fa13 	bl	80006d0 <main>

080012aa <LoopForever>:

LoopForever:
    b LoopForever
 80012aa:	e7fe      	b.n	80012aa <LoopForever>
  ldr   r0, =_estack
 80012ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012b8:	08008138 	.word	0x08008138
  ldr r2, =_sbss
 80012bc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80012c0:	20000218 	.word	0x20000218

080012c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC1_2_IRQHandler>

080012c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d0:	2003      	movs	r0, #3
 80012d2:	f000 f8fe 	bl	80014d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012d6:	200f      	movs	r0, #15
 80012d8:	f7ff fc78 	bl	8000bcc <HAL_InitTick>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	71fb      	strb	r3, [r7, #7]
 80012e6:	e001      	b.n	80012ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012e8:	f7ff fc4c 	bl	8000b84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012ec:	79fb      	ldrb	r3, [r7, #7]

}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_IncTick+0x1c>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_IncTick+0x20>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4413      	add	r3, r2
 8001306:	4a03      	ldr	r2, [pc, #12]	; (8001314 <HAL_IncTick+0x1c>)
 8001308:	6013      	str	r3, [r2, #0]
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20000204 	.word	0x20000204
 8001318:	2000000c 	.word	0x2000000c

0800131c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <HAL_GetTick+0x14>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000204 	.word	0x20000204

08001334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800133c:	f7ff ffee 	bl	800131c <HAL_GetTick>
 8001340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800134c:	d004      	beq.n	8001358 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_Delay+0x40>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	4413      	add	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001358:	bf00      	nop
 800135a:	f7ff ffdf 	bl	800131c <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	429a      	cmp	r2, r3
 8001368:	d8f7      	bhi.n	800135a <HAL_Delay+0x26>
  {
  }
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000000c 	.word	0x2000000c

08001378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001394:	4013      	ands	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013aa:	4a04      	ldr	r2, [pc, #16]	; (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	60d3      	str	r3, [r2, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <__NVIC_GetPriorityGrouping+0x18>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	f003 0307 	and.w	r3, r3, #7
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db0b      	blt.n	8001406 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	4907      	ldr	r1, [pc, #28]	; (8001414 <__NVIC_EnableIRQ+0x38>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	095b      	lsrs	r3, r3, #5
 80013fc:	2001      	movs	r0, #1
 80013fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000e100 	.word	0xe000e100

08001418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	; (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	; (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
         );
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ff4c 	bl	8001378 <__NVIC_SetPriorityGrouping>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014f6:	f7ff ff63 	bl	80013c0 <__NVIC_GetPriorityGrouping>
 80014fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	68b9      	ldr	r1, [r7, #8]
 8001500:	6978      	ldr	r0, [r7, #20]
 8001502:	f7ff ffb3 	bl	800146c <NVIC_EncodePriority>
 8001506:	4602      	mov	r2, r0
 8001508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150c:	4611      	mov	r1, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff ff82 	bl	8001418 <__NVIC_SetPriority>
}
 8001514:	bf00      	nop
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff56 	bl	80013dc <__NVIC_EnableIRQ>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d005      	beq.n	800155c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2204      	movs	r2, #4
 8001554:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	e037      	b.n	80015cc <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 020e 	bic.w	r2, r2, #14
 800156a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800157a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0201 	bic.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001590:	f003 021f 	and.w	r2, r3, #31
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	2101      	movs	r1, #1
 800159a:	fa01 f202 	lsl.w	r2, r1, r2
 800159e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015a8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00c      	beq.n	80015cc <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015c0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015ca:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d00d      	beq.n	800161e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2204      	movs	r2, #4
 8001606:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e047      	b.n	80016ae <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 020e 	bic.w	r2, r2, #14
 800162c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0201 	bic.w	r2, r2, #1
 800163c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800164c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f003 021f 	and.w	r2, r3, #31
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	2101      	movs	r1, #1
 800165c:	fa01 f202 	lsl.w	r2, r1, r2
 8001660:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800166a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00c      	beq.n	800168e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001682:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800168c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	4798      	blx	r3
    }
  }
  return status;
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016c6:	e15a      	b.n	800197e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2101      	movs	r1, #1
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	fa01 f303 	lsl.w	r3, r1, r3
 80016d4:	4013      	ands	r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 814c 	beq.w	8001978 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d005      	beq.n	80016f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d130      	bne.n	800175a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	2203      	movs	r2, #3
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800172e:	2201      	movs	r2, #1
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	f003 0201 	and.w	r2, r3, #1
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b03      	cmp	r3, #3
 8001764:	d017      	beq.n	8001796 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d123      	bne.n	80017ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	08da      	lsrs	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3208      	adds	r2, #8
 80017aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	220f      	movs	r2, #15
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	691a      	ldr	r2, [r3, #16]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	08da      	lsrs	r2, r3, #3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3208      	adds	r2, #8
 80017e4:	6939      	ldr	r1, [r7, #16]
 80017e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0203 	and.w	r2, r3, #3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 80a6 	beq.w	8001978 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182c:	4b5b      	ldr	r3, [pc, #364]	; (800199c <HAL_GPIO_Init+0x2e4>)
 800182e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001830:	4a5a      	ldr	r2, [pc, #360]	; (800199c <HAL_GPIO_Init+0x2e4>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6613      	str	r3, [r2, #96]	; 0x60
 8001838:	4b58      	ldr	r3, [pc, #352]	; (800199c <HAL_GPIO_Init+0x2e4>)
 800183a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001844:	4a56      	ldr	r2, [pc, #344]	; (80019a0 <HAL_GPIO_Init+0x2e8>)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	3302      	adds	r3, #2
 800184c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	220f      	movs	r2, #15
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800186e:	d01f      	beq.n	80018b0 <HAL_GPIO_Init+0x1f8>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a4c      	ldr	r2, [pc, #304]	; (80019a4 <HAL_GPIO_Init+0x2ec>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d019      	beq.n	80018ac <HAL_GPIO_Init+0x1f4>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a4b      	ldr	r2, [pc, #300]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d013      	beq.n	80018a8 <HAL_GPIO_Init+0x1f0>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a4a      	ldr	r2, [pc, #296]	; (80019ac <HAL_GPIO_Init+0x2f4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d00d      	beq.n	80018a4 <HAL_GPIO_Init+0x1ec>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a49      	ldr	r2, [pc, #292]	; (80019b0 <HAL_GPIO_Init+0x2f8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d007      	beq.n	80018a0 <HAL_GPIO_Init+0x1e8>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a48      	ldr	r2, [pc, #288]	; (80019b4 <HAL_GPIO_Init+0x2fc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d101      	bne.n	800189c <HAL_GPIO_Init+0x1e4>
 8001898:	2305      	movs	r3, #5
 800189a:	e00a      	b.n	80018b2 <HAL_GPIO_Init+0x1fa>
 800189c:	2306      	movs	r3, #6
 800189e:	e008      	b.n	80018b2 <HAL_GPIO_Init+0x1fa>
 80018a0:	2304      	movs	r3, #4
 80018a2:	e006      	b.n	80018b2 <HAL_GPIO_Init+0x1fa>
 80018a4:	2303      	movs	r3, #3
 80018a6:	e004      	b.n	80018b2 <HAL_GPIO_Init+0x1fa>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e002      	b.n	80018b2 <HAL_GPIO_Init+0x1fa>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <HAL_GPIO_Init+0x1fa>
 80018b0:	2300      	movs	r3, #0
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	f002 0203 	and.w	r2, r2, #3
 80018b8:	0092      	lsls	r2, r2, #2
 80018ba:	4093      	lsls	r3, r2
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018c2:	4937      	ldr	r1, [pc, #220]	; (80019a0 <HAL_GPIO_Init+0x2e8>)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	3302      	adds	r3, #2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018d0:	4b39      	ldr	r3, [pc, #228]	; (80019b8 <HAL_GPIO_Init+0x300>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018f4:	4a30      	ldr	r2, [pc, #192]	; (80019b8 <HAL_GPIO_Init+0x300>)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018fa:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <HAL_GPIO_Init+0x300>)
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800191e:	4a26      	ldr	r2, [pc, #152]	; (80019b8 <HAL_GPIO_Init+0x300>)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_GPIO_Init+0x300>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	43db      	mvns	r3, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001948:	4a1b      	ldr	r2, [pc, #108]	; (80019b8 <HAL_GPIO_Init+0x300>)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <HAL_GPIO_Init+0x300>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001972:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <HAL_GPIO_Init+0x300>)
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	3301      	adds	r3, #1
 800197c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	f47f ae9d 	bne.w	80016c8 <HAL_GPIO_Init+0x10>
  }
}
 800198e:	bf00      	nop
 8001990:	bf00      	nop
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010000 	.word	0x40010000
 80019a4:	48000400 	.word	0x48000400
 80019a8:	48000800 	.word	0x48000800
 80019ac:	48000c00 	.word	0x48000c00
 80019b0:	48001000 	.word	0x48001000
 80019b4:	48001400 	.word	0x48001400
 80019b8:	40010400 	.word	0x40010400

080019bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]
 80019c8:	4613      	mov	r3, r2
 80019ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019cc:	787b      	ldrb	r3, [r7, #1]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019d8:	e002      	b.n	80019e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019da:	887a      	ldrh	r2, [r7, #2]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d006      	beq.n	8001a10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a02:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f806 	bl	8001a1c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40010400 	.word	0x40010400

08001a1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d141      	bne.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a42:	4b4b      	ldr	r3, [pc, #300]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4e:	d131      	bne.n	8001ab4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a50:	4b47      	ldr	r3, [pc, #284]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a56:	4a46      	ldr	r2, [pc, #280]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a60:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a68:	4a41      	ldr	r2, [pc, #260]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a70:	4b40      	ldr	r3, [pc, #256]	; (8001b74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2232      	movs	r2, #50	; 0x32
 8001a76:	fb02 f303 	mul.w	r3, r2, r3
 8001a7a:	4a3f      	ldr	r2, [pc, #252]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a80:	0c9b      	lsrs	r3, r3, #18
 8001a82:	3301      	adds	r3, #1
 8001a84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a86:	e002      	b.n	8001a8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a8e:	4b38      	ldr	r3, [pc, #224]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a9a:	d102      	bne.n	8001aa2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f2      	bne.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aa2:	4b33      	ldr	r3, [pc, #204]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aae:	d158      	bne.n	8001b62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e057      	b.n	8001b64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ab4:	4b2e      	ldr	r3, [pc, #184]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aba:	4a2d      	ldr	r2, [pc, #180]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ac0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ac4:	e04d      	b.n	8001b62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001acc:	d141      	bne.n	8001b52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ace:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ada:	d131      	bne.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001adc:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ae2:	4a23      	ldr	r2, [pc, #140]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001af4:	4a1e      	ldr	r2, [pc, #120]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001afa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001afc:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2232      	movs	r2, #50	; 0x32
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b08:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0c:	0c9b      	lsrs	r3, r3, #18
 8001b0e:	3301      	adds	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b12:	e002      	b.n	8001b1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b26:	d102      	bne.n	8001b2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f2      	bne.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b3a:	d112      	bne.n	8001b62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e011      	b.n	8001b64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b50:	e007      	b.n	8001b62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b5a:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	40007000 	.word	0x40007000
 8001b74:	20000004 	.word	0x20000004
 8001b78:	431bde83 	.word	0x431bde83

08001b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e306      	b.n	800219c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d075      	beq.n	8001c86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9a:	4b97      	ldr	r3, [pc, #604]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba4:	4b94      	ldr	r3, [pc, #592]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	2b0c      	cmp	r3, #12
 8001bb2:	d102      	bne.n	8001bba <HAL_RCC_OscConfig+0x3e>
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d002      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x44>
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d10b      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc0:	4b8d      	ldr	r3, [pc, #564]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d05b      	beq.n	8001c84 <HAL_RCC_OscConfig+0x108>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d157      	bne.n	8001c84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e2e1      	b.n	800219c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be0:	d106      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x74>
 8001be2:	4b85      	ldr	r3, [pc, #532]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a84      	ldr	r2, [pc, #528]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e01d      	b.n	8001c2c <HAL_RCC_OscConfig+0xb0>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x98>
 8001bfa:	4b7f      	ldr	r3, [pc, #508]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a7e      	ldr	r2, [pc, #504]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b7c      	ldr	r3, [pc, #496]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a7b      	ldr	r2, [pc, #492]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e00b      	b.n	8001c2c <HAL_RCC_OscConfig+0xb0>
 8001c14:	4b78      	ldr	r3, [pc, #480]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a77      	ldr	r2, [pc, #476]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b75      	ldr	r3, [pc, #468]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a74      	ldr	r2, [pc, #464]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7ff fb72 	bl	800131c <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7ff fb6e 	bl	800131c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e2a6      	b.n	800219c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c4e:	4b6a      	ldr	r3, [pc, #424]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0xc0>
 8001c5a:	e014      	b.n	8001c86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fb5e 	bl	800131c <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c64:	f7ff fb5a 	bl	800131c <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	; 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e292      	b.n	800219c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c76:	4b60      	ldr	r3, [pc, #384]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0xe8>
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d075      	beq.n	8001d7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c92:	4b59      	ldr	r3, [pc, #356]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c9c:	4b56      	ldr	r3, [pc, #344]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2b0c      	cmp	r3, #12
 8001caa:	d102      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x136>
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d002      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x13c>
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d11f      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cb8:	4b4f      	ldr	r3, [pc, #316]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x154>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e265      	b.n	800219c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	061b      	lsls	r3, r3, #24
 8001cde:	4946      	ldr	r1, [pc, #280]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ce4:	4b45      	ldr	r3, [pc, #276]	; (8001dfc <HAL_RCC_OscConfig+0x280>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe ff6f 	bl	8000bcc <HAL_InitTick>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d043      	beq.n	8001d7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e251      	b.n	800219c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d023      	beq.n	8001d48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d00:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a3c      	ldr	r2, [pc, #240]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fb06 	bl	800131c <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d14:	f7ff fb02 	bl	800131c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e23a      	b.n	800219c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d26:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d32:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	061b      	lsls	r3, r3, #24
 8001d40:	492d      	ldr	r1, [pc, #180]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
 8001d46:	e01a      	b.n	8001d7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d48:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a2a      	ldr	r2, [pc, #168]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001d4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff fae2 	bl	800131c <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fade 	bl	800131c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e216      	b.n	800219c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d6e:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x1e0>
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d041      	beq.n	8001e0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d01c      	beq.n	8001dcc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d98:	4a17      	ldr	r2, [pc, #92]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da2:	f7ff fabb 	bl	800131c <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001daa:	f7ff fab7 	bl	800131c <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e1ef      	b.n	800219c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0ef      	beq.n	8001daa <HAL_RCC_OscConfig+0x22e>
 8001dca:	e020      	b.n	8001e0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <HAL_RCC_OscConfig+0x27c>)
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ddc:	f7ff fa9e 	bl	800131c <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001de2:	e00d      	b.n	8001e00 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de4:	f7ff fa9a 	bl	800131c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d906      	bls.n	8001e00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e1d2      	b.n	800219c <HAL_RCC_OscConfig+0x620>
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e00:	4b8c      	ldr	r3, [pc, #560]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1ea      	bne.n	8001de4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 80a6 	beq.w	8001f68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e20:	4b84      	ldr	r3, [pc, #528]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_OscConfig+0x2b4>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x2b6>
 8001e30:	2300      	movs	r3, #0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00d      	beq.n	8001e52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	4b7f      	ldr	r3, [pc, #508]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	4a7e      	ldr	r2, [pc, #504]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e40:	6593      	str	r3, [r2, #88]	; 0x58
 8001e42:	4b7c      	ldr	r3, [pc, #496]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e52:	4b79      	ldr	r3, [pc, #484]	; (8002038 <HAL_RCC_OscConfig+0x4bc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d118      	bne.n	8001e90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e5e:	4b76      	ldr	r3, [pc, #472]	; (8002038 <HAL_RCC_OscConfig+0x4bc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a75      	ldr	r2, [pc, #468]	; (8002038 <HAL_RCC_OscConfig+0x4bc>)
 8001e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6a:	f7ff fa57 	bl	800131c <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e72:	f7ff fa53 	bl	800131c <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e18b      	b.n	800219c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e84:	4b6c      	ldr	r3, [pc, #432]	; (8002038 <HAL_RCC_OscConfig+0x4bc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d108      	bne.n	8001eaa <HAL_RCC_OscConfig+0x32e>
 8001e98:	4b66      	ldr	r3, [pc, #408]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9e:	4a65      	ldr	r2, [pc, #404]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ea8:	e024      	b.n	8001ef4 <HAL_RCC_OscConfig+0x378>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b05      	cmp	r3, #5
 8001eb0:	d110      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x358>
 8001eb2:	4b60      	ldr	r3, [pc, #384]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb8:	4a5e      	ldr	r2, [pc, #376]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ec2:	4b5c      	ldr	r3, [pc, #368]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec8:	4a5a      	ldr	r2, [pc, #360]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ed2:	e00f      	b.n	8001ef4 <HAL_RCC_OscConfig+0x378>
 8001ed4:	4b57      	ldr	r3, [pc, #348]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eda:	4a56      	ldr	r2, [pc, #344]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ee4:	4b53      	ldr	r3, [pc, #332]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eea:	4a52      	ldr	r2, [pc, #328]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001eec:	f023 0304 	bic.w	r3, r3, #4
 8001ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d016      	beq.n	8001f2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efc:	f7ff fa0e 	bl	800131c <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f04:	f7ff fa0a 	bl	800131c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e140      	b.n	800219c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f1a:	4b46      	ldr	r3, [pc, #280]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0ed      	beq.n	8001f04 <HAL_RCC_OscConfig+0x388>
 8001f28:	e015      	b.n	8001f56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2a:	f7ff f9f7 	bl	800131c <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f30:	e00a      	b.n	8001f48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7ff f9f3 	bl	800131c <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e129      	b.n	800219c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f48:	4b3a      	ldr	r3, [pc, #232]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1ed      	bne.n	8001f32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f56:	7ffb      	ldrb	r3, [r7, #31]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d105      	bne.n	8001f68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f5c:	4b35      	ldr	r3, [pc, #212]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	4a34      	ldr	r2, [pc, #208]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d03c      	beq.n	8001fee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01c      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f82:	4a2c      	ldr	r2, [pc, #176]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8c:	f7ff f9c6 	bl	800131c <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f94:	f7ff f9c2 	bl	800131c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e0fa      	b.n	800219c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fa6:	4b23      	ldr	r3, [pc, #140]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ef      	beq.n	8001f94 <HAL_RCC_OscConfig+0x418>
 8001fb4:	e01b      	b.n	8001fee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fbc:	4a1d      	ldr	r2, [pc, #116]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001fbe:	f023 0301 	bic.w	r3, r3, #1
 8001fc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc6:	f7ff f9a9 	bl	800131c <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fce:	f7ff f9a5 	bl	800131c <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e0dd      	b.n	800219c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1ef      	bne.n	8001fce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 80d1 	beq.w	800219a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b0c      	cmp	r3, #12
 8002002:	f000 808b 	beq.w	800211c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d15e      	bne.n	80020cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a08      	ldr	r2, [pc, #32]	; (8002034 <HAL_RCC_OscConfig+0x4b8>)
 8002014:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201a:	f7ff f97f 	bl	800131c <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002020:	e00c      	b.n	800203c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002022:	f7ff f97b 	bl	800131c <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d905      	bls.n	800203c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e0b3      	b.n	800219c <HAL_RCC_OscConfig+0x620>
 8002034:	40021000 	.word	0x40021000
 8002038:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800203c:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <HAL_RCC_OscConfig+0x628>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1ec      	bne.n	8002022 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002048:	4b56      	ldr	r3, [pc, #344]	; (80021a4 <HAL_RCC_OscConfig+0x628>)
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	4b56      	ldr	r3, [pc, #344]	; (80021a8 <HAL_RCC_OscConfig+0x62c>)
 800204e:	4013      	ands	r3, r2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6a11      	ldr	r1, [r2, #32]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002058:	3a01      	subs	r2, #1
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	4311      	orrs	r1, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	4311      	orrs	r1, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800206a:	0852      	lsrs	r2, r2, #1
 800206c:	3a01      	subs	r2, #1
 800206e:	0552      	lsls	r2, r2, #21
 8002070:	4311      	orrs	r1, r2
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002076:	0852      	lsrs	r2, r2, #1
 8002078:	3a01      	subs	r2, #1
 800207a:	0652      	lsls	r2, r2, #25
 800207c:	4311      	orrs	r1, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002082:	06d2      	lsls	r2, r2, #27
 8002084:	430a      	orrs	r2, r1
 8002086:	4947      	ldr	r1, [pc, #284]	; (80021a4 <HAL_RCC_OscConfig+0x628>)
 8002088:	4313      	orrs	r3, r2
 800208a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800208c:	4b45      	ldr	r3, [pc, #276]	; (80021a4 <HAL_RCC_OscConfig+0x628>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a44      	ldr	r2, [pc, #272]	; (80021a4 <HAL_RCC_OscConfig+0x628>)
 8002092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002096:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002098:	4b42      	ldr	r3, [pc, #264]	; (80021a4 <HAL_RCC_OscConfig+0x628>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4a41      	ldr	r2, [pc, #260]	; (80021a4 <HAL_RCC_OscConfig+0x628>)
 800209e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff f93a 	bl	800131c <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ac:	f7ff f936 	bl	800131c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e06e      	b.n	800219c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020be:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <HAL_RCC_OscConfig+0x628>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x530>
 80020ca:	e066      	b.n	800219a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020cc:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <HAL_RCC_OscConfig+0x628>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a34      	ldr	r2, [pc, #208]	; (80021a4 <HAL_RCC_OscConfig+0x628>)
 80020d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020d6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020d8:	4b32      	ldr	r3, [pc, #200]	; (80021a4 <HAL_RCC_OscConfig+0x628>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4a31      	ldr	r2, [pc, #196]	; (80021a4 <HAL_RCC_OscConfig+0x628>)
 80020de:	f023 0303 	bic.w	r3, r3, #3
 80020e2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80020e4:	4b2f      	ldr	r3, [pc, #188]	; (80021a4 <HAL_RCC_OscConfig+0x628>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4a2e      	ldr	r2, [pc, #184]	; (80021a4 <HAL_RCC_OscConfig+0x628>)
 80020ea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80020ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7ff f912 	bl	800131c <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fc:	f7ff f90e 	bl	800131c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e046      	b.n	800219c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800210e:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_RCC_OscConfig+0x628>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x580>
 800211a:	e03e      	b.n	800219a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e039      	b.n	800219c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002128:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <HAL_RCC_OscConfig+0x628>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f003 0203 	and.w	r2, r3, #3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	429a      	cmp	r2, r3
 800213a:	d12c      	bne.n	8002196 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	3b01      	subs	r3, #1
 8002148:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214a:	429a      	cmp	r2, r3
 800214c:	d123      	bne.n	8002196 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d11b      	bne.n	8002196 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d113      	bne.n	8002196 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	3b01      	subs	r3, #1
 800217c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800217e:	429a      	cmp	r2, r3
 8002180:	d109      	bne.n	8002196 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218c:	085b      	lsrs	r3, r3, #1
 800218e:	3b01      	subs	r3, #1
 8002190:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002192:	429a      	cmp	r2, r3
 8002194:	d001      	beq.n	800219a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3720      	adds	r7, #32
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	019f800c 	.word	0x019f800c

080021ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e11e      	b.n	8002402 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021c4:	4b91      	ldr	r3, [pc, #580]	; (800240c <HAL_RCC_ClockConfig+0x260>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d910      	bls.n	80021f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	4b8e      	ldr	r3, [pc, #568]	; (800240c <HAL_RCC_ClockConfig+0x260>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 020f 	bic.w	r2, r3, #15
 80021da:	498c      	ldr	r1, [pc, #560]	; (800240c <HAL_RCC_ClockConfig+0x260>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b8a      	ldr	r3, [pc, #552]	; (800240c <HAL_RCC_ClockConfig+0x260>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e106      	b.n	8002402 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d073      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b03      	cmp	r3, #3
 8002206:	d129      	bne.n	800225c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002208:	4b81      	ldr	r3, [pc, #516]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0f4      	b.n	8002402 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002218:	f000 f9d0 	bl	80025bc <RCC_GetSysClockFreqFromPLLSource>
 800221c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4a7c      	ldr	r2, [pc, #496]	; (8002414 <HAL_RCC_ClockConfig+0x268>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d93f      	bls.n	80022a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002226:	4b7a      	ldr	r3, [pc, #488]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800223a:	2b00      	cmp	r3, #0
 800223c:	d033      	beq.n	80022a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002242:	2b00      	cmp	r3, #0
 8002244:	d12f      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002246:	4b72      	ldr	r3, [pc, #456]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800224e:	4a70      	ldr	r2, [pc, #448]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 8002250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002254:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	e024      	b.n	80022a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d107      	bne.n	8002274 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002264:	4b6a      	ldr	r3, [pc, #424]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d109      	bne.n	8002284 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0c6      	b.n	8002402 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002274:	4b66      	ldr	r3, [pc, #408]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0be      	b.n	8002402 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002284:	f000 f8ce 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 8002288:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4a61      	ldr	r2, [pc, #388]	; (8002414 <HAL_RCC_ClockConfig+0x268>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d909      	bls.n	80022a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002292:	4b5f      	ldr	r3, [pc, #380]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800229a:	4a5d      	ldr	r2, [pc, #372]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 800229c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022a6:	4b5a      	ldr	r3, [pc, #360]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f023 0203 	bic.w	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4957      	ldr	r1, [pc, #348]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022b8:	f7ff f830 	bl	800131c <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c0:	f7ff f82c 	bl	800131c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e095      	b.n	8002402 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	4b4e      	ldr	r3, [pc, #312]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 020c 	and.w	r2, r3, #12
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d1eb      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d023      	beq.n	800233c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002300:	4b43      	ldr	r3, [pc, #268]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4a42      	ldr	r2, [pc, #264]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 8002306:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800230a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d007      	beq.n	8002328 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002318:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002320:	4a3b      	ldr	r2, [pc, #236]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 8002322:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002326:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002328:	4b39      	ldr	r3, [pc, #228]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	4936      	ldr	r1, [pc, #216]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]
 800233a:	e008      	b.n	800234e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2b80      	cmp	r3, #128	; 0x80
 8002340:	d105      	bne.n	800234e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002342:	4b33      	ldr	r3, [pc, #204]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	4a32      	ldr	r2, [pc, #200]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 8002348:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800234c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800234e:	4b2f      	ldr	r3, [pc, #188]	; (800240c <HAL_RCC_ClockConfig+0x260>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d21d      	bcs.n	8002398 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235c:	4b2b      	ldr	r3, [pc, #172]	; (800240c <HAL_RCC_ClockConfig+0x260>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 020f 	bic.w	r2, r3, #15
 8002364:	4929      	ldr	r1, [pc, #164]	; (800240c <HAL_RCC_ClockConfig+0x260>)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800236c:	f7fe ffd6 	bl	800131c <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	e00a      	b.n	800238a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002374:	f7fe ffd2 	bl	800131c <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e03b      	b.n	8002402 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_RCC_ClockConfig+0x260>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d1ed      	bne.n	8002374 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4917      	ldr	r1, [pc, #92]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023c2:	4b13      	ldr	r3, [pc, #76]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	490f      	ldr	r1, [pc, #60]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023d6:	f000 f825 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 80023da:	4602      	mov	r2, r0
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <HAL_RCC_ClockConfig+0x264>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	490c      	ldr	r1, [pc, #48]	; (8002418 <HAL_RCC_ClockConfig+0x26c>)
 80023e8:	5ccb      	ldrb	r3, [r1, r3]
 80023ea:	f003 031f 	and.w	r3, r3, #31
 80023ee:	fa22 f303 	lsr.w	r3, r2, r3
 80023f2:	4a0a      	ldr	r2, [pc, #40]	; (800241c <HAL_RCC_ClockConfig+0x270>)
 80023f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023f6:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <HAL_RCC_ClockConfig+0x274>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fbe6 	bl	8000bcc <HAL_InitTick>
 8002400:	4603      	mov	r3, r0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40022000 	.word	0x40022000
 8002410:	40021000 	.word	0x40021000
 8002414:	04c4b400 	.word	0x04c4b400
 8002418:	08007ea0 	.word	0x08007ea0
 800241c:	20000004 	.word	0x20000004
 8002420:	20000008 	.word	0x20000008

08002424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800242a:	4b2c      	ldr	r3, [pc, #176]	; (80024dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b04      	cmp	r3, #4
 8002434:	d102      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002436:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	e047      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800243c:	4b27      	ldr	r3, [pc, #156]	; (80024dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b08      	cmp	r3, #8
 8002446:	d102      	bne.n	800244e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002448:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	e03e      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800244e:	4b23      	ldr	r3, [pc, #140]	; (80024dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d136      	bne.n	80024c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800245a:	4b20      	ldr	r3, [pc, #128]	; (80024dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002464:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	3301      	adds	r3, #1
 8002470:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d10c      	bne.n	8002492 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002478:	4a1a      	ldr	r2, [pc, #104]	; (80024e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002480:	4a16      	ldr	r2, [pc, #88]	; (80024dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002482:	68d2      	ldr	r2, [r2, #12]
 8002484:	0a12      	lsrs	r2, r2, #8
 8002486:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800248a:	fb02 f303 	mul.w	r3, r2, r3
 800248e:	617b      	str	r3, [r7, #20]
      break;
 8002490:	e00c      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002492:	4a13      	ldr	r2, [pc, #76]	; (80024e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	fbb2 f3f3 	udiv	r3, r2, r3
 800249a:	4a10      	ldr	r2, [pc, #64]	; (80024dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800249c:	68d2      	ldr	r2, [r2, #12]
 800249e:	0a12      	lsrs	r2, r2, #8
 80024a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
 80024a8:	617b      	str	r3, [r7, #20]
      break;
 80024aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	0e5b      	lsrs	r3, r3, #25
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	3301      	adds	r3, #1
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	e001      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024cc:	693b      	ldr	r3, [r7, #16]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000
 80024e0:	00f42400 	.word	0x00f42400
 80024e4:	016e3600 	.word	0x016e3600

080024e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024ec:	4b03      	ldr	r3, [pc, #12]	; (80024fc <HAL_RCC_GetHCLKFreq+0x14>)
 80024ee:	681b      	ldr	r3, [r3, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000004 	.word	0x20000004

08002500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002504:	f7ff fff0 	bl	80024e8 <HAL_RCC_GetHCLKFreq>
 8002508:	4602      	mov	r2, r0
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_RCC_GetPCLK1Freq+0x24>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	4904      	ldr	r1, [pc, #16]	; (8002528 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002516:	5ccb      	ldrb	r3, [r1, r3]
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002520:	4618      	mov	r0, r3
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000
 8002528:	08007eb0 	.word	0x08007eb0

0800252c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002530:	f7ff ffda 	bl	80024e8 <HAL_RCC_GetHCLKFreq>
 8002534:	4602      	mov	r2, r0
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	0adb      	lsrs	r3, r3, #11
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	4904      	ldr	r1, [pc, #16]	; (8002554 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002542:	5ccb      	ldrb	r3, [r1, r3]
 8002544:	f003 031f 	and.w	r3, r3, #31
 8002548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000
 8002554:	08007eb0 	.word	0x08007eb0

08002558 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	220f      	movs	r2, #15
 8002566:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_RCC_GetClockConfig+0x5c>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 0203 	and.w	r2, r3, #3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_RCC_GetClockConfig+0x5c>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	08db      	lsrs	r3, r3, #3
 8002592:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <HAL_RCC_GetClockConfig+0x60>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 020f 	and.w	r2, r3, #15
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	601a      	str	r2, [r3, #0]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40022000 	.word	0x40022000

080025bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025c2:	4b1e      	ldr	r3, [pc, #120]	; (800263c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025cc:	4b1b      	ldr	r3, [pc, #108]	; (800263c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	3301      	adds	r3, #1
 80025d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d10c      	bne.n	80025fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025e0:	4a17      	ldr	r2, [pc, #92]	; (8002640 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e8:	4a14      	ldr	r2, [pc, #80]	; (800263c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025ea:	68d2      	ldr	r2, [r2, #12]
 80025ec:	0a12      	lsrs	r2, r2, #8
 80025ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	617b      	str	r3, [r7, #20]
    break;
 80025f8:	e00c      	b.n	8002614 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025fa:	4a12      	ldr	r2, [pc, #72]	; (8002644 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	4a0e      	ldr	r2, [pc, #56]	; (800263c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002604:	68d2      	ldr	r2, [r2, #12]
 8002606:	0a12      	lsrs	r2, r2, #8
 8002608:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800260c:	fb02 f303 	mul.w	r3, r2, r3
 8002610:	617b      	str	r3, [r7, #20]
    break;
 8002612:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	0e5b      	lsrs	r3, r3, #25
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	3301      	adds	r3, #1
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	fbb2 f3f3 	udiv	r3, r2, r3
 800262c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800262e:	687b      	ldr	r3, [r7, #4]
}
 8002630:	4618      	mov	r0, r3
 8002632:	371c      	adds	r7, #28
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	40021000 	.word	0x40021000
 8002640:	016e3600 	.word	0x016e3600
 8002644:	00f42400 	.word	0x00f42400

08002648 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002650:	2300      	movs	r3, #0
 8002652:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002654:	2300      	movs	r3, #0
 8002656:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8098 	beq.w	8002796 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266a:	4b43      	ldr	r3, [pc, #268]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10d      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	4b40      	ldr	r3, [pc, #256]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	4a3f      	ldr	r2, [pc, #252]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002680:	6593      	str	r3, [r2, #88]	; 0x58
 8002682:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268e:	2301      	movs	r3, #1
 8002690:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002692:	4b3a      	ldr	r3, [pc, #232]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a39      	ldr	r2, [pc, #228]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800269e:	f7fe fe3d 	bl	800131c <HAL_GetTick>
 80026a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026a4:	e009      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a6:	f7fe fe39 	bl	800131c <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d902      	bls.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	74fb      	strb	r3, [r7, #19]
        break;
 80026b8:	e005      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026ba:	4b30      	ldr	r3, [pc, #192]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0ef      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80026c6:	7cfb      	ldrb	r3, [r7, #19]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d159      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026cc:	4b2a      	ldr	r3, [pc, #168]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d01e      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d019      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026e8:	4b23      	ldr	r3, [pc, #140]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026f4:	4b20      	ldr	r3, [pc, #128]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	4a1f      	ldr	r2, [pc, #124]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002704:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	4a1b      	ldr	r2, [pc, #108]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800270c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002714:	4a18      	ldr	r2, [pc, #96]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d016      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7fe fdf9 	bl	800131c <HAL_GetTick>
 800272a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272c:	e00b      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272e:	f7fe fdf5 	bl	800131c <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	f241 3288 	movw	r2, #5000	; 0x1388
 800273c:	4293      	cmp	r3, r2
 800273e:	d902      	bls.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	74fb      	strb	r3, [r7, #19]
            break;
 8002744:	e006      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0ec      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10b      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800275a:	4b07      	ldr	r3, [pc, #28]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002768:	4903      	ldr	r1, [pc, #12]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002770:	e008      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002772:	7cfb      	ldrb	r3, [r7, #19]
 8002774:	74bb      	strb	r3, [r7, #18]
 8002776:	e005      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002778:	40021000 	.word	0x40021000
 800277c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002780:	7cfb      	ldrb	r3, [r7, #19]
 8002782:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002784:	7c7b      	ldrb	r3, [r7, #17]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d105      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278a:	4ba7      	ldr	r3, [pc, #668]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278e:	4aa6      	ldr	r2, [pc, #664]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002794:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027a2:	4ba1      	ldr	r3, [pc, #644]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	f023 0203 	bic.w	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	499d      	ldr	r1, [pc, #628]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027c4:	4b98      	ldr	r3, [pc, #608]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	f023 020c 	bic.w	r2, r3, #12
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	4995      	ldr	r1, [pc, #596]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00a      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027e6:	4b90      	ldr	r3, [pc, #576]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	498c      	ldr	r1, [pc, #560]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002808:	4b87      	ldr	r3, [pc, #540]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	4984      	ldr	r1, [pc, #528]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800282a:	4b7f      	ldr	r3, [pc, #508]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800282c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002830:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	497b      	ldr	r1, [pc, #492]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0320 	and.w	r3, r3, #32
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800284c:	4b76      	ldr	r3, [pc, #472]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002852:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	4973      	ldr	r1, [pc, #460]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800286e:	4b6e      	ldr	r3, [pc, #440]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002874:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	496a      	ldr	r1, [pc, #424]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002890:	4b65      	ldr	r3, [pc, #404]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4962      	ldr	r1, [pc, #392]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028b2:	4b5d      	ldr	r3, [pc, #372]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	4959      	ldr	r1, [pc, #356]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028d4:	4b54      	ldr	r3, [pc, #336]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028da:	f023 0203 	bic.w	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	4951      	ldr	r1, [pc, #324]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028f6:	4b4c      	ldr	r3, [pc, #304]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	4948      	ldr	r1, [pc, #288]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	2b00      	cmp	r3, #0
 8002916:	d015      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002918:	4b43      	ldr	r3, [pc, #268]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	4940      	ldr	r1, [pc, #256]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002936:	d105      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002938:	4b3b      	ldr	r3, [pc, #236]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4a3a      	ldr	r2, [pc, #232]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002942:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800294c:	2b00      	cmp	r3, #0
 800294e:	d015      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002950:	4b35      	ldr	r3, [pc, #212]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295e:	4932      	ldr	r1, [pc, #200]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800296e:	d105      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002970:	4b2d      	ldr	r3, [pc, #180]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a2c      	ldr	r2, [pc, #176]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800297a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d015      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002988:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	4924      	ldr	r1, [pc, #144]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029a6:	d105      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a8:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d015      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	4916      	ldr	r1, [pc, #88]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029de:	d105      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4a10      	ldr	r2, [pc, #64]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d019      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	4908      	ldr	r1, [pc, #32]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a16:	d109      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a02      	ldr	r2, [pc, #8]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a22:	60d3      	str	r3, [r2, #12]
 8002a24:	e002      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d015      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a38:	4b29      	ldr	r3, [pc, #164]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	4926      	ldr	r1, [pc, #152]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a56:	d105      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a58:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a20      	ldr	r2, [pc, #128]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a62:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d015      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7e:	4918      	ldr	r1, [pc, #96]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8e:	d105      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a90:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d015      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002aa8:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002aae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab6:	490a      	ldr	r1, [pc, #40]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ac6:	d105      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ad2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002ad4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e049      	b.n	8002b8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe faae 	bl	800106c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	4619      	mov	r1, r3
 8002b22:	4610      	mov	r0, r2
 8002b24:	f000 fdf4 	bl	8003710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d001      	beq.n	8002bac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e054      	b.n	8002c56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a26      	ldr	r2, [pc, #152]	; (8002c64 <HAL_TIM_Base_Start_IT+0xd0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d022      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x80>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd6:	d01d      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x80>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a22      	ldr	r2, [pc, #136]	; (8002c68 <HAL_TIM_Base_Start_IT+0xd4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d018      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x80>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a21      	ldr	r2, [pc, #132]	; (8002c6c <HAL_TIM_Base_Start_IT+0xd8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d013      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x80>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a1f      	ldr	r2, [pc, #124]	; (8002c70 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00e      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x80>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1e      	ldr	r2, [pc, #120]	; (8002c74 <HAL_TIM_Base_Start_IT+0xe0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d009      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x80>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1c      	ldr	r2, [pc, #112]	; (8002c78 <HAL_TIM_Base_Start_IT+0xe4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d004      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x80>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a1b      	ldr	r2, [pc, #108]	; (8002c7c <HAL_TIM_Base_Start_IT+0xe8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d115      	bne.n	8002c40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <HAL_TIM_Base_Start_IT+0xec>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b06      	cmp	r3, #6
 8002c24:	d015      	beq.n	8002c52 <HAL_TIM_Base_Start_IT+0xbe>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d011      	beq.n	8002c52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0201 	orr.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c3e:	e008      	b.n	8002c52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	e000      	b.n	8002c54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40000800 	.word	0x40000800
 8002c70:	40000c00 	.word	0x40000c00
 8002c74:	40013400 	.word	0x40013400
 8002c78:	40014000 	.word	0x40014000
 8002c7c:	40015000 	.word	0x40015000
 8002c80:	00010007 	.word	0x00010007

08002c84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e049      	b.n	8002d2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f841 	bl	8002d32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f000 fd24 	bl	8003710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <HAL_TIM_PWM_Start+0x24>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	bf14      	ite	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	2300      	moveq	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	e03c      	b.n	8002de6 <HAL_TIM_PWM_Start+0x9e>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d109      	bne.n	8002d86 <HAL_TIM_PWM_Start+0x3e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	bf14      	ite	ne
 8002d7e:	2301      	movne	r3, #1
 8002d80:	2300      	moveq	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	e02f      	b.n	8002de6 <HAL_TIM_PWM_Start+0x9e>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d109      	bne.n	8002da0 <HAL_TIM_PWM_Start+0x58>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	bf14      	ite	ne
 8002d98:	2301      	movne	r3, #1
 8002d9a:	2300      	moveq	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e022      	b.n	8002de6 <HAL_TIM_PWM_Start+0x9e>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2b0c      	cmp	r3, #12
 8002da4:	d109      	bne.n	8002dba <HAL_TIM_PWM_Start+0x72>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	bf14      	ite	ne
 8002db2:	2301      	movne	r3, #1
 8002db4:	2300      	moveq	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	e015      	b.n	8002de6 <HAL_TIM_PWM_Start+0x9e>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	d109      	bne.n	8002dd4 <HAL_TIM_PWM_Start+0x8c>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	bf14      	ite	ne
 8002dcc:	2301      	movne	r3, #1
 8002dce:	2300      	moveq	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	e008      	b.n	8002de6 <HAL_TIM_PWM_Start+0x9e>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0a6      	b.n	8002f3c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d104      	bne.n	8002dfe <HAL_TIM_PWM_Start+0xb6>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dfc:	e023      	b.n	8002e46 <HAL_TIM_PWM_Start+0xfe>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d104      	bne.n	8002e0e <HAL_TIM_PWM_Start+0xc6>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e0c:	e01b      	b.n	8002e46 <HAL_TIM_PWM_Start+0xfe>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d104      	bne.n	8002e1e <HAL_TIM_PWM_Start+0xd6>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e1c:	e013      	b.n	8002e46 <HAL_TIM_PWM_Start+0xfe>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	d104      	bne.n	8002e2e <HAL_TIM_PWM_Start+0xe6>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e2c:	e00b      	b.n	8002e46 <HAL_TIM_PWM_Start+0xfe>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d104      	bne.n	8002e3e <HAL_TIM_PWM_Start+0xf6>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e3c:	e003      	b.n	8002e46 <HAL_TIM_PWM_Start+0xfe>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2202      	movs	r2, #2
 8002e42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	6839      	ldr	r1, [r7, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f001 f8cc 	bl	8003fec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a3a      	ldr	r2, [pc, #232]	; (8002f44 <HAL_TIM_PWM_Start+0x1fc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d018      	beq.n	8002e90 <HAL_TIM_PWM_Start+0x148>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a39      	ldr	r2, [pc, #228]	; (8002f48 <HAL_TIM_PWM_Start+0x200>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d013      	beq.n	8002e90 <HAL_TIM_PWM_Start+0x148>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a37      	ldr	r2, [pc, #220]	; (8002f4c <HAL_TIM_PWM_Start+0x204>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00e      	beq.n	8002e90 <HAL_TIM_PWM_Start+0x148>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a36      	ldr	r2, [pc, #216]	; (8002f50 <HAL_TIM_PWM_Start+0x208>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d009      	beq.n	8002e90 <HAL_TIM_PWM_Start+0x148>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a34      	ldr	r2, [pc, #208]	; (8002f54 <HAL_TIM_PWM_Start+0x20c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d004      	beq.n	8002e90 <HAL_TIM_PWM_Start+0x148>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a33      	ldr	r2, [pc, #204]	; (8002f58 <HAL_TIM_PWM_Start+0x210>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d101      	bne.n	8002e94 <HAL_TIM_PWM_Start+0x14c>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <HAL_TIM_PWM_Start+0x14e>
 8002e94:	2300      	movs	r3, #0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d007      	beq.n	8002eaa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a25      	ldr	r2, [pc, #148]	; (8002f44 <HAL_TIM_PWM_Start+0x1fc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d022      	beq.n	8002efa <HAL_TIM_PWM_Start+0x1b2>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebc:	d01d      	beq.n	8002efa <HAL_TIM_PWM_Start+0x1b2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <HAL_TIM_PWM_Start+0x214>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d018      	beq.n	8002efa <HAL_TIM_PWM_Start+0x1b2>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a24      	ldr	r2, [pc, #144]	; (8002f60 <HAL_TIM_PWM_Start+0x218>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d013      	beq.n	8002efa <HAL_TIM_PWM_Start+0x1b2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a23      	ldr	r2, [pc, #140]	; (8002f64 <HAL_TIM_PWM_Start+0x21c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00e      	beq.n	8002efa <HAL_TIM_PWM_Start+0x1b2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a19      	ldr	r2, [pc, #100]	; (8002f48 <HAL_TIM_PWM_Start+0x200>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d009      	beq.n	8002efa <HAL_TIM_PWM_Start+0x1b2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a18      	ldr	r2, [pc, #96]	; (8002f4c <HAL_TIM_PWM_Start+0x204>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d004      	beq.n	8002efa <HAL_TIM_PWM_Start+0x1b2>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <HAL_TIM_PWM_Start+0x210>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d115      	bne.n	8002f26 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_TIM_PWM_Start+0x220>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b06      	cmp	r3, #6
 8002f0a:	d015      	beq.n	8002f38 <HAL_TIM_PWM_Start+0x1f0>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f12:	d011      	beq.n	8002f38 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f24:	e008      	b.n	8002f38 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	e000      	b.n	8002f3a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40012c00 	.word	0x40012c00
 8002f48:	40013400 	.word	0x40013400
 8002f4c:	40014000 	.word	0x40014000
 8002f50:	40014400 	.word	0x40014400
 8002f54:	40014800 	.word	0x40014800
 8002f58:	40015000 	.word	0x40015000
 8002f5c:	40000400 	.word	0x40000400
 8002f60:	40000800 	.word	0x40000800
 8002f64:	40000c00 	.word	0x40000c00
 8002f68:	00010007 	.word	0x00010007

08002f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d122      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d11b      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0202 	mvn.w	r2, #2
 8002f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fb90 	bl	80036d4 <HAL_TIM_IC_CaptureCallback>
 8002fb4:	e005      	b.n	8002fc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fb82 	bl	80036c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 fb93 	bl	80036e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d122      	bne.n	800301c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d11b      	bne.n	800301c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0204 	mvn.w	r2, #4
 8002fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fb66 	bl	80036d4 <HAL_TIM_IC_CaptureCallback>
 8003008:	e005      	b.n	8003016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fb58 	bl	80036c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fb69 	bl	80036e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b08      	cmp	r3, #8
 8003028:	d122      	bne.n	8003070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b08      	cmp	r3, #8
 8003036:	d11b      	bne.n	8003070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0208 	mvn.w	r2, #8
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2204      	movs	r2, #4
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fb3c 	bl	80036d4 <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fb2e 	bl	80036c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fb3f 	bl	80036e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b10      	cmp	r3, #16
 800307c:	d122      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b10      	cmp	r3, #16
 800308a:	d11b      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0210 	mvn.w	r2, #16
 8003094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2208      	movs	r2, #8
 800309a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fb12 	bl	80036d4 <HAL_TIM_IC_CaptureCallback>
 80030b0:	e005      	b.n	80030be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fb04 	bl	80036c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fb15 	bl	80036e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d10e      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d107      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0201 	mvn.w	r2, #1
 80030e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fd fd32 	bl	8000b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fa:	2b80      	cmp	r3, #128	; 0x80
 80030fc:	d10e      	bne.n	800311c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003108:	2b80      	cmp	r3, #128	; 0x80
 800310a:	d107      	bne.n	800311c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f001 f9a2 	bl	8004460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800312a:	d10e      	bne.n	800314a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b80      	cmp	r3, #128	; 0x80
 8003138:	d107      	bne.n	800314a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f001 f995 	bl	8004474 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003154:	2b40      	cmp	r3, #64	; 0x40
 8003156:	d10e      	bne.n	8003176 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	2b40      	cmp	r3, #64	; 0x40
 8003164:	d107      	bne.n	8003176 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800316e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fac3 	bl	80036fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b20      	cmp	r3, #32
 8003182:	d10e      	bne.n	80031a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b20      	cmp	r3, #32
 8003190:	d107      	bne.n	80031a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f06f 0220 	mvn.w	r2, #32
 800319a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f001 f955 	bl	800444c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031b0:	d10f      	bne.n	80031d2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031c0:	d107      	bne.n	80031d2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80031ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f001 f95b 	bl	8004488 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031e0:	d10f      	bne.n	8003202 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031f0:	d107      	bne.n	8003202 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80031fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f001 f94d 	bl	800449c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003210:	d10f      	bne.n	8003232 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003220:	d107      	bne.n	8003232 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800322a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f001 f93f 	bl	80044b0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800323c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003240:	d10f      	bne.n	8003262 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800324c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003250:	d107      	bne.n	8003262 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800325a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f001 f931 	bl	80044c4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003286:	2302      	movs	r3, #2
 8003288:	e0ff      	b.n	800348a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b14      	cmp	r3, #20
 8003296:	f200 80f0 	bhi.w	800347a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800329a:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800329c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a0:	080032f5 	.word	0x080032f5
 80032a4:	0800347b 	.word	0x0800347b
 80032a8:	0800347b 	.word	0x0800347b
 80032ac:	0800347b 	.word	0x0800347b
 80032b0:	08003335 	.word	0x08003335
 80032b4:	0800347b 	.word	0x0800347b
 80032b8:	0800347b 	.word	0x0800347b
 80032bc:	0800347b 	.word	0x0800347b
 80032c0:	08003377 	.word	0x08003377
 80032c4:	0800347b 	.word	0x0800347b
 80032c8:	0800347b 	.word	0x0800347b
 80032cc:	0800347b 	.word	0x0800347b
 80032d0:	080033b7 	.word	0x080033b7
 80032d4:	0800347b 	.word	0x0800347b
 80032d8:	0800347b 	.word	0x0800347b
 80032dc:	0800347b 	.word	0x0800347b
 80032e0:	080033f9 	.word	0x080033f9
 80032e4:	0800347b 	.word	0x0800347b
 80032e8:	0800347b 	.word	0x0800347b
 80032ec:	0800347b 	.word	0x0800347b
 80032f0:	08003439 	.word	0x08003439
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fab0 	bl	8003860 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0208 	orr.w	r2, r2, #8
 800330e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0204 	bic.w	r2, r2, #4
 800331e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6999      	ldr	r1, [r3, #24]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	619a      	str	r2, [r3, #24]
      break;
 8003332:	e0a5      	b.n	8003480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fb2a 	bl	8003994 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800334e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6999      	ldr	r1, [r3, #24]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	021a      	lsls	r2, r3, #8
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	619a      	str	r2, [r3, #24]
      break;
 8003374:	e084      	b.n	8003480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fb9d 	bl	8003abc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0208 	orr.w	r2, r2, #8
 8003390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0204 	bic.w	r2, r2, #4
 80033a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69d9      	ldr	r1, [r3, #28]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	61da      	str	r2, [r3, #28]
      break;
 80033b4:	e064      	b.n	8003480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fc0f 	bl	8003be0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69da      	ldr	r2, [r3, #28]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69d9      	ldr	r1, [r3, #28]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	021a      	lsls	r2, r3, #8
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	61da      	str	r2, [r3, #28]
      break;
 80033f6:	e043      	b.n	8003480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fc82 	bl	8003d08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0208 	orr.w	r2, r2, #8
 8003412:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0204 	bic.w	r2, r2, #4
 8003422:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003436:	e023      	b.n	8003480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fccc 	bl	8003ddc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003452:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003462:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	021a      	lsls	r2, r3, #8
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003478:	e002      	b.n	8003480 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	75fb      	strb	r3, [r7, #23]
      break;
 800347e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003488:	7dfb      	ldrb	r3, [r7, #23]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop

08003494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_TIM_ConfigClockSource+0x1c>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e0f6      	b.n	800369e <HAL_TIM_ConfigClockSource+0x20a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80034ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a6f      	ldr	r2, [pc, #444]	; (80036a8 <HAL_TIM_ConfigClockSource+0x214>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	f000 80c1 	beq.w	8003672 <HAL_TIM_ConfigClockSource+0x1de>
 80034f0:	4a6d      	ldr	r2, [pc, #436]	; (80036a8 <HAL_TIM_ConfigClockSource+0x214>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	f200 80c6 	bhi.w	8003684 <HAL_TIM_ConfigClockSource+0x1f0>
 80034f8:	4a6c      	ldr	r2, [pc, #432]	; (80036ac <HAL_TIM_ConfigClockSource+0x218>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	f000 80b9 	beq.w	8003672 <HAL_TIM_ConfigClockSource+0x1de>
 8003500:	4a6a      	ldr	r2, [pc, #424]	; (80036ac <HAL_TIM_ConfigClockSource+0x218>)
 8003502:	4293      	cmp	r3, r2
 8003504:	f200 80be 	bhi.w	8003684 <HAL_TIM_ConfigClockSource+0x1f0>
 8003508:	4a69      	ldr	r2, [pc, #420]	; (80036b0 <HAL_TIM_ConfigClockSource+0x21c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	f000 80b1 	beq.w	8003672 <HAL_TIM_ConfigClockSource+0x1de>
 8003510:	4a67      	ldr	r2, [pc, #412]	; (80036b0 <HAL_TIM_ConfigClockSource+0x21c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	f200 80b6 	bhi.w	8003684 <HAL_TIM_ConfigClockSource+0x1f0>
 8003518:	4a66      	ldr	r2, [pc, #408]	; (80036b4 <HAL_TIM_ConfigClockSource+0x220>)
 800351a:	4293      	cmp	r3, r2
 800351c:	f000 80a9 	beq.w	8003672 <HAL_TIM_ConfigClockSource+0x1de>
 8003520:	4a64      	ldr	r2, [pc, #400]	; (80036b4 <HAL_TIM_ConfigClockSource+0x220>)
 8003522:	4293      	cmp	r3, r2
 8003524:	f200 80ae 	bhi.w	8003684 <HAL_TIM_ConfigClockSource+0x1f0>
 8003528:	4a63      	ldr	r2, [pc, #396]	; (80036b8 <HAL_TIM_ConfigClockSource+0x224>)
 800352a:	4293      	cmp	r3, r2
 800352c:	f000 80a1 	beq.w	8003672 <HAL_TIM_ConfigClockSource+0x1de>
 8003530:	4a61      	ldr	r2, [pc, #388]	; (80036b8 <HAL_TIM_ConfigClockSource+0x224>)
 8003532:	4293      	cmp	r3, r2
 8003534:	f200 80a6 	bhi.w	8003684 <HAL_TIM_ConfigClockSource+0x1f0>
 8003538:	4a60      	ldr	r2, [pc, #384]	; (80036bc <HAL_TIM_ConfigClockSource+0x228>)
 800353a:	4293      	cmp	r3, r2
 800353c:	f000 8099 	beq.w	8003672 <HAL_TIM_ConfigClockSource+0x1de>
 8003540:	4a5e      	ldr	r2, [pc, #376]	; (80036bc <HAL_TIM_ConfigClockSource+0x228>)
 8003542:	4293      	cmp	r3, r2
 8003544:	f200 809e 	bhi.w	8003684 <HAL_TIM_ConfigClockSource+0x1f0>
 8003548:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800354c:	f000 8091 	beq.w	8003672 <HAL_TIM_ConfigClockSource+0x1de>
 8003550:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003554:	f200 8096 	bhi.w	8003684 <HAL_TIM_ConfigClockSource+0x1f0>
 8003558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800355c:	f000 8089 	beq.w	8003672 <HAL_TIM_ConfigClockSource+0x1de>
 8003560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003564:	f200 808e 	bhi.w	8003684 <HAL_TIM_ConfigClockSource+0x1f0>
 8003568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800356c:	d03e      	beq.n	80035ec <HAL_TIM_ConfigClockSource+0x158>
 800356e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003572:	f200 8087 	bhi.w	8003684 <HAL_TIM_ConfigClockSource+0x1f0>
 8003576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357a:	f000 8086 	beq.w	800368a <HAL_TIM_ConfigClockSource+0x1f6>
 800357e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003582:	d87f      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x1f0>
 8003584:	2b70      	cmp	r3, #112	; 0x70
 8003586:	d01a      	beq.n	80035be <HAL_TIM_ConfigClockSource+0x12a>
 8003588:	2b70      	cmp	r3, #112	; 0x70
 800358a:	d87b      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x1f0>
 800358c:	2b60      	cmp	r3, #96	; 0x60
 800358e:	d050      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x19e>
 8003590:	2b60      	cmp	r3, #96	; 0x60
 8003592:	d877      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x1f0>
 8003594:	2b50      	cmp	r3, #80	; 0x50
 8003596:	d03c      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0x17e>
 8003598:	2b50      	cmp	r3, #80	; 0x50
 800359a:	d873      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x1f0>
 800359c:	2b40      	cmp	r3, #64	; 0x40
 800359e:	d058      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0x1be>
 80035a0:	2b40      	cmp	r3, #64	; 0x40
 80035a2:	d86f      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x1f0>
 80035a4:	2b30      	cmp	r3, #48	; 0x30
 80035a6:	d064      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x1de>
 80035a8:	2b30      	cmp	r3, #48	; 0x30
 80035aa:	d86b      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x1f0>
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d060      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x1de>
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d867      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x1f0>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d05c      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x1de>
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d05a      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x1de>
 80035bc:	e062      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6899      	ldr	r1, [r3, #8]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f000 fced 	bl	8003fac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	609a      	str	r2, [r3, #8]
      break;
 80035ea:	e04f      	b.n	800368c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6899      	ldr	r1, [r3, #8]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f000 fcd6 	bl	8003fac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800360e:	609a      	str	r2, [r3, #8]
      break;
 8003610:	e03c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6859      	ldr	r1, [r3, #4]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	461a      	mov	r2, r3
 8003620:	f000 fc48 	bl	8003eb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2150      	movs	r1, #80	; 0x50
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fca1 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 8003630:	e02c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6859      	ldr	r1, [r3, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	461a      	mov	r2, r3
 8003640:	f000 fc67 	bl	8003f12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2160      	movs	r1, #96	; 0x60
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fc91 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 8003650:	e01c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	6859      	ldr	r1, [r3, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	461a      	mov	r2, r3
 8003660:	f000 fc28 	bl	8003eb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2140      	movs	r1, #64	; 0x40
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fc81 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 8003670:	e00c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4619      	mov	r1, r3
 800367c:	4610      	mov	r0, r2
 800367e:	f000 fc78 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 8003682:	e003      	b.n	800368c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
      break;
 8003688:	e000      	b.n	800368c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800368a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	00100070 	.word	0x00100070
 80036ac:	00100060 	.word	0x00100060
 80036b0:	00100050 	.word	0x00100050
 80036b4:	00100040 	.word	0x00100040
 80036b8:	00100030 	.word	0x00100030
 80036bc:	00100020 	.word	0x00100020

080036c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a46      	ldr	r2, [pc, #280]	; (800383c <TIM_Base_SetConfig+0x12c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d017      	beq.n	8003758 <TIM_Base_SetConfig+0x48>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372e:	d013      	beq.n	8003758 <TIM_Base_SetConfig+0x48>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a43      	ldr	r2, [pc, #268]	; (8003840 <TIM_Base_SetConfig+0x130>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00f      	beq.n	8003758 <TIM_Base_SetConfig+0x48>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a42      	ldr	r2, [pc, #264]	; (8003844 <TIM_Base_SetConfig+0x134>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00b      	beq.n	8003758 <TIM_Base_SetConfig+0x48>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a41      	ldr	r2, [pc, #260]	; (8003848 <TIM_Base_SetConfig+0x138>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d007      	beq.n	8003758 <TIM_Base_SetConfig+0x48>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a40      	ldr	r2, [pc, #256]	; (800384c <TIM_Base_SetConfig+0x13c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_Base_SetConfig+0x48>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a3f      	ldr	r2, [pc, #252]	; (8003850 <TIM_Base_SetConfig+0x140>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d108      	bne.n	800376a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a33      	ldr	r2, [pc, #204]	; (800383c <TIM_Base_SetConfig+0x12c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d023      	beq.n	80037ba <TIM_Base_SetConfig+0xaa>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003778:	d01f      	beq.n	80037ba <TIM_Base_SetConfig+0xaa>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a30      	ldr	r2, [pc, #192]	; (8003840 <TIM_Base_SetConfig+0x130>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d01b      	beq.n	80037ba <TIM_Base_SetConfig+0xaa>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a2f      	ldr	r2, [pc, #188]	; (8003844 <TIM_Base_SetConfig+0x134>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d017      	beq.n	80037ba <TIM_Base_SetConfig+0xaa>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a2e      	ldr	r2, [pc, #184]	; (8003848 <TIM_Base_SetConfig+0x138>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d013      	beq.n	80037ba <TIM_Base_SetConfig+0xaa>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a2d      	ldr	r2, [pc, #180]	; (800384c <TIM_Base_SetConfig+0x13c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00f      	beq.n	80037ba <TIM_Base_SetConfig+0xaa>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a2d      	ldr	r2, [pc, #180]	; (8003854 <TIM_Base_SetConfig+0x144>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00b      	beq.n	80037ba <TIM_Base_SetConfig+0xaa>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a2c      	ldr	r2, [pc, #176]	; (8003858 <TIM_Base_SetConfig+0x148>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d007      	beq.n	80037ba <TIM_Base_SetConfig+0xaa>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a2b      	ldr	r2, [pc, #172]	; (800385c <TIM_Base_SetConfig+0x14c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d003      	beq.n	80037ba <TIM_Base_SetConfig+0xaa>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a26      	ldr	r2, [pc, #152]	; (8003850 <TIM_Base_SetConfig+0x140>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d108      	bne.n	80037cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a12      	ldr	r2, [pc, #72]	; (800383c <TIM_Base_SetConfig+0x12c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d013      	beq.n	8003820 <TIM_Base_SetConfig+0x110>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a14      	ldr	r2, [pc, #80]	; (800384c <TIM_Base_SetConfig+0x13c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00f      	beq.n	8003820 <TIM_Base_SetConfig+0x110>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a14      	ldr	r2, [pc, #80]	; (8003854 <TIM_Base_SetConfig+0x144>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00b      	beq.n	8003820 <TIM_Base_SetConfig+0x110>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a13      	ldr	r2, [pc, #76]	; (8003858 <TIM_Base_SetConfig+0x148>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d007      	beq.n	8003820 <TIM_Base_SetConfig+0x110>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a12      	ldr	r2, [pc, #72]	; (800385c <TIM_Base_SetConfig+0x14c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d003      	beq.n	8003820 <TIM_Base_SetConfig+0x110>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a0d      	ldr	r2, [pc, #52]	; (8003850 <TIM_Base_SetConfig+0x140>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d103      	bne.n	8003828 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	615a      	str	r2, [r3, #20]
}
 800382e:	bf00      	nop
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40012c00 	.word	0x40012c00
 8003840:	40000400 	.word	0x40000400
 8003844:	40000800 	.word	0x40000800
 8003848:	40000c00 	.word	0x40000c00
 800384c:	40013400 	.word	0x40013400
 8003850:	40015000 	.word	0x40015000
 8003854:	40014000 	.word	0x40014000
 8003858:	40014400 	.word	0x40014400
 800385c:	40014800 	.word	0x40014800

08003860 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	f023 0201 	bic.w	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0303 	bic.w	r3, r3, #3
 800389a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f023 0302 	bic.w	r3, r3, #2
 80038ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a30      	ldr	r2, [pc, #192]	; (800397c <TIM_OC1_SetConfig+0x11c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d013      	beq.n	80038e8 <TIM_OC1_SetConfig+0x88>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a2f      	ldr	r2, [pc, #188]	; (8003980 <TIM_OC1_SetConfig+0x120>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00f      	beq.n	80038e8 <TIM_OC1_SetConfig+0x88>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a2e      	ldr	r2, [pc, #184]	; (8003984 <TIM_OC1_SetConfig+0x124>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00b      	beq.n	80038e8 <TIM_OC1_SetConfig+0x88>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a2d      	ldr	r2, [pc, #180]	; (8003988 <TIM_OC1_SetConfig+0x128>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d007      	beq.n	80038e8 <TIM_OC1_SetConfig+0x88>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a2c      	ldr	r2, [pc, #176]	; (800398c <TIM_OC1_SetConfig+0x12c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <TIM_OC1_SetConfig+0x88>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a2b      	ldr	r2, [pc, #172]	; (8003990 <TIM_OC1_SetConfig+0x130>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d10c      	bne.n	8003902 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f023 0308 	bic.w	r3, r3, #8
 80038ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f023 0304 	bic.w	r3, r3, #4
 8003900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1d      	ldr	r2, [pc, #116]	; (800397c <TIM_OC1_SetConfig+0x11c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <TIM_OC1_SetConfig+0xd2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <TIM_OC1_SetConfig+0x120>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00f      	beq.n	8003932 <TIM_OC1_SetConfig+0xd2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a1b      	ldr	r2, [pc, #108]	; (8003984 <TIM_OC1_SetConfig+0x124>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00b      	beq.n	8003932 <TIM_OC1_SetConfig+0xd2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a1a      	ldr	r2, [pc, #104]	; (8003988 <TIM_OC1_SetConfig+0x128>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d007      	beq.n	8003932 <TIM_OC1_SetConfig+0xd2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a19      	ldr	r2, [pc, #100]	; (800398c <TIM_OC1_SetConfig+0x12c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d003      	beq.n	8003932 <TIM_OC1_SetConfig+0xd2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a18      	ldr	r2, [pc, #96]	; (8003990 <TIM_OC1_SetConfig+0x130>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d111      	bne.n	8003956 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	621a      	str	r2, [r3, #32]
}
 8003970:	bf00      	nop
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	40012c00 	.word	0x40012c00
 8003980:	40013400 	.word	0x40013400
 8003984:	40014000 	.word	0x40014000
 8003988:	40014400 	.word	0x40014400
 800398c:	40014800 	.word	0x40014800
 8003990:	40015000 	.word	0x40015000

08003994 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	f023 0210 	bic.w	r2, r3, #16
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f023 0320 	bic.w	r3, r3, #32
 80039e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a2c      	ldr	r2, [pc, #176]	; (8003aa4 <TIM_OC2_SetConfig+0x110>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d007      	beq.n	8003a08 <TIM_OC2_SetConfig+0x74>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a2b      	ldr	r2, [pc, #172]	; (8003aa8 <TIM_OC2_SetConfig+0x114>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_OC2_SetConfig+0x74>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a2a      	ldr	r2, [pc, #168]	; (8003aac <TIM_OC2_SetConfig+0x118>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d10d      	bne.n	8003a24 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a1f      	ldr	r2, [pc, #124]	; (8003aa4 <TIM_OC2_SetConfig+0x110>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d013      	beq.n	8003a54 <TIM_OC2_SetConfig+0xc0>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a1e      	ldr	r2, [pc, #120]	; (8003aa8 <TIM_OC2_SetConfig+0x114>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00f      	beq.n	8003a54 <TIM_OC2_SetConfig+0xc0>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a1e      	ldr	r2, [pc, #120]	; (8003ab0 <TIM_OC2_SetConfig+0x11c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00b      	beq.n	8003a54 <TIM_OC2_SetConfig+0xc0>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a1d      	ldr	r2, [pc, #116]	; (8003ab4 <TIM_OC2_SetConfig+0x120>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d007      	beq.n	8003a54 <TIM_OC2_SetConfig+0xc0>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a1c      	ldr	r2, [pc, #112]	; (8003ab8 <TIM_OC2_SetConfig+0x124>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d003      	beq.n	8003a54 <TIM_OC2_SetConfig+0xc0>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a17      	ldr	r2, [pc, #92]	; (8003aac <TIM_OC2_SetConfig+0x118>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d113      	bne.n	8003a7c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	621a      	str	r2, [r3, #32]
}
 8003a96:	bf00      	nop
 8003a98:	371c      	adds	r7, #28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40012c00 	.word	0x40012c00
 8003aa8:	40013400 	.word	0x40013400
 8003aac:	40015000 	.word	0x40015000
 8003ab0:	40014000 	.word	0x40014000
 8003ab4:	40014400 	.word	0x40014400
 8003ab8:	40014800 	.word	0x40014800

08003abc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a2b      	ldr	r2, [pc, #172]	; (8003bc8 <TIM_OC3_SetConfig+0x10c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <TIM_OC3_SetConfig+0x72>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a2a      	ldr	r2, [pc, #168]	; (8003bcc <TIM_OC3_SetConfig+0x110>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d003      	beq.n	8003b2e <TIM_OC3_SetConfig+0x72>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a29      	ldr	r2, [pc, #164]	; (8003bd0 <TIM_OC3_SetConfig+0x114>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d10d      	bne.n	8003b4a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a1e      	ldr	r2, [pc, #120]	; (8003bc8 <TIM_OC3_SetConfig+0x10c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d013      	beq.n	8003b7a <TIM_OC3_SetConfig+0xbe>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <TIM_OC3_SetConfig+0x110>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00f      	beq.n	8003b7a <TIM_OC3_SetConfig+0xbe>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a1d      	ldr	r2, [pc, #116]	; (8003bd4 <TIM_OC3_SetConfig+0x118>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00b      	beq.n	8003b7a <TIM_OC3_SetConfig+0xbe>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a1c      	ldr	r2, [pc, #112]	; (8003bd8 <TIM_OC3_SetConfig+0x11c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d007      	beq.n	8003b7a <TIM_OC3_SetConfig+0xbe>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a1b      	ldr	r2, [pc, #108]	; (8003bdc <TIM_OC3_SetConfig+0x120>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d003      	beq.n	8003b7a <TIM_OC3_SetConfig+0xbe>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a16      	ldr	r2, [pc, #88]	; (8003bd0 <TIM_OC3_SetConfig+0x114>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d113      	bne.n	8003ba2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	621a      	str	r2, [r3, #32]
}
 8003bbc:	bf00      	nop
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	40012c00 	.word	0x40012c00
 8003bcc:	40013400 	.word	0x40013400
 8003bd0:	40015000 	.word	0x40015000
 8003bd4:	40014000 	.word	0x40014000
 8003bd8:	40014400 	.word	0x40014400
 8003bdc:	40014800 	.word	0x40014800

08003be0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	031b      	lsls	r3, r3, #12
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a2c      	ldr	r2, [pc, #176]	; (8003cf0 <TIM_OC4_SetConfig+0x110>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d007      	beq.n	8003c54 <TIM_OC4_SetConfig+0x74>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a2b      	ldr	r2, [pc, #172]	; (8003cf4 <TIM_OC4_SetConfig+0x114>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d003      	beq.n	8003c54 <TIM_OC4_SetConfig+0x74>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a2a      	ldr	r2, [pc, #168]	; (8003cf8 <TIM_OC4_SetConfig+0x118>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d10d      	bne.n	8003c70 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	031b      	lsls	r3, r3, #12
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a1f      	ldr	r2, [pc, #124]	; (8003cf0 <TIM_OC4_SetConfig+0x110>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d013      	beq.n	8003ca0 <TIM_OC4_SetConfig+0xc0>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a1e      	ldr	r2, [pc, #120]	; (8003cf4 <TIM_OC4_SetConfig+0x114>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00f      	beq.n	8003ca0 <TIM_OC4_SetConfig+0xc0>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a1e      	ldr	r2, [pc, #120]	; (8003cfc <TIM_OC4_SetConfig+0x11c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00b      	beq.n	8003ca0 <TIM_OC4_SetConfig+0xc0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a1d      	ldr	r2, [pc, #116]	; (8003d00 <TIM_OC4_SetConfig+0x120>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d007      	beq.n	8003ca0 <TIM_OC4_SetConfig+0xc0>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a1c      	ldr	r2, [pc, #112]	; (8003d04 <TIM_OC4_SetConfig+0x124>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d003      	beq.n	8003ca0 <TIM_OC4_SetConfig+0xc0>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a17      	ldr	r2, [pc, #92]	; (8003cf8 <TIM_OC4_SetConfig+0x118>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d113      	bne.n	8003cc8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ca6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003cae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	019b      	lsls	r3, r3, #6
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	019b      	lsls	r3, r3, #6
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	621a      	str	r2, [r3, #32]
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40012c00 	.word	0x40012c00
 8003cf4:	40013400 	.word	0x40013400
 8003cf8:	40015000 	.word	0x40015000
 8003cfc:	40014000 	.word	0x40014000
 8003d00:	40014400 	.word	0x40014400
 8003d04:	40014800 	.word	0x40014800

08003d08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	041b      	lsls	r3, r3, #16
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a19      	ldr	r2, [pc, #100]	; (8003dc4 <TIM_OC5_SetConfig+0xbc>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <TIM_OC5_SetConfig+0x82>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a18      	ldr	r2, [pc, #96]	; (8003dc8 <TIM_OC5_SetConfig+0xc0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00f      	beq.n	8003d8a <TIM_OC5_SetConfig+0x82>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a17      	ldr	r2, [pc, #92]	; (8003dcc <TIM_OC5_SetConfig+0xc4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00b      	beq.n	8003d8a <TIM_OC5_SetConfig+0x82>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a16      	ldr	r2, [pc, #88]	; (8003dd0 <TIM_OC5_SetConfig+0xc8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d007      	beq.n	8003d8a <TIM_OC5_SetConfig+0x82>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a15      	ldr	r2, [pc, #84]	; (8003dd4 <TIM_OC5_SetConfig+0xcc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d003      	beq.n	8003d8a <TIM_OC5_SetConfig+0x82>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a14      	ldr	r2, [pc, #80]	; (8003dd8 <TIM_OC5_SetConfig+0xd0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d109      	bne.n	8003d9e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	621a      	str	r2, [r3, #32]
}
 8003db8:	bf00      	nop
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40013400 	.word	0x40013400
 8003dcc:	40014000 	.word	0x40014000
 8003dd0:	40014400 	.word	0x40014400
 8003dd4:	40014800 	.word	0x40014800
 8003dd8:	40015000 	.word	0x40015000

08003ddc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	021b      	lsls	r3, r3, #8
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	051b      	lsls	r3, r3, #20
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a1a      	ldr	r2, [pc, #104]	; (8003e9c <TIM_OC6_SetConfig+0xc0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d013      	beq.n	8003e60 <TIM_OC6_SetConfig+0x84>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a19      	ldr	r2, [pc, #100]	; (8003ea0 <TIM_OC6_SetConfig+0xc4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00f      	beq.n	8003e60 <TIM_OC6_SetConfig+0x84>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a18      	ldr	r2, [pc, #96]	; (8003ea4 <TIM_OC6_SetConfig+0xc8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00b      	beq.n	8003e60 <TIM_OC6_SetConfig+0x84>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a17      	ldr	r2, [pc, #92]	; (8003ea8 <TIM_OC6_SetConfig+0xcc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d007      	beq.n	8003e60 <TIM_OC6_SetConfig+0x84>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a16      	ldr	r2, [pc, #88]	; (8003eac <TIM_OC6_SetConfig+0xd0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d003      	beq.n	8003e60 <TIM_OC6_SetConfig+0x84>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a15      	ldr	r2, [pc, #84]	; (8003eb0 <TIM_OC6_SetConfig+0xd4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d109      	bne.n	8003e74 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	029b      	lsls	r3, r3, #10
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	621a      	str	r2, [r3, #32]
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40012c00 	.word	0x40012c00
 8003ea0:	40013400 	.word	0x40013400
 8003ea4:	40014000 	.word	0x40014000
 8003ea8:	40014400 	.word	0x40014400
 8003eac:	40014800 	.word	0x40014800
 8003eb0:	40015000 	.word	0x40015000

08003eb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	f023 0201 	bic.w	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f023 030a 	bic.w	r3, r3, #10
 8003ef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	621a      	str	r2, [r3, #32]
}
 8003f06:	bf00      	nop
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b087      	sub	sp, #28
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f023 0210 	bic.w	r2, r3, #16
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	031b      	lsls	r3, r3, #12
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	621a      	str	r2, [r3, #32]
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b085      	sub	sp, #20
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f043 0307 	orr.w	r3, r3, #7
 8003f98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	609a      	str	r2, [r3, #8]
}
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	021a      	lsls	r2, r3, #8
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	609a      	str	r2, [r3, #8]
}
 8003fe0:	bf00      	nop
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	2201      	movs	r2, #1
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a1a      	ldr	r2, [r3, #32]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	43db      	mvns	r3, r3
 800400e:	401a      	ands	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a1a      	ldr	r2, [r3, #32]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f003 031f 	and.w	r3, r3, #31
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	fa01 f303 	lsl.w	r3, r1, r3
 8004024:	431a      	orrs	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	621a      	str	r2, [r3, #32]
}
 800402a:	bf00      	nop
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d109      	bne.n	800405c <HAL_TIMEx_PWMN_Start+0x24>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b01      	cmp	r3, #1
 8004052:	bf14      	ite	ne
 8004054:	2301      	movne	r3, #1
 8004056:	2300      	moveq	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	e022      	b.n	80040a2 <HAL_TIMEx_PWMN_Start+0x6a>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2b04      	cmp	r3, #4
 8004060:	d109      	bne.n	8004076 <HAL_TIMEx_PWMN_Start+0x3e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b01      	cmp	r3, #1
 800406c:	bf14      	ite	ne
 800406e:	2301      	movne	r3, #1
 8004070:	2300      	moveq	r3, #0
 8004072:	b2db      	uxtb	r3, r3
 8004074:	e015      	b.n	80040a2 <HAL_TIMEx_PWMN_Start+0x6a>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b08      	cmp	r3, #8
 800407a:	d109      	bne.n	8004090 <HAL_TIMEx_PWMN_Start+0x58>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b01      	cmp	r3, #1
 8004086:	bf14      	ite	ne
 8004088:	2301      	movne	r3, #1
 800408a:	2300      	moveq	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	e008      	b.n	80040a2 <HAL_TIMEx_PWMN_Start+0x6a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b01      	cmp	r3, #1
 800409a:	bf14      	ite	ne
 800409c:	2301      	movne	r3, #1
 800409e:	2300      	moveq	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e073      	b.n	8004192 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d104      	bne.n	80040ba <HAL_TIMEx_PWMN_Start+0x82>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040b8:	e013      	b.n	80040e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d104      	bne.n	80040ca <HAL_TIMEx_PWMN_Start+0x92>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040c8:	e00b      	b.n	80040e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d104      	bne.n	80040da <HAL_TIMEx_PWMN_Start+0xa2>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040d8:	e003      	b.n	80040e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2202      	movs	r2, #2
 80040de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2204      	movs	r2, #4
 80040e8:	6839      	ldr	r1, [r7, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 f9f4 	bl	80044d8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a25      	ldr	r2, [pc, #148]	; (800419c <HAL_TIMEx_PWMN_Start+0x164>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d022      	beq.n	8004150 <HAL_TIMEx_PWMN_Start+0x118>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004112:	d01d      	beq.n	8004150 <HAL_TIMEx_PWMN_Start+0x118>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a21      	ldr	r2, [pc, #132]	; (80041a0 <HAL_TIMEx_PWMN_Start+0x168>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d018      	beq.n	8004150 <HAL_TIMEx_PWMN_Start+0x118>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a20      	ldr	r2, [pc, #128]	; (80041a4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d013      	beq.n	8004150 <HAL_TIMEx_PWMN_Start+0x118>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1e      	ldr	r2, [pc, #120]	; (80041a8 <HAL_TIMEx_PWMN_Start+0x170>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00e      	beq.n	8004150 <HAL_TIMEx_PWMN_Start+0x118>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a1d      	ldr	r2, [pc, #116]	; (80041ac <HAL_TIMEx_PWMN_Start+0x174>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d009      	beq.n	8004150 <HAL_TIMEx_PWMN_Start+0x118>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1b      	ldr	r2, [pc, #108]	; (80041b0 <HAL_TIMEx_PWMN_Start+0x178>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d004      	beq.n	8004150 <HAL_TIMEx_PWMN_Start+0x118>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1a      	ldr	r2, [pc, #104]	; (80041b4 <HAL_TIMEx_PWMN_Start+0x17c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d115      	bne.n	800417c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <HAL_TIMEx_PWMN_Start+0x180>)
 8004158:	4013      	ands	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b06      	cmp	r3, #6
 8004160:	d015      	beq.n	800418e <HAL_TIMEx_PWMN_Start+0x156>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004168:	d011      	beq.n	800418e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0201 	orr.w	r2, r2, #1
 8004178:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417a:	e008      	b.n	800418e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	e000      	b.n	8004190 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40012c00 	.word	0x40012c00
 80041a0:	40000400 	.word	0x40000400
 80041a4:	40000800 	.word	0x40000800
 80041a8:	40000c00 	.word	0x40000c00
 80041ac:	40013400 	.word	0x40013400
 80041b0:	40014000 	.word	0x40014000
 80041b4:	40015000 	.word	0x40015000
 80041b8:	00010007 	.word	0x00010007

080041bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e074      	b.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a34      	ldr	r2, [pc, #208]	; (80042cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d009      	beq.n	8004212 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a33      	ldr	r2, [pc, #204]	; (80042d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d004      	beq.n	8004212 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a31      	ldr	r2, [pc, #196]	; (80042d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d108      	bne.n	8004224 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004218:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800422a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a21      	ldr	r2, [pc, #132]	; (80042cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d022      	beq.n	8004292 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004254:	d01d      	beq.n	8004292 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a1f      	ldr	r2, [pc, #124]	; (80042d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d018      	beq.n	8004292 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a1d      	ldr	r2, [pc, #116]	; (80042dc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1c      	ldr	r2, [pc, #112]	; (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00e      	beq.n	8004292 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a15      	ldr	r2, [pc, #84]	; (80042d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d009      	beq.n	8004292 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a18      	ldr	r2, [pc, #96]	; (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d004      	beq.n	8004292 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a11      	ldr	r2, [pc, #68]	; (80042d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d10c      	bne.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40012c00 	.word	0x40012c00
 80042d0:	40013400 	.word	0x40013400
 80042d4:	40015000 	.word	0x40015000
 80042d8:	40000400 	.word	0x40000400
 80042dc:	40000800 	.word	0x40000800
 80042e0:	40000c00 	.word	0x40000c00
 80042e4:	40014000 	.word	0x40014000

080042e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004300:	2302      	movs	r3, #2
 8004302:	e096      	b.n	8004432 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	041b      	lsls	r3, r3, #16
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a2f      	ldr	r2, [pc, #188]	; (8004440 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d009      	beq.n	800439c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a2d      	ldr	r2, [pc, #180]	; (8004444 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a2c      	ldr	r2, [pc, #176]	; (8004448 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d106      	bne.n	80043aa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a24      	ldr	r2, [pc, #144]	; (8004440 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d009      	beq.n	80043c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a22      	ldr	r2, [pc, #136]	; (8004444 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d004      	beq.n	80043c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a21      	ldr	r2, [pc, #132]	; (8004448 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d12b      	bne.n	8004420 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	051b      	lsls	r3, r3, #20
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a11      	ldr	r2, [pc, #68]	; (8004440 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d009      	beq.n	8004412 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a10      	ldr	r2, [pc, #64]	; (8004444 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d004      	beq.n	8004412 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a0e      	ldr	r2, [pc, #56]	; (8004448 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d106      	bne.n	8004420 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40013400 	.word	0x40013400
 8004448:	40015000 	.word	0x40015000

0800444c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	2204      	movs	r2, #4
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a1a      	ldr	r2, [r3, #32]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	43db      	mvns	r3, r3
 80044fa:	401a      	ands	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a1a      	ldr	r2, [r3, #32]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	fa01 f303 	lsl.w	r3, r1, r3
 8004510:	431a      	orrs	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	621a      	str	r2, [r3, #32]
}
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e042      	b.n	80045ba <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fc fe34 	bl	80011b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2224      	movs	r2, #36	; 0x24
 8004550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0201 	bic.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fc51 	bl	8004e0c <UART_SetConfig>
 800456a:	4603      	mov	r3, r0
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e022      	b.n	80045ba <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 ff41 	bl	8005404 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004590:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0201 	orr.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 ffc8 	bl	8005548 <UART_CheckIdleState>
 80045b8:	4603      	mov	r3, r0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b08a      	sub	sp, #40	; 0x28
 80045c6:	af02      	add	r7, sp, #8
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	603b      	str	r3, [r7, #0]
 80045ce:	4613      	mov	r3, r2
 80045d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d8:	2b20      	cmp	r3, #32
 80045da:	f040 8083 	bne.w	80046e4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <HAL_UART_Transmit+0x28>
 80045e4:	88fb      	ldrh	r3, [r7, #6]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e07b      	b.n	80046e6 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_UART_Transmit+0x3a>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e074      	b.n	80046e6 <HAL_UART_Transmit+0x124>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2221      	movs	r2, #33	; 0x21
 8004610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004614:	f7fc fe82 	bl	800131c <HAL_GetTick>
 8004618:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	88fa      	ldrh	r2, [r7, #6]
 800461e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	88fa      	ldrh	r2, [r7, #6]
 8004626:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004632:	d108      	bne.n	8004646 <HAL_UART_Transmit+0x84>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d104      	bne.n	8004646 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800463c:	2300      	movs	r3, #0
 800463e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	61bb      	str	r3, [r7, #24]
 8004644:	e003      	b.n	800464e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800464a:	2300      	movs	r3, #0
 800464c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004656:	e02c      	b.n	80046b2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	2200      	movs	r2, #0
 8004660:	2180      	movs	r1, #128	; 0x80
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 ffbb 	bl	80055de <UART_WaitOnFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e039      	b.n	80046e6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10b      	bne.n	8004690 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	461a      	mov	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004686:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	3302      	adds	r3, #2
 800468c:	61bb      	str	r3, [r7, #24]
 800468e:	e007      	b.n	80046a0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	781a      	ldrb	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	3301      	adds	r3, #1
 800469e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1cc      	bne.n	8004658 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2200      	movs	r2, #0
 80046c6:	2140      	movs	r1, #64	; 0x40
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 ff88 	bl	80055de <UART_WaitOnFlagUntilTimeout>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e006      	b.n	80046e6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	e000      	b.n	80046e6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80046e4:	2302      	movs	r3, #2
  }
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3720      	adds	r7, #32
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08a      	sub	sp, #40	; 0x28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	4613      	mov	r3, r2
 80046fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004704:	2b20      	cmp	r3, #32
 8004706:	d142      	bne.n	800478e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <HAL_UART_Receive_IT+0x24>
 800470e:	88fb      	ldrh	r3, [r7, #6]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e03b      	b.n	8004790 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_UART_Receive_IT+0x36>
 8004722:	2302      	movs	r3, #2
 8004724:	e034      	b.n	8004790 <HAL_UART_Receive_IT+0xa0>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a17      	ldr	r2, [pc, #92]	; (8004798 <HAL_UART_Receive_IT+0xa8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d01f      	beq.n	800477e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d018      	beq.n	800477e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	e853 3f00 	ldrex	r3, [r3]
 8004758:	613b      	str	r3, [r7, #16]
   return(result);
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	623b      	str	r3, [r7, #32]
 800476c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	69f9      	ldr	r1, [r7, #28]
 8004770:	6a3a      	ldr	r2, [r7, #32]
 8004772:	e841 2300 	strex	r3, r2, [r1]
 8004776:	61bb      	str	r3, [r7, #24]
   return(result);
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1e6      	bne.n	800474c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800477e:	88fb      	ldrh	r3, [r7, #6]
 8004780:	461a      	mov	r2, r3
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 fff3 	bl	8005770 <UART_Start_Receive_IT>
 800478a:	4603      	mov	r3, r0
 800478c:	e000      	b.n	8004790 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800478e:	2302      	movs	r3, #2
  }
}
 8004790:	4618      	mov	r0, r3
 8004792:	3728      	adds	r7, #40	; 0x28
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40008000 	.word	0x40008000

0800479c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b0ba      	sub	sp, #232	; 0xe8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80047c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80047ca:	4013      	ands	r3, r2
 80047cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80047d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d11b      	bne.n	8004810 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80047d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d015      	beq.n	8004810 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80047e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d105      	bne.n	80047fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80047f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d009      	beq.n	8004810 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 82d6 	beq.w	8004db2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	4798      	blx	r3
      }
      return;
 800480e:	e2d0      	b.n	8004db2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004810:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 811f 	beq.w	8004a58 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800481a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800481e:	4b8b      	ldr	r3, [pc, #556]	; (8004a4c <HAL_UART_IRQHandler+0x2b0>)
 8004820:	4013      	ands	r3, r2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004826:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800482a:	4b89      	ldr	r3, [pc, #548]	; (8004a50 <HAL_UART_IRQHandler+0x2b4>)
 800482c:	4013      	ands	r3, r2
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8112 	beq.w	8004a58 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d011      	beq.n	8004864 <HAL_UART_IRQHandler+0xc8>
 8004840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00b      	beq.n	8004864 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2201      	movs	r2, #1
 8004852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800485a:	f043 0201 	orr.w	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d011      	beq.n	8004894 <HAL_UART_IRQHandler+0xf8>
 8004870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00b      	beq.n	8004894 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2202      	movs	r2, #2
 8004882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800488a:	f043 0204 	orr.w	r2, r3, #4
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d011      	beq.n	80048c4 <HAL_UART_IRQHandler+0x128>
 80048a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00b      	beq.n	80048c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2204      	movs	r2, #4
 80048b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ba:	f043 0202 	orr.w	r2, r3, #2
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d017      	beq.n	8004900 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d105      	bne.n	80048e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80048dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80048e0:	4b5a      	ldr	r3, [pc, #360]	; (8004a4c <HAL_UART_IRQHandler+0x2b0>)
 80048e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00b      	beq.n	8004900 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2208      	movs	r2, #8
 80048ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048f6:	f043 0208 	orr.w	r2, r3, #8
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004908:	2b00      	cmp	r3, #0
 800490a:	d012      	beq.n	8004932 <HAL_UART_IRQHandler+0x196>
 800490c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004910:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00c      	beq.n	8004932 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004920:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004928:	f043 0220 	orr.w	r2, r3, #32
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 823c 	beq.w	8004db6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800493e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b00      	cmp	r3, #0
 8004948:	d013      	beq.n	8004972 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800494a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	2b00      	cmp	r3, #0
 8004954:	d105      	bne.n	8004962 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800495a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004978:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004986:	2b40      	cmp	r3, #64	; 0x40
 8004988:	d005      	beq.n	8004996 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800498a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800498e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004992:	2b00      	cmp	r3, #0
 8004994:	d04f      	beq.n	8004a36 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f001 f814 	bl	80059c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d141      	bne.n	8004a2e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3308      	adds	r3, #8
 80049b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3308      	adds	r3, #8
 80049d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1d9      	bne.n	80049aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d013      	beq.n	8004a26 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a02:	4a14      	ldr	r2, [pc, #80]	; (8004a54 <HAL_UART_IRQHandler+0x2b8>)
 8004a04:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fc fded 	bl	80015ea <HAL_DMA_Abort_IT>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d017      	beq.n	8004a46 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004a20:	4610      	mov	r0, r2
 8004a22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a24:	e00f      	b.n	8004a46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f9da 	bl	8004de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a2c:	e00b      	b.n	8004a46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f9d6 	bl	8004de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a34:	e007      	b.n	8004a46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f9d2 	bl	8004de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004a44:	e1b7      	b.n	8004db6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a46:	bf00      	nop
    return;
 8004a48:	e1b5      	b.n	8004db6 <HAL_UART_IRQHandler+0x61a>
 8004a4a:	bf00      	nop
 8004a4c:	10000001 	.word	0x10000001
 8004a50:	04000120 	.word	0x04000120
 8004a54:	08005a91 	.word	0x08005a91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	f040 814a 	bne.w	8004cf6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a66:	f003 0310 	and.w	r3, r3, #16
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 8143 	beq.w	8004cf6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 813c 	beq.w	8004cf6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2210      	movs	r2, #16
 8004a84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	f040 80b5 	bne.w	8004c00 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004aa2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 8187 	beq.w	8004dba <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	f080 817f 	bcs.w	8004dba <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ac2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f040 8086 	bne.w	8004be4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004af4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b06:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1da      	bne.n	8004ad8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3308      	adds	r3, #8
 8004b28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b2c:	e853 3f00 	ldrex	r3, [r3]
 8004b30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b34:	f023 0301 	bic.w	r3, r3, #1
 8004b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3308      	adds	r3, #8
 8004b42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e1      	bne.n	8004b22 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3308      	adds	r3, #8
 8004b64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b8a:	e841 2300 	strex	r3, r2, [r1]
 8004b8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1e3      	bne.n	8004b5e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb4:	f023 0310 	bic.w	r3, r3, #16
 8004bb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bc8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bce:	e841 2300 	strex	r3, r2, [r1]
 8004bd2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1e4      	bne.n	8004ba4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fc fcaa 	bl	8001538 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f8fb 	bl	8004df4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bfe:	e0dc      	b.n	8004dba <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80ce 	beq.w	8004dbe <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004c22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 80c9 	beq.w	8004dbe <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c50:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c56:	e841 2300 	strex	r3, r2, [r1]
 8004c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1e4      	bne.n	8004c2c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3308      	adds	r3, #8
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	e853 3f00 	ldrex	r3, [r3]
 8004c70:	623b      	str	r3, [r7, #32]
   return(result);
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c78:	f023 0301 	bic.w	r3, r3, #1
 8004c7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3308      	adds	r3, #8
 8004c86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c8a:	633a      	str	r2, [r7, #48]	; 0x30
 8004c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1e1      	bne.n	8004c62 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0310 	bic.w	r3, r3, #16
 8004cc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004cd4:	61fb      	str	r3, [r7, #28]
 8004cd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	69b9      	ldr	r1, [r7, #24]
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	e841 2300 	strex	r3, r2, [r1]
 8004ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e4      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ce8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cec:	4619      	mov	r1, r3
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f880 	bl	8004df4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cf4:	e063      	b.n	8004dbe <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00e      	beq.n	8004d20 <HAL_UART_IRQHandler+0x584>
 8004d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d008      	beq.n	8004d20 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f001 fb57 	bl	80063cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d1e:	e051      	b.n	8004dc4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d014      	beq.n	8004d56 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d105      	bne.n	8004d44 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d008      	beq.n	8004d56 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d03a      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	4798      	blx	r3
    }
    return;
 8004d54:	e035      	b.n	8004dc2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d009      	beq.n	8004d76 <HAL_UART_IRQHandler+0x5da>
 8004d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fea4 	bl	8005abc <UART_EndTransmit_IT>
    return;
 8004d74:	e026      	b.n	8004dc4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d009      	beq.n	8004d96 <HAL_UART_IRQHandler+0x5fa>
 8004d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f001 fb30 	bl	80063f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d94:	e016      	b.n	8004dc4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d010      	beq.n	8004dc4 <HAL_UART_IRQHandler+0x628>
 8004da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	da0c      	bge.n	8004dc4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f001 fb18 	bl	80063e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004db0:	e008      	b.n	8004dc4 <HAL_UART_IRQHandler+0x628>
      return;
 8004db2:	bf00      	nop
 8004db4:	e006      	b.n	8004dc4 <HAL_UART_IRQHandler+0x628>
    return;
 8004db6:	bf00      	nop
 8004db8:	e004      	b.n	8004dc4 <HAL_UART_IRQHandler+0x628>
      return;
 8004dba:	bf00      	nop
 8004dbc:	e002      	b.n	8004dc4 <HAL_UART_IRQHandler+0x628>
      return;
 8004dbe:	bf00      	nop
 8004dc0:	e000      	b.n	8004dc4 <HAL_UART_IRQHandler+0x628>
    return;
 8004dc2:	bf00      	nop
  }
}
 8004dc4:	37e8      	adds	r7, #232	; 0xe8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop

08004dcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e10:	b08c      	sub	sp, #48	; 0x30
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	431a      	orrs	r2, r3
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	4baa      	ldr	r3, [pc, #680]	; (80050e4 <UART_SetConfig+0x2d8>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	6812      	ldr	r2, [r2, #0]
 8004e42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e44:	430b      	orrs	r3, r1
 8004e46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a9f      	ldr	r2, [pc, #636]	; (80050e8 <UART_SetConfig+0x2dc>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d004      	beq.n	8004e78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e74:	4313      	orrs	r3, r2
 8004e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004e82:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	6812      	ldr	r2, [r2, #0]
 8004e8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e8c:	430b      	orrs	r3, r1
 8004e8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e96:	f023 010f 	bic.w	r1, r3, #15
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a90      	ldr	r2, [pc, #576]	; (80050ec <UART_SetConfig+0x2e0>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d125      	bne.n	8004efc <UART_SetConfig+0xf0>
 8004eb0:	4b8f      	ldr	r3, [pc, #572]	; (80050f0 <UART_SetConfig+0x2e4>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d81a      	bhi.n	8004ef4 <UART_SetConfig+0xe8>
 8004ebe:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <UART_SetConfig+0xb8>)
 8004ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec4:	08004ed5 	.word	0x08004ed5
 8004ec8:	08004ee5 	.word	0x08004ee5
 8004ecc:	08004edd 	.word	0x08004edd
 8004ed0:	08004eed 	.word	0x08004eed
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eda:	e116      	b.n	800510a <UART_SetConfig+0x2fe>
 8004edc:	2302      	movs	r3, #2
 8004ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ee2:	e112      	b.n	800510a <UART_SetConfig+0x2fe>
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eea:	e10e      	b.n	800510a <UART_SetConfig+0x2fe>
 8004eec:	2308      	movs	r3, #8
 8004eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ef2:	e10a      	b.n	800510a <UART_SetConfig+0x2fe>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004efa:	e106      	b.n	800510a <UART_SetConfig+0x2fe>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a7c      	ldr	r2, [pc, #496]	; (80050f4 <UART_SetConfig+0x2e8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d138      	bne.n	8004f78 <UART_SetConfig+0x16c>
 8004f06:	4b7a      	ldr	r3, [pc, #488]	; (80050f0 <UART_SetConfig+0x2e4>)
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0c:	f003 030c 	and.w	r3, r3, #12
 8004f10:	2b0c      	cmp	r3, #12
 8004f12:	d82d      	bhi.n	8004f70 <UART_SetConfig+0x164>
 8004f14:	a201      	add	r2, pc, #4	; (adr r2, 8004f1c <UART_SetConfig+0x110>)
 8004f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1a:	bf00      	nop
 8004f1c:	08004f51 	.word	0x08004f51
 8004f20:	08004f71 	.word	0x08004f71
 8004f24:	08004f71 	.word	0x08004f71
 8004f28:	08004f71 	.word	0x08004f71
 8004f2c:	08004f61 	.word	0x08004f61
 8004f30:	08004f71 	.word	0x08004f71
 8004f34:	08004f71 	.word	0x08004f71
 8004f38:	08004f71 	.word	0x08004f71
 8004f3c:	08004f59 	.word	0x08004f59
 8004f40:	08004f71 	.word	0x08004f71
 8004f44:	08004f71 	.word	0x08004f71
 8004f48:	08004f71 	.word	0x08004f71
 8004f4c:	08004f69 	.word	0x08004f69
 8004f50:	2300      	movs	r3, #0
 8004f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f56:	e0d8      	b.n	800510a <UART_SetConfig+0x2fe>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f5e:	e0d4      	b.n	800510a <UART_SetConfig+0x2fe>
 8004f60:	2304      	movs	r3, #4
 8004f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f66:	e0d0      	b.n	800510a <UART_SetConfig+0x2fe>
 8004f68:	2308      	movs	r3, #8
 8004f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f6e:	e0cc      	b.n	800510a <UART_SetConfig+0x2fe>
 8004f70:	2310      	movs	r3, #16
 8004f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f76:	e0c8      	b.n	800510a <UART_SetConfig+0x2fe>
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a5e      	ldr	r2, [pc, #376]	; (80050f8 <UART_SetConfig+0x2ec>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d125      	bne.n	8004fce <UART_SetConfig+0x1c2>
 8004f82:	4b5b      	ldr	r3, [pc, #364]	; (80050f0 <UART_SetConfig+0x2e4>)
 8004f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f8c:	2b30      	cmp	r3, #48	; 0x30
 8004f8e:	d016      	beq.n	8004fbe <UART_SetConfig+0x1b2>
 8004f90:	2b30      	cmp	r3, #48	; 0x30
 8004f92:	d818      	bhi.n	8004fc6 <UART_SetConfig+0x1ba>
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	d00a      	beq.n	8004fae <UART_SetConfig+0x1a2>
 8004f98:	2b20      	cmp	r3, #32
 8004f9a:	d814      	bhi.n	8004fc6 <UART_SetConfig+0x1ba>
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <UART_SetConfig+0x19a>
 8004fa0:	2b10      	cmp	r3, #16
 8004fa2:	d008      	beq.n	8004fb6 <UART_SetConfig+0x1aa>
 8004fa4:	e00f      	b.n	8004fc6 <UART_SetConfig+0x1ba>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fac:	e0ad      	b.n	800510a <UART_SetConfig+0x2fe>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fb4:	e0a9      	b.n	800510a <UART_SetConfig+0x2fe>
 8004fb6:	2304      	movs	r3, #4
 8004fb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fbc:	e0a5      	b.n	800510a <UART_SetConfig+0x2fe>
 8004fbe:	2308      	movs	r3, #8
 8004fc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fc4:	e0a1      	b.n	800510a <UART_SetConfig+0x2fe>
 8004fc6:	2310      	movs	r3, #16
 8004fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fcc:	e09d      	b.n	800510a <UART_SetConfig+0x2fe>
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a4a      	ldr	r2, [pc, #296]	; (80050fc <UART_SetConfig+0x2f0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d125      	bne.n	8005024 <UART_SetConfig+0x218>
 8004fd8:	4b45      	ldr	r3, [pc, #276]	; (80050f0 <UART_SetConfig+0x2e4>)
 8004fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004fe2:	2bc0      	cmp	r3, #192	; 0xc0
 8004fe4:	d016      	beq.n	8005014 <UART_SetConfig+0x208>
 8004fe6:	2bc0      	cmp	r3, #192	; 0xc0
 8004fe8:	d818      	bhi.n	800501c <UART_SetConfig+0x210>
 8004fea:	2b80      	cmp	r3, #128	; 0x80
 8004fec:	d00a      	beq.n	8005004 <UART_SetConfig+0x1f8>
 8004fee:	2b80      	cmp	r3, #128	; 0x80
 8004ff0:	d814      	bhi.n	800501c <UART_SetConfig+0x210>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <UART_SetConfig+0x1f0>
 8004ff6:	2b40      	cmp	r3, #64	; 0x40
 8004ff8:	d008      	beq.n	800500c <UART_SetConfig+0x200>
 8004ffa:	e00f      	b.n	800501c <UART_SetConfig+0x210>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005002:	e082      	b.n	800510a <UART_SetConfig+0x2fe>
 8005004:	2302      	movs	r3, #2
 8005006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800500a:	e07e      	b.n	800510a <UART_SetConfig+0x2fe>
 800500c:	2304      	movs	r3, #4
 800500e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005012:	e07a      	b.n	800510a <UART_SetConfig+0x2fe>
 8005014:	2308      	movs	r3, #8
 8005016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800501a:	e076      	b.n	800510a <UART_SetConfig+0x2fe>
 800501c:	2310      	movs	r3, #16
 800501e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005022:	e072      	b.n	800510a <UART_SetConfig+0x2fe>
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a35      	ldr	r2, [pc, #212]	; (8005100 <UART_SetConfig+0x2f4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d12a      	bne.n	8005084 <UART_SetConfig+0x278>
 800502e:	4b30      	ldr	r3, [pc, #192]	; (80050f0 <UART_SetConfig+0x2e4>)
 8005030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005038:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800503c:	d01a      	beq.n	8005074 <UART_SetConfig+0x268>
 800503e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005042:	d81b      	bhi.n	800507c <UART_SetConfig+0x270>
 8005044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005048:	d00c      	beq.n	8005064 <UART_SetConfig+0x258>
 800504a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800504e:	d815      	bhi.n	800507c <UART_SetConfig+0x270>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <UART_SetConfig+0x250>
 8005054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005058:	d008      	beq.n	800506c <UART_SetConfig+0x260>
 800505a:	e00f      	b.n	800507c <UART_SetConfig+0x270>
 800505c:	2300      	movs	r3, #0
 800505e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005062:	e052      	b.n	800510a <UART_SetConfig+0x2fe>
 8005064:	2302      	movs	r3, #2
 8005066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800506a:	e04e      	b.n	800510a <UART_SetConfig+0x2fe>
 800506c:	2304      	movs	r3, #4
 800506e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005072:	e04a      	b.n	800510a <UART_SetConfig+0x2fe>
 8005074:	2308      	movs	r3, #8
 8005076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800507a:	e046      	b.n	800510a <UART_SetConfig+0x2fe>
 800507c:	2310      	movs	r3, #16
 800507e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005082:	e042      	b.n	800510a <UART_SetConfig+0x2fe>
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a17      	ldr	r2, [pc, #92]	; (80050e8 <UART_SetConfig+0x2dc>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d13a      	bne.n	8005104 <UART_SetConfig+0x2f8>
 800508e:	4b18      	ldr	r3, [pc, #96]	; (80050f0 <UART_SetConfig+0x2e4>)
 8005090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005094:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005098:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800509c:	d01a      	beq.n	80050d4 <UART_SetConfig+0x2c8>
 800509e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050a2:	d81b      	bhi.n	80050dc <UART_SetConfig+0x2d0>
 80050a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a8:	d00c      	beq.n	80050c4 <UART_SetConfig+0x2b8>
 80050aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ae:	d815      	bhi.n	80050dc <UART_SetConfig+0x2d0>
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <UART_SetConfig+0x2b0>
 80050b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b8:	d008      	beq.n	80050cc <UART_SetConfig+0x2c0>
 80050ba:	e00f      	b.n	80050dc <UART_SetConfig+0x2d0>
 80050bc:	2300      	movs	r3, #0
 80050be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050c2:	e022      	b.n	800510a <UART_SetConfig+0x2fe>
 80050c4:	2302      	movs	r3, #2
 80050c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ca:	e01e      	b.n	800510a <UART_SetConfig+0x2fe>
 80050cc:	2304      	movs	r3, #4
 80050ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050d2:	e01a      	b.n	800510a <UART_SetConfig+0x2fe>
 80050d4:	2308      	movs	r3, #8
 80050d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050da:	e016      	b.n	800510a <UART_SetConfig+0x2fe>
 80050dc:	2310      	movs	r3, #16
 80050de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050e2:	e012      	b.n	800510a <UART_SetConfig+0x2fe>
 80050e4:	cfff69f3 	.word	0xcfff69f3
 80050e8:	40008000 	.word	0x40008000
 80050ec:	40013800 	.word	0x40013800
 80050f0:	40021000 	.word	0x40021000
 80050f4:	40004400 	.word	0x40004400
 80050f8:	40004800 	.word	0x40004800
 80050fc:	40004c00 	.word	0x40004c00
 8005100:	40005000 	.word	0x40005000
 8005104:	2310      	movs	r3, #16
 8005106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4aae      	ldr	r2, [pc, #696]	; (80053c8 <UART_SetConfig+0x5bc>)
 8005110:	4293      	cmp	r3, r2
 8005112:	f040 8097 	bne.w	8005244 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005116:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800511a:	2b08      	cmp	r3, #8
 800511c:	d823      	bhi.n	8005166 <UART_SetConfig+0x35a>
 800511e:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <UART_SetConfig+0x318>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	08005149 	.word	0x08005149
 8005128:	08005167 	.word	0x08005167
 800512c:	08005151 	.word	0x08005151
 8005130:	08005167 	.word	0x08005167
 8005134:	08005157 	.word	0x08005157
 8005138:	08005167 	.word	0x08005167
 800513c:	08005167 	.word	0x08005167
 8005140:	08005167 	.word	0x08005167
 8005144:	0800515f 	.word	0x0800515f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005148:	f7fd f9da 	bl	8002500 <HAL_RCC_GetPCLK1Freq>
 800514c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800514e:	e010      	b.n	8005172 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005150:	4b9e      	ldr	r3, [pc, #632]	; (80053cc <UART_SetConfig+0x5c0>)
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005154:	e00d      	b.n	8005172 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005156:	f7fd f965 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 800515a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800515c:	e009      	b.n	8005172 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800515e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005164:	e005      	b.n	8005172 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005170:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 8130 	beq.w	80053da <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	4a94      	ldr	r2, [pc, #592]	; (80053d0 <UART_SetConfig+0x5c4>)
 8005180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005184:	461a      	mov	r2, r3
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	fbb3 f3f2 	udiv	r3, r3, r2
 800518c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	4613      	mov	r3, r2
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	4413      	add	r3, r2
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	429a      	cmp	r2, r3
 800519c:	d305      	bcc.n	80051aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d903      	bls.n	80051b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80051b0:	e113      	b.n	80053da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	2200      	movs	r2, #0
 80051b6:	60bb      	str	r3, [r7, #8]
 80051b8:	60fa      	str	r2, [r7, #12]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	4a84      	ldr	r2, [pc, #528]	; (80053d0 <UART_SetConfig+0x5c4>)
 80051c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	2200      	movs	r2, #0
 80051c8:	603b      	str	r3, [r7, #0]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051d4:	f7fb f884 	bl	80002e0 <__aeabi_uldivmod>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	4610      	mov	r0, r2
 80051de:	4619      	mov	r1, r3
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	020b      	lsls	r3, r1, #8
 80051ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051ee:	0202      	lsls	r2, r0, #8
 80051f0:	6979      	ldr	r1, [r7, #20]
 80051f2:	6849      	ldr	r1, [r1, #4]
 80051f4:	0849      	lsrs	r1, r1, #1
 80051f6:	2000      	movs	r0, #0
 80051f8:	460c      	mov	r4, r1
 80051fa:	4605      	mov	r5, r0
 80051fc:	eb12 0804 	adds.w	r8, r2, r4
 8005200:	eb43 0905 	adc.w	r9, r3, r5
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	469a      	mov	sl, r3
 800520c:	4693      	mov	fp, r2
 800520e:	4652      	mov	r2, sl
 8005210:	465b      	mov	r3, fp
 8005212:	4640      	mov	r0, r8
 8005214:	4649      	mov	r1, r9
 8005216:	f7fb f863 	bl	80002e0 <__aeabi_uldivmod>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4613      	mov	r3, r2
 8005220:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005228:	d308      	bcc.n	800523c <UART_SetConfig+0x430>
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005230:	d204      	bcs.n	800523c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6a3a      	ldr	r2, [r7, #32]
 8005238:	60da      	str	r2, [r3, #12]
 800523a:	e0ce      	b.n	80053da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005242:	e0ca      	b.n	80053da <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800524c:	d166      	bne.n	800531c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800524e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005252:	2b08      	cmp	r3, #8
 8005254:	d827      	bhi.n	80052a6 <UART_SetConfig+0x49a>
 8005256:	a201      	add	r2, pc, #4	; (adr r2, 800525c <UART_SetConfig+0x450>)
 8005258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525c:	08005281 	.word	0x08005281
 8005260:	08005289 	.word	0x08005289
 8005264:	08005291 	.word	0x08005291
 8005268:	080052a7 	.word	0x080052a7
 800526c:	08005297 	.word	0x08005297
 8005270:	080052a7 	.word	0x080052a7
 8005274:	080052a7 	.word	0x080052a7
 8005278:	080052a7 	.word	0x080052a7
 800527c:	0800529f 	.word	0x0800529f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005280:	f7fd f93e 	bl	8002500 <HAL_RCC_GetPCLK1Freq>
 8005284:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005286:	e014      	b.n	80052b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005288:	f7fd f950 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 800528c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800528e:	e010      	b.n	80052b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005290:	4b4e      	ldr	r3, [pc, #312]	; (80053cc <UART_SetConfig+0x5c0>)
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005294:	e00d      	b.n	80052b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005296:	f7fd f8c5 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 800529a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800529c:	e009      	b.n	80052b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800529e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052a4:	e005      	b.n	80052b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80052b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8090 	beq.w	80053da <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	4a44      	ldr	r2, [pc, #272]	; (80053d0 <UART_SetConfig+0x5c4>)
 80052c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052c4:	461a      	mov	r2, r3
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80052cc:	005a      	lsls	r2, r3, #1
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	441a      	add	r2, r3
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	fbb2 f3f3 	udiv	r3, r2, r3
 80052de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	2b0f      	cmp	r3, #15
 80052e4:	d916      	bls.n	8005314 <UART_SetConfig+0x508>
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ec:	d212      	bcs.n	8005314 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f023 030f 	bic.w	r3, r3, #15
 80052f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	085b      	lsrs	r3, r3, #1
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	b29a      	uxth	r2, r3
 8005304:	8bfb      	ldrh	r3, [r7, #30]
 8005306:	4313      	orrs	r3, r2
 8005308:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	8bfa      	ldrh	r2, [r7, #30]
 8005310:	60da      	str	r2, [r3, #12]
 8005312:	e062      	b.n	80053da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800531a:	e05e      	b.n	80053da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800531c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005320:	2b08      	cmp	r3, #8
 8005322:	d828      	bhi.n	8005376 <UART_SetConfig+0x56a>
 8005324:	a201      	add	r2, pc, #4	; (adr r2, 800532c <UART_SetConfig+0x520>)
 8005326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532a:	bf00      	nop
 800532c:	08005351 	.word	0x08005351
 8005330:	08005359 	.word	0x08005359
 8005334:	08005361 	.word	0x08005361
 8005338:	08005377 	.word	0x08005377
 800533c:	08005367 	.word	0x08005367
 8005340:	08005377 	.word	0x08005377
 8005344:	08005377 	.word	0x08005377
 8005348:	08005377 	.word	0x08005377
 800534c:	0800536f 	.word	0x0800536f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005350:	f7fd f8d6 	bl	8002500 <HAL_RCC_GetPCLK1Freq>
 8005354:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005356:	e014      	b.n	8005382 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005358:	f7fd f8e8 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 800535c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800535e:	e010      	b.n	8005382 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005360:	4b1a      	ldr	r3, [pc, #104]	; (80053cc <UART_SetConfig+0x5c0>)
 8005362:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005364:	e00d      	b.n	8005382 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005366:	f7fd f85d 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 800536a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800536c:	e009      	b.n	8005382 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800536e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005372:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005374:	e005      	b.n	8005382 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005380:	bf00      	nop
    }

    if (pclk != 0U)
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	2b00      	cmp	r3, #0
 8005386:	d028      	beq.n	80053da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	4a10      	ldr	r2, [pc, #64]	; (80053d0 <UART_SetConfig+0x5c4>)
 800538e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005392:	461a      	mov	r2, r3
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	fbb3 f2f2 	udiv	r2, r3, r2
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	085b      	lsrs	r3, r3, #1
 80053a0:	441a      	add	r2, r3
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	2b0f      	cmp	r3, #15
 80053b0:	d910      	bls.n	80053d4 <UART_SetConfig+0x5c8>
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b8:	d20c      	bcs.n	80053d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	b29a      	uxth	r2, r3
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60da      	str	r2, [r3, #12]
 80053c4:	e009      	b.n	80053da <UART_SetConfig+0x5ce>
 80053c6:	bf00      	nop
 80053c8:	40008000 	.word	0x40008000
 80053cc:	00f42400 	.word	0x00f42400
 80053d0:	08007eb8 	.word	0x08007eb8
      }
      else
      {
        ret = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2201      	movs	r2, #1
 80053de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2200      	movs	r2, #0
 80053ee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2200      	movs	r2, #0
 80053f4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80053f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3730      	adds	r7, #48	; 0x30
 80053fe:	46bd      	mov	sp, r7
 8005400:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01a      	beq.n	800551a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005502:	d10a      	bne.n	800551a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	605a      	str	r2, [r3, #4]
  }
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af02      	add	r7, sp, #8
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005558:	f7fb fee0 	bl	800131c <HAL_GetTick>
 800555c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b08      	cmp	r3, #8
 800556a:	d10e      	bne.n	800558a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800556c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f82f 	bl	80055de <UART_WaitOnFlagUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e025      	b.n	80055d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b04      	cmp	r3, #4
 8005596:	d10e      	bne.n	80055b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005598:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f819 	bl	80055de <UART_WaitOnFlagUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e00f      	b.n	80055d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b09c      	sub	sp, #112	; 0x70
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	4613      	mov	r3, r2
 80055ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ee:	e0a9      	b.n	8005744 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f6:	f000 80a5 	beq.w	8005744 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fa:	f7fb fe8f 	bl	800131c <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005606:	429a      	cmp	r2, r3
 8005608:	d302      	bcc.n	8005610 <UART_WaitOnFlagUntilTimeout+0x32>
 800560a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800560c:	2b00      	cmp	r3, #0
 800560e:	d140      	bne.n	8005692 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800561e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005620:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005624:	667b      	str	r3, [r7, #100]	; 0x64
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	461a      	mov	r2, r3
 800562c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800562e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005630:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005632:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005634:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005636:	e841 2300 	strex	r3, r2, [r1]
 800563a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800563c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1e6      	bne.n	8005610 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3308      	adds	r3, #8
 8005648:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	f023 0301 	bic.w	r3, r3, #1
 8005658:	663b      	str	r3, [r7, #96]	; 0x60
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3308      	adds	r3, #8
 8005660:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005662:	64ba      	str	r2, [r7, #72]	; 0x48
 8005664:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005668:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e5      	bne.n	8005642 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2220      	movs	r2, #32
 800567a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2220      	movs	r2, #32
 8005682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e069      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d051      	beq.n	8005744 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ae:	d149      	bne.n	8005744 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	e853 3f00 	ldrex	r3, [r3]
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d8:	637b      	str	r3, [r7, #52]	; 0x34
 80056da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056e0:	e841 2300 	strex	r3, r2, [r1]
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e6      	bne.n	80056ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3308      	adds	r3, #8
 80056f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	613b      	str	r3, [r7, #16]
   return(result);
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f023 0301 	bic.w	r3, r3, #1
 8005702:	66bb      	str	r3, [r7, #104]	; 0x68
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3308      	adds	r3, #8
 800570a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800570c:	623a      	str	r2, [r7, #32]
 800570e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	69f9      	ldr	r1, [r7, #28]
 8005712:	6a3a      	ldr	r2, [r7, #32]
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	61bb      	str	r3, [r7, #24]
   return(result);
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e5      	bne.n	80056ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2220      	movs	r2, #32
 8005724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2220      	movs	r2, #32
 800572c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e010      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69da      	ldr	r2, [r3, #28]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4013      	ands	r3, r2
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	429a      	cmp	r2, r3
 8005752:	bf0c      	ite	eq
 8005754:	2301      	moveq	r3, #1
 8005756:	2300      	movne	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	461a      	mov	r2, r3
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	429a      	cmp	r2, r3
 8005760:	f43f af46 	beq.w	80055f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3770      	adds	r7, #112	; 0x70
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005770:	b480      	push	{r7}
 8005772:	b0a3      	sub	sp, #140	; 0x8c
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	4613      	mov	r3, r2
 800577c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	88fa      	ldrh	r2, [r7, #6]
 8005788:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	88fa      	ldrh	r2, [r7, #6]
 8005790:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a2:	d10e      	bne.n	80057c2 <UART_Start_Receive_IT+0x52>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <UART_Start_Receive_IT+0x48>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80057b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057b6:	e02d      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	22ff      	movs	r2, #255	; 0xff
 80057bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057c0:	e028      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10d      	bne.n	80057e6 <UART_Start_Receive_IT+0x76>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d104      	bne.n	80057dc <UART_Start_Receive_IT+0x6c>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	22ff      	movs	r2, #255	; 0xff
 80057d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057da:	e01b      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	227f      	movs	r2, #127	; 0x7f
 80057e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057e4:	e016      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ee:	d10d      	bne.n	800580c <UART_Start_Receive_IT+0x9c>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d104      	bne.n	8005802 <UART_Start_Receive_IT+0x92>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	227f      	movs	r2, #127	; 0x7f
 80057fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005800:	e008      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	223f      	movs	r2, #63	; 0x3f
 8005806:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800580a:	e003      	b.n	8005814 <UART_Start_Receive_IT+0xa4>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2222      	movs	r2, #34	; 0x22
 8005820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3308      	adds	r3, #8
 800582a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005836:	f043 0301 	orr.w	r3, r3, #1
 800583a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3308      	adds	r3, #8
 8005844:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005848:	673a      	str	r2, [r7, #112]	; 0x70
 800584a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800584e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005856:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e3      	bne.n	8005824 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005864:	d153      	bne.n	800590e <UART_Start_Receive_IT+0x19e>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800586c:	88fa      	ldrh	r2, [r7, #6]
 800586e:	429a      	cmp	r2, r3
 8005870:	d34d      	bcc.n	800590e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587a:	d107      	bne.n	800588c <UART_Start_Receive_IT+0x11c>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d103      	bne.n	800588c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4a4b      	ldr	r2, [pc, #300]	; (80059b4 <UART_Start_Receive_IT+0x244>)
 8005888:	671a      	str	r2, [r3, #112]	; 0x70
 800588a:	e002      	b.n	8005892 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4a4a      	ldr	r2, [pc, #296]	; (80059b8 <UART_Start_Receive_IT+0x248>)
 8005890:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d01a      	beq.n	80058d8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80058b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058c6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058cc:	e841 2300 	strex	r3, r2, [r1]
 80058d0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80058d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1e4      	bne.n	80058a2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3308      	adds	r3, #8
 80058de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3308      	adds	r3, #8
 80058f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80058f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80058fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e5      	bne.n	80058d8 <UART_Start_Receive_IT+0x168>
 800590c:	e04a      	b.n	80059a4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005916:	d107      	bne.n	8005928 <UART_Start_Receive_IT+0x1b8>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d103      	bne.n	8005928 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4a26      	ldr	r2, [pc, #152]	; (80059bc <UART_Start_Receive_IT+0x24c>)
 8005924:	671a      	str	r2, [r3, #112]	; 0x70
 8005926:	e002      	b.n	800592e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4a25      	ldr	r2, [pc, #148]	; (80059c0 <UART_Start_Receive_IT+0x250>)
 800592c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d019      	beq.n	8005972 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	e853 3f00 	ldrex	r3, [r3]
 800594a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005952:	677b      	str	r3, [r7, #116]	; 0x74
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800595c:	637b      	str	r3, [r7, #52]	; 0x34
 800595e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005960:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005964:	e841 2300 	strex	r3, r2, [r1]
 8005968:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800596a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e6      	bne.n	800593e <UART_Start_Receive_IT+0x1ce>
 8005970:	e018      	b.n	80059a4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	e853 3f00 	ldrex	r3, [r3]
 800597e:	613b      	str	r3, [r7, #16]
   return(result);
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f043 0320 	orr.w	r3, r3, #32
 8005986:	67bb      	str	r3, [r7, #120]	; 0x78
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005990:	623b      	str	r3, [r7, #32]
 8005992:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005994:	69f9      	ldr	r1, [r7, #28]
 8005996:	6a3a      	ldr	r2, [r7, #32]
 8005998:	e841 2300 	strex	r3, r2, [r1]
 800599c:	61bb      	str	r3, [r7, #24]
   return(result);
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e6      	bne.n	8005972 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	378c      	adds	r7, #140	; 0x8c
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	080060cd 	.word	0x080060cd
 80059b8:	08005dd5 	.word	0x08005dd5
 80059bc:	08005c73 	.word	0x08005c73
 80059c0:	08005b13 	.word	0x08005b13

080059c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b095      	sub	sp, #84	; 0x54
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ea:	643b      	str	r3, [r7, #64]	; 0x40
 80059ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e6      	bne.n	80059cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3308      	adds	r3, #8
 8005a04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	e853 3f00 	ldrex	r3, [r3]
 8005a0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a14:	f023 0301 	bic.w	r3, r3, #1
 8005a18:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3308      	adds	r3, #8
 8005a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e3      	bne.n	80059fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d118      	bne.n	8005a70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	e853 3f00 	ldrex	r3, [r3]
 8005a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f023 0310 	bic.w	r3, r3, #16
 8005a52:	647b      	str	r3, [r7, #68]	; 0x44
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	6979      	ldr	r1, [r7, #20]
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	613b      	str	r3, [r7, #16]
   return(result);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e6      	bne.n	8005a3e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005a84:	bf00      	nop
 8005a86:	3754      	adds	r7, #84	; 0x54
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f7ff f996 	bl	8004de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ab4:	bf00      	nop
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b088      	sub	sp, #32
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	e853 3f00 	ldrex	r3, [r3]
 8005ad0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	61bb      	str	r3, [r7, #24]
 8005ae4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	6979      	ldr	r1, [r7, #20]
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	613b      	str	r3, [r7, #16]
   return(result);
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e6      	bne.n	8005ac4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff f961 	bl	8004dcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b0a:	bf00      	nop
 8005b0c:	3720      	adds	r7, #32
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b096      	sub	sp, #88	; 0x58
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005b20:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2a:	2b22      	cmp	r3, #34	; 0x22
 8005b2c:	f040 8095 	bne.w	8005c5a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b3a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005b3e:	b2d9      	uxtb	r1, r3
 8005b40:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4a:	400a      	ands	r2, r1
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	3b01      	subs	r3, #1
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d178      	bne.n	8005c6a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b80:	e853 3f00 	ldrex	r3, [r3]
 8005b84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b8c:	653b      	str	r3, [r7, #80]	; 0x50
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b96:	647b      	str	r3, [r7, #68]	; 0x44
 8005b98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e6      	bne.n	8005b78 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3308      	adds	r3, #8
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	f023 0301 	bic.w	r3, r3, #1
 8005bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3308      	adds	r3, #8
 8005bc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bca:	633a      	str	r2, [r7, #48]	; 0x30
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e5      	bne.n	8005baa <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d12e      	bne.n	8005c52 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	e853 3f00 	ldrex	r3, [r3]
 8005c06:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0310 	bic.w	r3, r3, #16
 8005c0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	461a      	mov	r2, r3
 8005c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c18:	61fb      	str	r3, [r7, #28]
 8005c1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	69b9      	ldr	r1, [r7, #24]
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	e841 2300 	strex	r3, r2, [r1]
 8005c24:	617b      	str	r3, [r7, #20]
   return(result);
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e6      	bne.n	8005bfa <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f003 0310 	and.w	r3, r3, #16
 8005c36:	2b10      	cmp	r3, #16
 8005c38:	d103      	bne.n	8005c42 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2210      	movs	r2, #16
 8005c40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c48:	4619      	mov	r1, r3
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff f8d2 	bl	8004df4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c50:	e00b      	b.n	8005c6a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fa ff54 	bl	8000b00 <HAL_UART_RxCpltCallback>
}
 8005c58:	e007      	b.n	8005c6a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	699a      	ldr	r2, [r3, #24]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f042 0208 	orr.w	r2, r2, #8
 8005c68:	619a      	str	r2, [r3, #24]
}
 8005c6a:	bf00      	nop
 8005c6c:	3758      	adds	r7, #88	; 0x58
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b096      	sub	sp, #88	; 0x58
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005c80:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8a:	2b22      	cmp	r3, #34	; 0x22
 8005c8c:	f040 8095 	bne.w	8005dba <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005ca0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005ca4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005ca8:	4013      	ands	r3, r2
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cae:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb4:	1c9a      	adds	r2, r3, #2
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d178      	bne.n	8005dca <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce0:	e853 3f00 	ldrex	r3, [r3]
 8005ce4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf6:	643b      	str	r3, [r7, #64]	; 0x40
 8005cf8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cfe:	e841 2300 	strex	r3, r2, [r1]
 8005d02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1e6      	bne.n	8005cd8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3308      	adds	r3, #8
 8005d10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	e853 3f00 	ldrex	r3, [r3]
 8005d18:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	f023 0301 	bic.w	r3, r3, #1
 8005d20:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3308      	adds	r3, #8
 8005d28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d32:	e841 2300 	strex	r3, r2, [r1]
 8005d36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1e5      	bne.n	8005d0a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2220      	movs	r2, #32
 8005d42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d12e      	bne.n	8005db2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	e853 3f00 	ldrex	r3, [r3]
 8005d66:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f023 0310 	bic.w	r3, r3, #16
 8005d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	461a      	mov	r2, r3
 8005d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d78:	61bb      	str	r3, [r7, #24]
 8005d7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7c:	6979      	ldr	r1, [r7, #20]
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	e841 2300 	strex	r3, r2, [r1]
 8005d84:	613b      	str	r3, [r7, #16]
   return(result);
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e6      	bne.n	8005d5a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	f003 0310 	and.w	r3, r3, #16
 8005d96:	2b10      	cmp	r3, #16
 8005d98:	d103      	bne.n	8005da2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2210      	movs	r2, #16
 8005da0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005da8:	4619      	mov	r1, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff f822 	bl	8004df4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005db0:	e00b      	b.n	8005dca <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7fa fea4 	bl	8000b00 <HAL_UART_RxCpltCallback>
}
 8005db8:	e007      	b.n	8005dca <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	699a      	ldr	r2, [r3, #24]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f042 0208 	orr.w	r2, r2, #8
 8005dc8:	619a      	str	r2, [r3, #24]
}
 8005dca:	bf00      	nop
 8005dcc:	3758      	adds	r7, #88	; 0x58
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b0a6      	sub	sp, #152	; 0x98
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005de2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0a:	2b22      	cmp	r3, #34	; 0x22
 8005e0c:	f040 814f 	bne.w	80060ae <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005e16:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e1a:	e0f6      	b.n	800600a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e26:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005e2a:	b2d9      	uxtb	r1, r3
 8005e2c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e36:	400a      	ands	r2, r1
 8005e38:	b2d2      	uxtb	r2, r2
 8005e3a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e40:	1c5a      	adds	r2, r3, #1
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005e62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d053      	beq.n	8005f16 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d011      	beq.n	8005e9e <UART_RxISR_8BIT_FIFOEN+0xca>
 8005e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00b      	beq.n	8005e9e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e94:	f043 0201 	orr.w	r2, r3, #1
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d011      	beq.n	8005ece <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005eaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00b      	beq.n	8005ece <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ec4:	f043 0204 	orr.w	r2, r3, #4
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ece:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d011      	beq.n	8005efe <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005eda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00b      	beq.n	8005efe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2204      	movs	r2, #4
 8005eec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ef4:	f043 0202 	orr.w	r2, r3, #2
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d006      	beq.n	8005f16 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7fe ff69 	bl	8004de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d173      	bne.n	800600a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f2a:	e853 3f00 	ldrex	r3, [r3]
 8005f2e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005f30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f44:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f46:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f48:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005f4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f4c:	e841 2300 	strex	r3, r2, [r1]
 8005f50:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1e4      	bne.n	8005f22 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f62:	e853 3f00 	ldrex	r3, [r3]
 8005f66:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f6e:	f023 0301 	bic.w	r3, r3, #1
 8005f72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3308      	adds	r3, #8
 8005f7a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f7c:	657a      	str	r2, [r7, #84]	; 0x54
 8005f7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f80:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f84:	e841 2300 	strex	r3, r2, [r1]
 8005f88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e3      	bne.n	8005f58 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d12e      	bne.n	8006004 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	f023 0310 	bic.w	r3, r3, #16
 8005fc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fca:	643b      	str	r3, [r7, #64]	; 0x40
 8005fcc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fd2:	e841 2300 	strex	r3, r2, [r1]
 8005fd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1e6      	bne.n	8005fac <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	f003 0310 	and.w	r3, r3, #16
 8005fe8:	2b10      	cmp	r3, #16
 8005fea:	d103      	bne.n	8005ff4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2210      	movs	r2, #16
 8005ff2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7fe fef9 	bl	8004df4 <HAL_UARTEx_RxEventCallback>
 8006002:	e002      	b.n	800600a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7fa fd7b 	bl	8000b00 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800600a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800600e:	2b00      	cmp	r3, #0
 8006010:	d006      	beq.n	8006020 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8006012:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006016:	f003 0320 	and.w	r3, r3, #32
 800601a:	2b00      	cmp	r3, #0
 800601c:	f47f aefe 	bne.w	8005e1c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006026:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800602a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800602e:	2b00      	cmp	r3, #0
 8006030:	d045      	beq.n	80060be <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006038:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800603c:	429a      	cmp	r2, r3
 800603e:	d23e      	bcs.n	80060be <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3308      	adds	r3, #8
 8006046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	e853 3f00 	ldrex	r3, [r3]
 800604e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006056:	673b      	str	r3, [r7, #112]	; 0x70
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3308      	adds	r3, #8
 800605e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006060:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006064:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006068:	e841 2300 	strex	r3, r2, [r1]
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e5      	bne.n	8006040 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a14      	ldr	r2, [pc, #80]	; (80060c8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8006078:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	e853 3f00 	ldrex	r3, [r3]
 8006086:	60bb      	str	r3, [r7, #8]
   return(result);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f043 0320 	orr.w	r3, r3, #32
 800608e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006098:	61bb      	str	r3, [r7, #24]
 800609a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609c:	6979      	ldr	r1, [r7, #20]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	e841 2300 	strex	r3, r2, [r1]
 80060a4:	613b      	str	r3, [r7, #16]
   return(result);
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e6      	bne.n	800607a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060ac:	e007      	b.n	80060be <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699a      	ldr	r2, [r3, #24]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f042 0208 	orr.w	r2, r2, #8
 80060bc:	619a      	str	r2, [r3, #24]
}
 80060be:	bf00      	nop
 80060c0:	3798      	adds	r7, #152	; 0x98
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	08005b13 	.word	0x08005b13

080060cc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b0a8      	sub	sp, #160	; 0xa0
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80060da:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006102:	2b22      	cmp	r3, #34	; 0x22
 8006104:	f040 8153 	bne.w	80063ae <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800610e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006112:	e0fa      	b.n	800630a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006122:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8006126:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800612a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800612e:	4013      	ands	r3, r2
 8006130:	b29a      	uxth	r2, r3
 8006132:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006136:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613c:	1c9a      	adds	r2, r3, #2
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800615e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	2b00      	cmp	r3, #0
 8006168:	d053      	beq.n	8006212 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800616a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d011      	beq.n	800619a <UART_RxISR_16BIT_FIFOEN+0xce>
 8006176:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800617a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00b      	beq.n	800619a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2201      	movs	r2, #1
 8006188:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006190:	f043 0201 	orr.w	r2, r3, #1
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800619a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d011      	beq.n	80061ca <UART_RxISR_16BIT_FIFOEN+0xfe>
 80061a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00b      	beq.n	80061ca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2202      	movs	r2, #2
 80061b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061c0:	f043 0204 	orr.w	r2, r3, #4
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061ce:	f003 0304 	and.w	r3, r3, #4
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d011      	beq.n	80061fa <UART_RxISR_16BIT_FIFOEN+0x12e>
 80061d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00b      	beq.n	80061fa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2204      	movs	r2, #4
 80061e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061f0:	f043 0202 	orr.w	r2, r3, #2
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006200:	2b00      	cmp	r3, #0
 8006202:	d006      	beq.n	8006212 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7fe fdeb 	bl	8004de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d175      	bne.n	800630a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800622c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800622e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006232:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006240:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006242:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006244:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006246:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006248:	e841 2300 	strex	r3, r2, [r1]
 800624c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800624e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1e4      	bne.n	800621e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3308      	adds	r3, #8
 800625a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800626a:	f023 0301 	bic.w	r3, r3, #1
 800626e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3308      	adds	r3, #8
 8006278:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800627c:	65ba      	str	r2, [r7, #88]	; 0x58
 800627e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006282:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006284:	e841 2300 	strex	r3, r2, [r1]
 8006288:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800628a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e1      	bne.n	8006254 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d12e      	bne.n	8006304 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b4:	e853 3f00 	ldrex	r3, [r3]
 80062b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062bc:	f023 0310 	bic.w	r3, r3, #16
 80062c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062ca:	647b      	str	r3, [r7, #68]	; 0x44
 80062cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062d2:	e841 2300 	strex	r3, r2, [r1]
 80062d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1e6      	bne.n	80062ac <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	f003 0310 	and.w	r3, r3, #16
 80062e8:	2b10      	cmp	r3, #16
 80062ea:	d103      	bne.n	80062f4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2210      	movs	r2, #16
 80062f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7fe fd79 	bl	8004df4 <HAL_UARTEx_RxEventCallback>
 8006302:	e002      	b.n	800630a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7fa fbfb 	bl	8000b00 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800630a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800630e:	2b00      	cmp	r3, #0
 8006310:	d006      	beq.n	8006320 <UART_RxISR_16BIT_FIFOEN+0x254>
 8006312:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b00      	cmp	r3, #0
 800631c:	f47f aefa 	bne.w	8006114 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006326:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800632a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800632e:	2b00      	cmp	r3, #0
 8006330:	d045      	beq.n	80063be <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006338:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800633c:	429a      	cmp	r2, r3
 800633e:	d23e      	bcs.n	80063be <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3308      	adds	r3, #8
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	623b      	str	r3, [r7, #32]
   return(result);
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006356:	677b      	str	r3, [r7, #116]	; 0x74
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3308      	adds	r3, #8
 800635e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006360:	633a      	str	r2, [r7, #48]	; 0x30
 8006362:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006364:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006368:	e841 2300 	strex	r3, r2, [r1]
 800636c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1e5      	bne.n	8006340 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a14      	ldr	r2, [pc, #80]	; (80063c8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8006378:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	e853 3f00 	ldrex	r3, [r3]
 8006386:	60fb      	str	r3, [r7, #12]
   return(result);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f043 0320 	orr.w	r3, r3, #32
 800638e:	673b      	str	r3, [r7, #112]	; 0x70
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	461a      	mov	r2, r3
 8006396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006398:	61fb      	str	r3, [r7, #28]
 800639a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639c:	69b9      	ldr	r1, [r7, #24]
 800639e:	69fa      	ldr	r2, [r7, #28]
 80063a0:	e841 2300 	strex	r3, r2, [r1]
 80063a4:	617b      	str	r3, [r7, #20]
   return(result);
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e6      	bne.n	800637a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063ac:	e007      	b.n	80063be <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	699a      	ldr	r2, [r3, #24]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0208 	orr.w	r2, r2, #8
 80063bc:	619a      	str	r2, [r3, #24]
}
 80063be:	bf00      	nop
 80063c0:	37a0      	adds	r7, #160	; 0xa0
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	08005c73 	.word	0x08005c73

080063cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <HAL_UARTEx_DisableFifoMode+0x16>
 800641a:	2302      	movs	r3, #2
 800641c:	e027      	b.n	800646e <HAL_UARTEx_DisableFifoMode+0x66>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2224      	movs	r2, #36	; 0x24
 800642a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0201 	bic.w	r2, r2, #1
 8006444:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800644c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2220      	movs	r2, #32
 8006460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800648e:	2302      	movs	r3, #2
 8006490:	e02d      	b.n	80064ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2224      	movs	r2, #36	; 0x24
 800649e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 0201 	bic.w	r2, r2, #1
 80064b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f850 	bl	8006574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b084      	sub	sp, #16
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006506:	2b01      	cmp	r3, #1
 8006508:	d101      	bne.n	800650e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800650a:	2302      	movs	r3, #2
 800650c:	e02d      	b.n	800656a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2224      	movs	r2, #36	; 0x24
 800651a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 0201 	bic.w	r2, r2, #1
 8006534:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f812 	bl	8006574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2220      	movs	r2, #32
 800655c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006580:	2b00      	cmp	r3, #0
 8006582:	d108      	bne.n	8006596 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006594:	e031      	b.n	80065fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006596:	2308      	movs	r3, #8
 8006598:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800659a:	2308      	movs	r3, #8
 800659c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	0e5b      	lsrs	r3, r3, #25
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	0f5b      	lsrs	r3, r3, #29
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065be:	7bbb      	ldrb	r3, [r7, #14]
 80065c0:	7b3a      	ldrb	r2, [r7, #12]
 80065c2:	4911      	ldr	r1, [pc, #68]	; (8006608 <UARTEx_SetNbDataToProcess+0x94>)
 80065c4:	5c8a      	ldrb	r2, [r1, r2]
 80065c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065ca:	7b3a      	ldrb	r2, [r7, #12]
 80065cc:	490f      	ldr	r1, [pc, #60]	; (800660c <UARTEx_SetNbDataToProcess+0x98>)
 80065ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	7b7a      	ldrb	r2, [r7, #13]
 80065e0:	4909      	ldr	r1, [pc, #36]	; (8006608 <UARTEx_SetNbDataToProcess+0x94>)
 80065e2:	5c8a      	ldrb	r2, [r1, r2]
 80065e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80065e8:	7b7a      	ldrb	r2, [r7, #13]
 80065ea:	4908      	ldr	r1, [pc, #32]	; (800660c <UARTEx_SetNbDataToProcess+0x98>)
 80065ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80065fa:	bf00      	nop
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	08007ed0 	.word	0x08007ed0
 800660c:	08007ed8 	.word	0x08007ed8

08006610 <atoi>:
 8006610:	220a      	movs	r2, #10
 8006612:	2100      	movs	r1, #0
 8006614:	f000 b930 	b.w	8006878 <strtol>

08006618 <__errno>:
 8006618:	4b01      	ldr	r3, [pc, #4]	; (8006620 <__errno+0x8>)
 800661a:	6818      	ldr	r0, [r3, #0]
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	20000010 	.word	0x20000010

08006624 <__libc_init_array>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	4d0d      	ldr	r5, [pc, #52]	; (800665c <__libc_init_array+0x38>)
 8006628:	4c0d      	ldr	r4, [pc, #52]	; (8006660 <__libc_init_array+0x3c>)
 800662a:	1b64      	subs	r4, r4, r5
 800662c:	10a4      	asrs	r4, r4, #2
 800662e:	2600      	movs	r6, #0
 8006630:	42a6      	cmp	r6, r4
 8006632:	d109      	bne.n	8006648 <__libc_init_array+0x24>
 8006634:	4d0b      	ldr	r5, [pc, #44]	; (8006664 <__libc_init_array+0x40>)
 8006636:	4c0c      	ldr	r4, [pc, #48]	; (8006668 <__libc_init_array+0x44>)
 8006638:	f001 fade 	bl	8007bf8 <_init>
 800663c:	1b64      	subs	r4, r4, r5
 800663e:	10a4      	asrs	r4, r4, #2
 8006640:	2600      	movs	r6, #0
 8006642:	42a6      	cmp	r6, r4
 8006644:	d105      	bne.n	8006652 <__libc_init_array+0x2e>
 8006646:	bd70      	pop	{r4, r5, r6, pc}
 8006648:	f855 3b04 	ldr.w	r3, [r5], #4
 800664c:	4798      	blx	r3
 800664e:	3601      	adds	r6, #1
 8006650:	e7ee      	b.n	8006630 <__libc_init_array+0xc>
 8006652:	f855 3b04 	ldr.w	r3, [r5], #4
 8006656:	4798      	blx	r3
 8006658:	3601      	adds	r6, #1
 800665a:	e7f2      	b.n	8006642 <__libc_init_array+0x1e>
 800665c:	08008130 	.word	0x08008130
 8006660:	08008130 	.word	0x08008130
 8006664:	08008130 	.word	0x08008130
 8006668:	08008134 	.word	0x08008134

0800666c <memset>:
 800666c:	4402      	add	r2, r0
 800666e:	4603      	mov	r3, r0
 8006670:	4293      	cmp	r3, r2
 8006672:	d100      	bne.n	8006676 <memset+0xa>
 8006674:	4770      	bx	lr
 8006676:	f803 1b01 	strb.w	r1, [r3], #1
 800667a:	e7f9      	b.n	8006670 <memset+0x4>

0800667c <siprintf>:
 800667c:	b40e      	push	{r1, r2, r3}
 800667e:	b500      	push	{lr}
 8006680:	b09c      	sub	sp, #112	; 0x70
 8006682:	ab1d      	add	r3, sp, #116	; 0x74
 8006684:	9002      	str	r0, [sp, #8]
 8006686:	9006      	str	r0, [sp, #24]
 8006688:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800668c:	4809      	ldr	r0, [pc, #36]	; (80066b4 <siprintf+0x38>)
 800668e:	9107      	str	r1, [sp, #28]
 8006690:	9104      	str	r1, [sp, #16]
 8006692:	4909      	ldr	r1, [pc, #36]	; (80066b8 <siprintf+0x3c>)
 8006694:	f853 2b04 	ldr.w	r2, [r3], #4
 8006698:	9105      	str	r1, [sp, #20]
 800669a:	6800      	ldr	r0, [r0, #0]
 800669c:	9301      	str	r3, [sp, #4]
 800669e:	a902      	add	r1, sp, #8
 80066a0:	f000 fa68 	bl	8006b74 <_svfiprintf_r>
 80066a4:	9b02      	ldr	r3, [sp, #8]
 80066a6:	2200      	movs	r2, #0
 80066a8:	701a      	strb	r2, [r3, #0]
 80066aa:	b01c      	add	sp, #112	; 0x70
 80066ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80066b0:	b003      	add	sp, #12
 80066b2:	4770      	bx	lr
 80066b4:	20000010 	.word	0x20000010
 80066b8:	ffff0208 	.word	0xffff0208

080066bc <strtok>:
 80066bc:	4b16      	ldr	r3, [pc, #88]	; (8006718 <strtok+0x5c>)
 80066be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066c0:	681e      	ldr	r6, [r3, #0]
 80066c2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80066c4:	4605      	mov	r5, r0
 80066c6:	b9fc      	cbnz	r4, 8006708 <strtok+0x4c>
 80066c8:	2050      	movs	r0, #80	; 0x50
 80066ca:	9101      	str	r1, [sp, #4]
 80066cc:	f000 f90e 	bl	80068ec <malloc>
 80066d0:	9901      	ldr	r1, [sp, #4]
 80066d2:	65b0      	str	r0, [r6, #88]	; 0x58
 80066d4:	4602      	mov	r2, r0
 80066d6:	b920      	cbnz	r0, 80066e2 <strtok+0x26>
 80066d8:	4b10      	ldr	r3, [pc, #64]	; (800671c <strtok+0x60>)
 80066da:	4811      	ldr	r0, [pc, #68]	; (8006720 <strtok+0x64>)
 80066dc:	2157      	movs	r1, #87	; 0x57
 80066de:	f000 f8d5 	bl	800688c <__assert_func>
 80066e2:	e9c0 4400 	strd	r4, r4, [r0]
 80066e6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80066ea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80066ee:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80066f2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80066f6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80066fa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80066fe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006702:	6184      	str	r4, [r0, #24]
 8006704:	7704      	strb	r4, [r0, #28]
 8006706:	6244      	str	r4, [r0, #36]	; 0x24
 8006708:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800670a:	2301      	movs	r3, #1
 800670c:	4628      	mov	r0, r5
 800670e:	b002      	add	sp, #8
 8006710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006714:	f000 b806 	b.w	8006724 <__strtok_r>
 8006718:	20000010 	.word	0x20000010
 800671c:	08007ee4 	.word	0x08007ee4
 8006720:	08007efb 	.word	0x08007efb

08006724 <__strtok_r>:
 8006724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006726:	b908      	cbnz	r0, 800672c <__strtok_r+0x8>
 8006728:	6810      	ldr	r0, [r2, #0]
 800672a:	b188      	cbz	r0, 8006750 <__strtok_r+0x2c>
 800672c:	4604      	mov	r4, r0
 800672e:	4620      	mov	r0, r4
 8006730:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006734:	460f      	mov	r7, r1
 8006736:	f817 6b01 	ldrb.w	r6, [r7], #1
 800673a:	b91e      	cbnz	r6, 8006744 <__strtok_r+0x20>
 800673c:	b965      	cbnz	r5, 8006758 <__strtok_r+0x34>
 800673e:	6015      	str	r5, [r2, #0]
 8006740:	4628      	mov	r0, r5
 8006742:	e005      	b.n	8006750 <__strtok_r+0x2c>
 8006744:	42b5      	cmp	r5, r6
 8006746:	d1f6      	bne.n	8006736 <__strtok_r+0x12>
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1f0      	bne.n	800672e <__strtok_r+0xa>
 800674c:	6014      	str	r4, [r2, #0]
 800674e:	7003      	strb	r3, [r0, #0]
 8006750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006752:	461c      	mov	r4, r3
 8006754:	e00c      	b.n	8006770 <__strtok_r+0x4c>
 8006756:	b915      	cbnz	r5, 800675e <__strtok_r+0x3a>
 8006758:	f814 3b01 	ldrb.w	r3, [r4], #1
 800675c:	460e      	mov	r6, r1
 800675e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006762:	42ab      	cmp	r3, r5
 8006764:	d1f7      	bne.n	8006756 <__strtok_r+0x32>
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0f3      	beq.n	8006752 <__strtok_r+0x2e>
 800676a:	2300      	movs	r3, #0
 800676c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006770:	6014      	str	r4, [r2, #0]
 8006772:	e7ed      	b.n	8006750 <__strtok_r+0x2c>

08006774 <_strtol_l.constprop.0>:
 8006774:	2b01      	cmp	r3, #1
 8006776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800677a:	d001      	beq.n	8006780 <_strtol_l.constprop.0+0xc>
 800677c:	2b24      	cmp	r3, #36	; 0x24
 800677e:	d906      	bls.n	800678e <_strtol_l.constprop.0+0x1a>
 8006780:	f7ff ff4a 	bl	8006618 <__errno>
 8006784:	2316      	movs	r3, #22
 8006786:	6003      	str	r3, [r0, #0]
 8006788:	2000      	movs	r0, #0
 800678a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800678e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006874 <_strtol_l.constprop.0+0x100>
 8006792:	460d      	mov	r5, r1
 8006794:	462e      	mov	r6, r5
 8006796:	f815 4b01 	ldrb.w	r4, [r5], #1
 800679a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800679e:	f017 0708 	ands.w	r7, r7, #8
 80067a2:	d1f7      	bne.n	8006794 <_strtol_l.constprop.0+0x20>
 80067a4:	2c2d      	cmp	r4, #45	; 0x2d
 80067a6:	d132      	bne.n	800680e <_strtol_l.constprop.0+0x9a>
 80067a8:	782c      	ldrb	r4, [r5, #0]
 80067aa:	2701      	movs	r7, #1
 80067ac:	1cb5      	adds	r5, r6, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d05b      	beq.n	800686a <_strtol_l.constprop.0+0xf6>
 80067b2:	2b10      	cmp	r3, #16
 80067b4:	d109      	bne.n	80067ca <_strtol_l.constprop.0+0x56>
 80067b6:	2c30      	cmp	r4, #48	; 0x30
 80067b8:	d107      	bne.n	80067ca <_strtol_l.constprop.0+0x56>
 80067ba:	782c      	ldrb	r4, [r5, #0]
 80067bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80067c0:	2c58      	cmp	r4, #88	; 0x58
 80067c2:	d14d      	bne.n	8006860 <_strtol_l.constprop.0+0xec>
 80067c4:	786c      	ldrb	r4, [r5, #1]
 80067c6:	2310      	movs	r3, #16
 80067c8:	3502      	adds	r5, #2
 80067ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80067ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80067d2:	f04f 0c00 	mov.w	ip, #0
 80067d6:	fbb8 f9f3 	udiv	r9, r8, r3
 80067da:	4666      	mov	r6, ip
 80067dc:	fb03 8a19 	mls	sl, r3, r9, r8
 80067e0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80067e4:	f1be 0f09 	cmp.w	lr, #9
 80067e8:	d816      	bhi.n	8006818 <_strtol_l.constprop.0+0xa4>
 80067ea:	4674      	mov	r4, lr
 80067ec:	42a3      	cmp	r3, r4
 80067ee:	dd24      	ble.n	800683a <_strtol_l.constprop.0+0xc6>
 80067f0:	f1bc 0f00 	cmp.w	ip, #0
 80067f4:	db1e      	blt.n	8006834 <_strtol_l.constprop.0+0xc0>
 80067f6:	45b1      	cmp	r9, r6
 80067f8:	d31c      	bcc.n	8006834 <_strtol_l.constprop.0+0xc0>
 80067fa:	d101      	bne.n	8006800 <_strtol_l.constprop.0+0x8c>
 80067fc:	45a2      	cmp	sl, r4
 80067fe:	db19      	blt.n	8006834 <_strtol_l.constprop.0+0xc0>
 8006800:	fb06 4603 	mla	r6, r6, r3, r4
 8006804:	f04f 0c01 	mov.w	ip, #1
 8006808:	f815 4b01 	ldrb.w	r4, [r5], #1
 800680c:	e7e8      	b.n	80067e0 <_strtol_l.constprop.0+0x6c>
 800680e:	2c2b      	cmp	r4, #43	; 0x2b
 8006810:	bf04      	itt	eq
 8006812:	782c      	ldrbeq	r4, [r5, #0]
 8006814:	1cb5      	addeq	r5, r6, #2
 8006816:	e7ca      	b.n	80067ae <_strtol_l.constprop.0+0x3a>
 8006818:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800681c:	f1be 0f19 	cmp.w	lr, #25
 8006820:	d801      	bhi.n	8006826 <_strtol_l.constprop.0+0xb2>
 8006822:	3c37      	subs	r4, #55	; 0x37
 8006824:	e7e2      	b.n	80067ec <_strtol_l.constprop.0+0x78>
 8006826:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800682a:	f1be 0f19 	cmp.w	lr, #25
 800682e:	d804      	bhi.n	800683a <_strtol_l.constprop.0+0xc6>
 8006830:	3c57      	subs	r4, #87	; 0x57
 8006832:	e7db      	b.n	80067ec <_strtol_l.constprop.0+0x78>
 8006834:	f04f 3cff 	mov.w	ip, #4294967295
 8006838:	e7e6      	b.n	8006808 <_strtol_l.constprop.0+0x94>
 800683a:	f1bc 0f00 	cmp.w	ip, #0
 800683e:	da05      	bge.n	800684c <_strtol_l.constprop.0+0xd8>
 8006840:	2322      	movs	r3, #34	; 0x22
 8006842:	6003      	str	r3, [r0, #0]
 8006844:	4646      	mov	r6, r8
 8006846:	b942      	cbnz	r2, 800685a <_strtol_l.constprop.0+0xe6>
 8006848:	4630      	mov	r0, r6
 800684a:	e79e      	b.n	800678a <_strtol_l.constprop.0+0x16>
 800684c:	b107      	cbz	r7, 8006850 <_strtol_l.constprop.0+0xdc>
 800684e:	4276      	negs	r6, r6
 8006850:	2a00      	cmp	r2, #0
 8006852:	d0f9      	beq.n	8006848 <_strtol_l.constprop.0+0xd4>
 8006854:	f1bc 0f00 	cmp.w	ip, #0
 8006858:	d000      	beq.n	800685c <_strtol_l.constprop.0+0xe8>
 800685a:	1e69      	subs	r1, r5, #1
 800685c:	6011      	str	r1, [r2, #0]
 800685e:	e7f3      	b.n	8006848 <_strtol_l.constprop.0+0xd4>
 8006860:	2430      	movs	r4, #48	; 0x30
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1b1      	bne.n	80067ca <_strtol_l.constprop.0+0x56>
 8006866:	2308      	movs	r3, #8
 8006868:	e7af      	b.n	80067ca <_strtol_l.constprop.0+0x56>
 800686a:	2c30      	cmp	r4, #48	; 0x30
 800686c:	d0a5      	beq.n	80067ba <_strtol_l.constprop.0+0x46>
 800686e:	230a      	movs	r3, #10
 8006870:	e7ab      	b.n	80067ca <_strtol_l.constprop.0+0x56>
 8006872:	bf00      	nop
 8006874:	08007f95 	.word	0x08007f95

08006878 <strtol>:
 8006878:	4613      	mov	r3, r2
 800687a:	460a      	mov	r2, r1
 800687c:	4601      	mov	r1, r0
 800687e:	4802      	ldr	r0, [pc, #8]	; (8006888 <strtol+0x10>)
 8006880:	6800      	ldr	r0, [r0, #0]
 8006882:	f7ff bf77 	b.w	8006774 <_strtol_l.constprop.0>
 8006886:	bf00      	nop
 8006888:	20000010 	.word	0x20000010

0800688c <__assert_func>:
 800688c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800688e:	4614      	mov	r4, r2
 8006890:	461a      	mov	r2, r3
 8006892:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <__assert_func+0x2c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4605      	mov	r5, r0
 8006898:	68d8      	ldr	r0, [r3, #12]
 800689a:	b14c      	cbz	r4, 80068b0 <__assert_func+0x24>
 800689c:	4b07      	ldr	r3, [pc, #28]	; (80068bc <__assert_func+0x30>)
 800689e:	9100      	str	r1, [sp, #0]
 80068a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068a4:	4906      	ldr	r1, [pc, #24]	; (80068c0 <__assert_func+0x34>)
 80068a6:	462b      	mov	r3, r5
 80068a8:	f000 f80e 	bl	80068c8 <fiprintf>
 80068ac:	f000 fe20 	bl	80074f0 <abort>
 80068b0:	4b04      	ldr	r3, [pc, #16]	; (80068c4 <__assert_func+0x38>)
 80068b2:	461c      	mov	r4, r3
 80068b4:	e7f3      	b.n	800689e <__assert_func+0x12>
 80068b6:	bf00      	nop
 80068b8:	20000010 	.word	0x20000010
 80068bc:	08007f58 	.word	0x08007f58
 80068c0:	08007f65 	.word	0x08007f65
 80068c4:	08007f93 	.word	0x08007f93

080068c8 <fiprintf>:
 80068c8:	b40e      	push	{r1, r2, r3}
 80068ca:	b503      	push	{r0, r1, lr}
 80068cc:	4601      	mov	r1, r0
 80068ce:	ab03      	add	r3, sp, #12
 80068d0:	4805      	ldr	r0, [pc, #20]	; (80068e8 <fiprintf+0x20>)
 80068d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80068d6:	6800      	ldr	r0, [r0, #0]
 80068d8:	9301      	str	r3, [sp, #4]
 80068da:	f000 fa75 	bl	8006dc8 <_vfiprintf_r>
 80068de:	b002      	add	sp, #8
 80068e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068e4:	b003      	add	sp, #12
 80068e6:	4770      	bx	lr
 80068e8:	20000010 	.word	0x20000010

080068ec <malloc>:
 80068ec:	4b02      	ldr	r3, [pc, #8]	; (80068f8 <malloc+0xc>)
 80068ee:	4601      	mov	r1, r0
 80068f0:	6818      	ldr	r0, [r3, #0]
 80068f2:	f000 b86f 	b.w	80069d4 <_malloc_r>
 80068f6:	bf00      	nop
 80068f8:	20000010 	.word	0x20000010

080068fc <_free_r>:
 80068fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068fe:	2900      	cmp	r1, #0
 8006900:	d044      	beq.n	800698c <_free_r+0x90>
 8006902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006906:	9001      	str	r0, [sp, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	f1a1 0404 	sub.w	r4, r1, #4
 800690e:	bfb8      	it	lt
 8006910:	18e4      	addlt	r4, r4, r3
 8006912:	f001 f83d 	bl	8007990 <__malloc_lock>
 8006916:	4a1e      	ldr	r2, [pc, #120]	; (8006990 <_free_r+0x94>)
 8006918:	9801      	ldr	r0, [sp, #4]
 800691a:	6813      	ldr	r3, [r2, #0]
 800691c:	b933      	cbnz	r3, 800692c <_free_r+0x30>
 800691e:	6063      	str	r3, [r4, #4]
 8006920:	6014      	str	r4, [r2, #0]
 8006922:	b003      	add	sp, #12
 8006924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006928:	f001 b838 	b.w	800799c <__malloc_unlock>
 800692c:	42a3      	cmp	r3, r4
 800692e:	d908      	bls.n	8006942 <_free_r+0x46>
 8006930:	6825      	ldr	r5, [r4, #0]
 8006932:	1961      	adds	r1, r4, r5
 8006934:	428b      	cmp	r3, r1
 8006936:	bf01      	itttt	eq
 8006938:	6819      	ldreq	r1, [r3, #0]
 800693a:	685b      	ldreq	r3, [r3, #4]
 800693c:	1949      	addeq	r1, r1, r5
 800693e:	6021      	streq	r1, [r4, #0]
 8006940:	e7ed      	b.n	800691e <_free_r+0x22>
 8006942:	461a      	mov	r2, r3
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	b10b      	cbz	r3, 800694c <_free_r+0x50>
 8006948:	42a3      	cmp	r3, r4
 800694a:	d9fa      	bls.n	8006942 <_free_r+0x46>
 800694c:	6811      	ldr	r1, [r2, #0]
 800694e:	1855      	adds	r5, r2, r1
 8006950:	42a5      	cmp	r5, r4
 8006952:	d10b      	bne.n	800696c <_free_r+0x70>
 8006954:	6824      	ldr	r4, [r4, #0]
 8006956:	4421      	add	r1, r4
 8006958:	1854      	adds	r4, r2, r1
 800695a:	42a3      	cmp	r3, r4
 800695c:	6011      	str	r1, [r2, #0]
 800695e:	d1e0      	bne.n	8006922 <_free_r+0x26>
 8006960:	681c      	ldr	r4, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	6053      	str	r3, [r2, #4]
 8006966:	4421      	add	r1, r4
 8006968:	6011      	str	r1, [r2, #0]
 800696a:	e7da      	b.n	8006922 <_free_r+0x26>
 800696c:	d902      	bls.n	8006974 <_free_r+0x78>
 800696e:	230c      	movs	r3, #12
 8006970:	6003      	str	r3, [r0, #0]
 8006972:	e7d6      	b.n	8006922 <_free_r+0x26>
 8006974:	6825      	ldr	r5, [r4, #0]
 8006976:	1961      	adds	r1, r4, r5
 8006978:	428b      	cmp	r3, r1
 800697a:	bf04      	itt	eq
 800697c:	6819      	ldreq	r1, [r3, #0]
 800697e:	685b      	ldreq	r3, [r3, #4]
 8006980:	6063      	str	r3, [r4, #4]
 8006982:	bf04      	itt	eq
 8006984:	1949      	addeq	r1, r1, r5
 8006986:	6021      	streq	r1, [r4, #0]
 8006988:	6054      	str	r4, [r2, #4]
 800698a:	e7ca      	b.n	8006922 <_free_r+0x26>
 800698c:	b003      	add	sp, #12
 800698e:	bd30      	pop	{r4, r5, pc}
 8006990:	20000208 	.word	0x20000208

08006994 <sbrk_aligned>:
 8006994:	b570      	push	{r4, r5, r6, lr}
 8006996:	4e0e      	ldr	r6, [pc, #56]	; (80069d0 <sbrk_aligned+0x3c>)
 8006998:	460c      	mov	r4, r1
 800699a:	6831      	ldr	r1, [r6, #0]
 800699c:	4605      	mov	r5, r0
 800699e:	b911      	cbnz	r1, 80069a6 <sbrk_aligned+0x12>
 80069a0:	f000 fcd6 	bl	8007350 <_sbrk_r>
 80069a4:	6030      	str	r0, [r6, #0]
 80069a6:	4621      	mov	r1, r4
 80069a8:	4628      	mov	r0, r5
 80069aa:	f000 fcd1 	bl	8007350 <_sbrk_r>
 80069ae:	1c43      	adds	r3, r0, #1
 80069b0:	d00a      	beq.n	80069c8 <sbrk_aligned+0x34>
 80069b2:	1cc4      	adds	r4, r0, #3
 80069b4:	f024 0403 	bic.w	r4, r4, #3
 80069b8:	42a0      	cmp	r0, r4
 80069ba:	d007      	beq.n	80069cc <sbrk_aligned+0x38>
 80069bc:	1a21      	subs	r1, r4, r0
 80069be:	4628      	mov	r0, r5
 80069c0:	f000 fcc6 	bl	8007350 <_sbrk_r>
 80069c4:	3001      	adds	r0, #1
 80069c6:	d101      	bne.n	80069cc <sbrk_aligned+0x38>
 80069c8:	f04f 34ff 	mov.w	r4, #4294967295
 80069cc:	4620      	mov	r0, r4
 80069ce:	bd70      	pop	{r4, r5, r6, pc}
 80069d0:	2000020c 	.word	0x2000020c

080069d4 <_malloc_r>:
 80069d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d8:	1ccd      	adds	r5, r1, #3
 80069da:	f025 0503 	bic.w	r5, r5, #3
 80069de:	3508      	adds	r5, #8
 80069e0:	2d0c      	cmp	r5, #12
 80069e2:	bf38      	it	cc
 80069e4:	250c      	movcc	r5, #12
 80069e6:	2d00      	cmp	r5, #0
 80069e8:	4607      	mov	r7, r0
 80069ea:	db01      	blt.n	80069f0 <_malloc_r+0x1c>
 80069ec:	42a9      	cmp	r1, r5
 80069ee:	d905      	bls.n	80069fc <_malloc_r+0x28>
 80069f0:	230c      	movs	r3, #12
 80069f2:	603b      	str	r3, [r7, #0]
 80069f4:	2600      	movs	r6, #0
 80069f6:	4630      	mov	r0, r6
 80069f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069fc:	4e2e      	ldr	r6, [pc, #184]	; (8006ab8 <_malloc_r+0xe4>)
 80069fe:	f000 ffc7 	bl	8007990 <__malloc_lock>
 8006a02:	6833      	ldr	r3, [r6, #0]
 8006a04:	461c      	mov	r4, r3
 8006a06:	bb34      	cbnz	r4, 8006a56 <_malloc_r+0x82>
 8006a08:	4629      	mov	r1, r5
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	f7ff ffc2 	bl	8006994 <sbrk_aligned>
 8006a10:	1c43      	adds	r3, r0, #1
 8006a12:	4604      	mov	r4, r0
 8006a14:	d14d      	bne.n	8006ab2 <_malloc_r+0xde>
 8006a16:	6834      	ldr	r4, [r6, #0]
 8006a18:	4626      	mov	r6, r4
 8006a1a:	2e00      	cmp	r6, #0
 8006a1c:	d140      	bne.n	8006aa0 <_malloc_r+0xcc>
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	4631      	mov	r1, r6
 8006a22:	4638      	mov	r0, r7
 8006a24:	eb04 0803 	add.w	r8, r4, r3
 8006a28:	f000 fc92 	bl	8007350 <_sbrk_r>
 8006a2c:	4580      	cmp	r8, r0
 8006a2e:	d13a      	bne.n	8006aa6 <_malloc_r+0xd2>
 8006a30:	6821      	ldr	r1, [r4, #0]
 8006a32:	3503      	adds	r5, #3
 8006a34:	1a6d      	subs	r5, r5, r1
 8006a36:	f025 0503 	bic.w	r5, r5, #3
 8006a3a:	3508      	adds	r5, #8
 8006a3c:	2d0c      	cmp	r5, #12
 8006a3e:	bf38      	it	cc
 8006a40:	250c      	movcc	r5, #12
 8006a42:	4629      	mov	r1, r5
 8006a44:	4638      	mov	r0, r7
 8006a46:	f7ff ffa5 	bl	8006994 <sbrk_aligned>
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	d02b      	beq.n	8006aa6 <_malloc_r+0xd2>
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	442b      	add	r3, r5
 8006a52:	6023      	str	r3, [r4, #0]
 8006a54:	e00e      	b.n	8006a74 <_malloc_r+0xa0>
 8006a56:	6822      	ldr	r2, [r4, #0]
 8006a58:	1b52      	subs	r2, r2, r5
 8006a5a:	d41e      	bmi.n	8006a9a <_malloc_r+0xc6>
 8006a5c:	2a0b      	cmp	r2, #11
 8006a5e:	d916      	bls.n	8006a8e <_malloc_r+0xba>
 8006a60:	1961      	adds	r1, r4, r5
 8006a62:	42a3      	cmp	r3, r4
 8006a64:	6025      	str	r5, [r4, #0]
 8006a66:	bf18      	it	ne
 8006a68:	6059      	strne	r1, [r3, #4]
 8006a6a:	6863      	ldr	r3, [r4, #4]
 8006a6c:	bf08      	it	eq
 8006a6e:	6031      	streq	r1, [r6, #0]
 8006a70:	5162      	str	r2, [r4, r5]
 8006a72:	604b      	str	r3, [r1, #4]
 8006a74:	4638      	mov	r0, r7
 8006a76:	f104 060b 	add.w	r6, r4, #11
 8006a7a:	f000 ff8f 	bl	800799c <__malloc_unlock>
 8006a7e:	f026 0607 	bic.w	r6, r6, #7
 8006a82:	1d23      	adds	r3, r4, #4
 8006a84:	1af2      	subs	r2, r6, r3
 8006a86:	d0b6      	beq.n	80069f6 <_malloc_r+0x22>
 8006a88:	1b9b      	subs	r3, r3, r6
 8006a8a:	50a3      	str	r3, [r4, r2]
 8006a8c:	e7b3      	b.n	80069f6 <_malloc_r+0x22>
 8006a8e:	6862      	ldr	r2, [r4, #4]
 8006a90:	42a3      	cmp	r3, r4
 8006a92:	bf0c      	ite	eq
 8006a94:	6032      	streq	r2, [r6, #0]
 8006a96:	605a      	strne	r2, [r3, #4]
 8006a98:	e7ec      	b.n	8006a74 <_malloc_r+0xa0>
 8006a9a:	4623      	mov	r3, r4
 8006a9c:	6864      	ldr	r4, [r4, #4]
 8006a9e:	e7b2      	b.n	8006a06 <_malloc_r+0x32>
 8006aa0:	4634      	mov	r4, r6
 8006aa2:	6876      	ldr	r6, [r6, #4]
 8006aa4:	e7b9      	b.n	8006a1a <_malloc_r+0x46>
 8006aa6:	230c      	movs	r3, #12
 8006aa8:	603b      	str	r3, [r7, #0]
 8006aaa:	4638      	mov	r0, r7
 8006aac:	f000 ff76 	bl	800799c <__malloc_unlock>
 8006ab0:	e7a1      	b.n	80069f6 <_malloc_r+0x22>
 8006ab2:	6025      	str	r5, [r4, #0]
 8006ab4:	e7de      	b.n	8006a74 <_malloc_r+0xa0>
 8006ab6:	bf00      	nop
 8006ab8:	20000208 	.word	0x20000208

08006abc <__ssputs_r>:
 8006abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac0:	688e      	ldr	r6, [r1, #8]
 8006ac2:	429e      	cmp	r6, r3
 8006ac4:	4682      	mov	sl, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	4690      	mov	r8, r2
 8006aca:	461f      	mov	r7, r3
 8006acc:	d838      	bhi.n	8006b40 <__ssputs_r+0x84>
 8006ace:	898a      	ldrh	r2, [r1, #12]
 8006ad0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ad4:	d032      	beq.n	8006b3c <__ssputs_r+0x80>
 8006ad6:	6825      	ldr	r5, [r4, #0]
 8006ad8:	6909      	ldr	r1, [r1, #16]
 8006ada:	eba5 0901 	sub.w	r9, r5, r1
 8006ade:	6965      	ldr	r5, [r4, #20]
 8006ae0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ae4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ae8:	3301      	adds	r3, #1
 8006aea:	444b      	add	r3, r9
 8006aec:	106d      	asrs	r5, r5, #1
 8006aee:	429d      	cmp	r5, r3
 8006af0:	bf38      	it	cc
 8006af2:	461d      	movcc	r5, r3
 8006af4:	0553      	lsls	r3, r2, #21
 8006af6:	d531      	bpl.n	8006b5c <__ssputs_r+0xa0>
 8006af8:	4629      	mov	r1, r5
 8006afa:	f7ff ff6b 	bl	80069d4 <_malloc_r>
 8006afe:	4606      	mov	r6, r0
 8006b00:	b950      	cbnz	r0, 8006b18 <__ssputs_r+0x5c>
 8006b02:	230c      	movs	r3, #12
 8006b04:	f8ca 3000 	str.w	r3, [sl]
 8006b08:	89a3      	ldrh	r3, [r4, #12]
 8006b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b0e:	81a3      	strh	r3, [r4, #12]
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295
 8006b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b18:	6921      	ldr	r1, [r4, #16]
 8006b1a:	464a      	mov	r2, r9
 8006b1c:	f000 ff10 	bl	8007940 <memcpy>
 8006b20:	89a3      	ldrh	r3, [r4, #12]
 8006b22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2a:	81a3      	strh	r3, [r4, #12]
 8006b2c:	6126      	str	r6, [r4, #16]
 8006b2e:	6165      	str	r5, [r4, #20]
 8006b30:	444e      	add	r6, r9
 8006b32:	eba5 0509 	sub.w	r5, r5, r9
 8006b36:	6026      	str	r6, [r4, #0]
 8006b38:	60a5      	str	r5, [r4, #8]
 8006b3a:	463e      	mov	r6, r7
 8006b3c:	42be      	cmp	r6, r7
 8006b3e:	d900      	bls.n	8006b42 <__ssputs_r+0x86>
 8006b40:	463e      	mov	r6, r7
 8006b42:	6820      	ldr	r0, [r4, #0]
 8006b44:	4632      	mov	r2, r6
 8006b46:	4641      	mov	r1, r8
 8006b48:	f000 ff08 	bl	800795c <memmove>
 8006b4c:	68a3      	ldr	r3, [r4, #8]
 8006b4e:	1b9b      	subs	r3, r3, r6
 8006b50:	60a3      	str	r3, [r4, #8]
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	4433      	add	r3, r6
 8006b56:	6023      	str	r3, [r4, #0]
 8006b58:	2000      	movs	r0, #0
 8006b5a:	e7db      	b.n	8006b14 <__ssputs_r+0x58>
 8006b5c:	462a      	mov	r2, r5
 8006b5e:	f000 ff23 	bl	80079a8 <_realloc_r>
 8006b62:	4606      	mov	r6, r0
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d1e1      	bne.n	8006b2c <__ssputs_r+0x70>
 8006b68:	6921      	ldr	r1, [r4, #16]
 8006b6a:	4650      	mov	r0, sl
 8006b6c:	f7ff fec6 	bl	80068fc <_free_r>
 8006b70:	e7c7      	b.n	8006b02 <__ssputs_r+0x46>
	...

08006b74 <_svfiprintf_r>:
 8006b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b78:	4698      	mov	r8, r3
 8006b7a:	898b      	ldrh	r3, [r1, #12]
 8006b7c:	061b      	lsls	r3, r3, #24
 8006b7e:	b09d      	sub	sp, #116	; 0x74
 8006b80:	4607      	mov	r7, r0
 8006b82:	460d      	mov	r5, r1
 8006b84:	4614      	mov	r4, r2
 8006b86:	d50e      	bpl.n	8006ba6 <_svfiprintf_r+0x32>
 8006b88:	690b      	ldr	r3, [r1, #16]
 8006b8a:	b963      	cbnz	r3, 8006ba6 <_svfiprintf_r+0x32>
 8006b8c:	2140      	movs	r1, #64	; 0x40
 8006b8e:	f7ff ff21 	bl	80069d4 <_malloc_r>
 8006b92:	6028      	str	r0, [r5, #0]
 8006b94:	6128      	str	r0, [r5, #16]
 8006b96:	b920      	cbnz	r0, 8006ba2 <_svfiprintf_r+0x2e>
 8006b98:	230c      	movs	r3, #12
 8006b9a:	603b      	str	r3, [r7, #0]
 8006b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba0:	e0d1      	b.n	8006d46 <_svfiprintf_r+0x1d2>
 8006ba2:	2340      	movs	r3, #64	; 0x40
 8006ba4:	616b      	str	r3, [r5, #20]
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8006baa:	2320      	movs	r3, #32
 8006bac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bb4:	2330      	movs	r3, #48	; 0x30
 8006bb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006d60 <_svfiprintf_r+0x1ec>
 8006bba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bbe:	f04f 0901 	mov.w	r9, #1
 8006bc2:	4623      	mov	r3, r4
 8006bc4:	469a      	mov	sl, r3
 8006bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bca:	b10a      	cbz	r2, 8006bd0 <_svfiprintf_r+0x5c>
 8006bcc:	2a25      	cmp	r2, #37	; 0x25
 8006bce:	d1f9      	bne.n	8006bc4 <_svfiprintf_r+0x50>
 8006bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8006bd4:	d00b      	beq.n	8006bee <_svfiprintf_r+0x7a>
 8006bd6:	465b      	mov	r3, fp
 8006bd8:	4622      	mov	r2, r4
 8006bda:	4629      	mov	r1, r5
 8006bdc:	4638      	mov	r0, r7
 8006bde:	f7ff ff6d 	bl	8006abc <__ssputs_r>
 8006be2:	3001      	adds	r0, #1
 8006be4:	f000 80aa 	beq.w	8006d3c <_svfiprintf_r+0x1c8>
 8006be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bea:	445a      	add	r2, fp
 8006bec:	9209      	str	r2, [sp, #36]	; 0x24
 8006bee:	f89a 3000 	ldrb.w	r3, [sl]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 80a2 	beq.w	8006d3c <_svfiprintf_r+0x1c8>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c02:	f10a 0a01 	add.w	sl, sl, #1
 8006c06:	9304      	str	r3, [sp, #16]
 8006c08:	9307      	str	r3, [sp, #28]
 8006c0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c0e:	931a      	str	r3, [sp, #104]	; 0x68
 8006c10:	4654      	mov	r4, sl
 8006c12:	2205      	movs	r2, #5
 8006c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c18:	4851      	ldr	r0, [pc, #324]	; (8006d60 <_svfiprintf_r+0x1ec>)
 8006c1a:	f7f9 fb11 	bl	8000240 <memchr>
 8006c1e:	9a04      	ldr	r2, [sp, #16]
 8006c20:	b9d8      	cbnz	r0, 8006c5a <_svfiprintf_r+0xe6>
 8006c22:	06d0      	lsls	r0, r2, #27
 8006c24:	bf44      	itt	mi
 8006c26:	2320      	movmi	r3, #32
 8006c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c2c:	0711      	lsls	r1, r2, #28
 8006c2e:	bf44      	itt	mi
 8006c30:	232b      	movmi	r3, #43	; 0x2b
 8006c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c36:	f89a 3000 	ldrb.w	r3, [sl]
 8006c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c3c:	d015      	beq.n	8006c6a <_svfiprintf_r+0xf6>
 8006c3e:	9a07      	ldr	r2, [sp, #28]
 8006c40:	4654      	mov	r4, sl
 8006c42:	2000      	movs	r0, #0
 8006c44:	f04f 0c0a 	mov.w	ip, #10
 8006c48:	4621      	mov	r1, r4
 8006c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c4e:	3b30      	subs	r3, #48	; 0x30
 8006c50:	2b09      	cmp	r3, #9
 8006c52:	d94e      	bls.n	8006cf2 <_svfiprintf_r+0x17e>
 8006c54:	b1b0      	cbz	r0, 8006c84 <_svfiprintf_r+0x110>
 8006c56:	9207      	str	r2, [sp, #28]
 8006c58:	e014      	b.n	8006c84 <_svfiprintf_r+0x110>
 8006c5a:	eba0 0308 	sub.w	r3, r0, r8
 8006c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8006c62:	4313      	orrs	r3, r2
 8006c64:	9304      	str	r3, [sp, #16]
 8006c66:	46a2      	mov	sl, r4
 8006c68:	e7d2      	b.n	8006c10 <_svfiprintf_r+0x9c>
 8006c6a:	9b03      	ldr	r3, [sp, #12]
 8006c6c:	1d19      	adds	r1, r3, #4
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	9103      	str	r1, [sp, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	bfbb      	ittet	lt
 8006c76:	425b      	neglt	r3, r3
 8006c78:	f042 0202 	orrlt.w	r2, r2, #2
 8006c7c:	9307      	strge	r3, [sp, #28]
 8006c7e:	9307      	strlt	r3, [sp, #28]
 8006c80:	bfb8      	it	lt
 8006c82:	9204      	strlt	r2, [sp, #16]
 8006c84:	7823      	ldrb	r3, [r4, #0]
 8006c86:	2b2e      	cmp	r3, #46	; 0x2e
 8006c88:	d10c      	bne.n	8006ca4 <_svfiprintf_r+0x130>
 8006c8a:	7863      	ldrb	r3, [r4, #1]
 8006c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8006c8e:	d135      	bne.n	8006cfc <_svfiprintf_r+0x188>
 8006c90:	9b03      	ldr	r3, [sp, #12]
 8006c92:	1d1a      	adds	r2, r3, #4
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	9203      	str	r2, [sp, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	bfb8      	it	lt
 8006c9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ca0:	3402      	adds	r4, #2
 8006ca2:	9305      	str	r3, [sp, #20]
 8006ca4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006d70 <_svfiprintf_r+0x1fc>
 8006ca8:	7821      	ldrb	r1, [r4, #0]
 8006caa:	2203      	movs	r2, #3
 8006cac:	4650      	mov	r0, sl
 8006cae:	f7f9 fac7 	bl	8000240 <memchr>
 8006cb2:	b140      	cbz	r0, 8006cc6 <_svfiprintf_r+0x152>
 8006cb4:	2340      	movs	r3, #64	; 0x40
 8006cb6:	eba0 000a 	sub.w	r0, r0, sl
 8006cba:	fa03 f000 	lsl.w	r0, r3, r0
 8006cbe:	9b04      	ldr	r3, [sp, #16]
 8006cc0:	4303      	orrs	r3, r0
 8006cc2:	3401      	adds	r4, #1
 8006cc4:	9304      	str	r3, [sp, #16]
 8006cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cca:	4826      	ldr	r0, [pc, #152]	; (8006d64 <_svfiprintf_r+0x1f0>)
 8006ccc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cd0:	2206      	movs	r2, #6
 8006cd2:	f7f9 fab5 	bl	8000240 <memchr>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d038      	beq.n	8006d4c <_svfiprintf_r+0x1d8>
 8006cda:	4b23      	ldr	r3, [pc, #140]	; (8006d68 <_svfiprintf_r+0x1f4>)
 8006cdc:	bb1b      	cbnz	r3, 8006d26 <_svfiprintf_r+0x1b2>
 8006cde:	9b03      	ldr	r3, [sp, #12]
 8006ce0:	3307      	adds	r3, #7
 8006ce2:	f023 0307 	bic.w	r3, r3, #7
 8006ce6:	3308      	adds	r3, #8
 8006ce8:	9303      	str	r3, [sp, #12]
 8006cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cec:	4433      	add	r3, r6
 8006cee:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf0:	e767      	b.n	8006bc2 <_svfiprintf_r+0x4e>
 8006cf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	2001      	movs	r0, #1
 8006cfa:	e7a5      	b.n	8006c48 <_svfiprintf_r+0xd4>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	3401      	adds	r4, #1
 8006d00:	9305      	str	r3, [sp, #20]
 8006d02:	4619      	mov	r1, r3
 8006d04:	f04f 0c0a 	mov.w	ip, #10
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d0e:	3a30      	subs	r2, #48	; 0x30
 8006d10:	2a09      	cmp	r2, #9
 8006d12:	d903      	bls.n	8006d1c <_svfiprintf_r+0x1a8>
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0c5      	beq.n	8006ca4 <_svfiprintf_r+0x130>
 8006d18:	9105      	str	r1, [sp, #20]
 8006d1a:	e7c3      	b.n	8006ca4 <_svfiprintf_r+0x130>
 8006d1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d20:	4604      	mov	r4, r0
 8006d22:	2301      	movs	r3, #1
 8006d24:	e7f0      	b.n	8006d08 <_svfiprintf_r+0x194>
 8006d26:	ab03      	add	r3, sp, #12
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	462a      	mov	r2, r5
 8006d2c:	4b0f      	ldr	r3, [pc, #60]	; (8006d6c <_svfiprintf_r+0x1f8>)
 8006d2e:	a904      	add	r1, sp, #16
 8006d30:	4638      	mov	r0, r7
 8006d32:	f3af 8000 	nop.w
 8006d36:	1c42      	adds	r2, r0, #1
 8006d38:	4606      	mov	r6, r0
 8006d3a:	d1d6      	bne.n	8006cea <_svfiprintf_r+0x176>
 8006d3c:	89ab      	ldrh	r3, [r5, #12]
 8006d3e:	065b      	lsls	r3, r3, #25
 8006d40:	f53f af2c 	bmi.w	8006b9c <_svfiprintf_r+0x28>
 8006d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d46:	b01d      	add	sp, #116	; 0x74
 8006d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d4c:	ab03      	add	r3, sp, #12
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	462a      	mov	r2, r5
 8006d52:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <_svfiprintf_r+0x1f8>)
 8006d54:	a904      	add	r1, sp, #16
 8006d56:	4638      	mov	r0, r7
 8006d58:	f000 f9d4 	bl	8007104 <_printf_i>
 8006d5c:	e7eb      	b.n	8006d36 <_svfiprintf_r+0x1c2>
 8006d5e:	bf00      	nop
 8006d60:	08008095 	.word	0x08008095
 8006d64:	0800809f 	.word	0x0800809f
 8006d68:	00000000 	.word	0x00000000
 8006d6c:	08006abd 	.word	0x08006abd
 8006d70:	0800809b 	.word	0x0800809b

08006d74 <__sfputc_r>:
 8006d74:	6893      	ldr	r3, [r2, #8]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	b410      	push	{r4}
 8006d7c:	6093      	str	r3, [r2, #8]
 8006d7e:	da08      	bge.n	8006d92 <__sfputc_r+0x1e>
 8006d80:	6994      	ldr	r4, [r2, #24]
 8006d82:	42a3      	cmp	r3, r4
 8006d84:	db01      	blt.n	8006d8a <__sfputc_r+0x16>
 8006d86:	290a      	cmp	r1, #10
 8006d88:	d103      	bne.n	8006d92 <__sfputc_r+0x1e>
 8006d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d8e:	f000 baef 	b.w	8007370 <__swbuf_r>
 8006d92:	6813      	ldr	r3, [r2, #0]
 8006d94:	1c58      	adds	r0, r3, #1
 8006d96:	6010      	str	r0, [r2, #0]
 8006d98:	7019      	strb	r1, [r3, #0]
 8006d9a:	4608      	mov	r0, r1
 8006d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <__sfputs_r>:
 8006da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da4:	4606      	mov	r6, r0
 8006da6:	460f      	mov	r7, r1
 8006da8:	4614      	mov	r4, r2
 8006daa:	18d5      	adds	r5, r2, r3
 8006dac:	42ac      	cmp	r4, r5
 8006dae:	d101      	bne.n	8006db4 <__sfputs_r+0x12>
 8006db0:	2000      	movs	r0, #0
 8006db2:	e007      	b.n	8006dc4 <__sfputs_r+0x22>
 8006db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db8:	463a      	mov	r2, r7
 8006dba:	4630      	mov	r0, r6
 8006dbc:	f7ff ffda 	bl	8006d74 <__sfputc_r>
 8006dc0:	1c43      	adds	r3, r0, #1
 8006dc2:	d1f3      	bne.n	8006dac <__sfputs_r+0xa>
 8006dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006dc8 <_vfiprintf_r>:
 8006dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dcc:	460d      	mov	r5, r1
 8006dce:	b09d      	sub	sp, #116	; 0x74
 8006dd0:	4614      	mov	r4, r2
 8006dd2:	4698      	mov	r8, r3
 8006dd4:	4606      	mov	r6, r0
 8006dd6:	b118      	cbz	r0, 8006de0 <_vfiprintf_r+0x18>
 8006dd8:	6983      	ldr	r3, [r0, #24]
 8006dda:	b90b      	cbnz	r3, 8006de0 <_vfiprintf_r+0x18>
 8006ddc:	f000 fcaa 	bl	8007734 <__sinit>
 8006de0:	4b89      	ldr	r3, [pc, #548]	; (8007008 <_vfiprintf_r+0x240>)
 8006de2:	429d      	cmp	r5, r3
 8006de4:	d11b      	bne.n	8006e1e <_vfiprintf_r+0x56>
 8006de6:	6875      	ldr	r5, [r6, #4]
 8006de8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dea:	07d9      	lsls	r1, r3, #31
 8006dec:	d405      	bmi.n	8006dfa <_vfiprintf_r+0x32>
 8006dee:	89ab      	ldrh	r3, [r5, #12]
 8006df0:	059a      	lsls	r2, r3, #22
 8006df2:	d402      	bmi.n	8006dfa <_vfiprintf_r+0x32>
 8006df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006df6:	f000 fd3b 	bl	8007870 <__retarget_lock_acquire_recursive>
 8006dfa:	89ab      	ldrh	r3, [r5, #12]
 8006dfc:	071b      	lsls	r3, r3, #28
 8006dfe:	d501      	bpl.n	8006e04 <_vfiprintf_r+0x3c>
 8006e00:	692b      	ldr	r3, [r5, #16]
 8006e02:	b9eb      	cbnz	r3, 8006e40 <_vfiprintf_r+0x78>
 8006e04:	4629      	mov	r1, r5
 8006e06:	4630      	mov	r0, r6
 8006e08:	f000 fb04 	bl	8007414 <__swsetup_r>
 8006e0c:	b1c0      	cbz	r0, 8006e40 <_vfiprintf_r+0x78>
 8006e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e10:	07dc      	lsls	r4, r3, #31
 8006e12:	d50e      	bpl.n	8006e32 <_vfiprintf_r+0x6a>
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	b01d      	add	sp, #116	; 0x74
 8006e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e1e:	4b7b      	ldr	r3, [pc, #492]	; (800700c <_vfiprintf_r+0x244>)
 8006e20:	429d      	cmp	r5, r3
 8006e22:	d101      	bne.n	8006e28 <_vfiprintf_r+0x60>
 8006e24:	68b5      	ldr	r5, [r6, #8]
 8006e26:	e7df      	b.n	8006de8 <_vfiprintf_r+0x20>
 8006e28:	4b79      	ldr	r3, [pc, #484]	; (8007010 <_vfiprintf_r+0x248>)
 8006e2a:	429d      	cmp	r5, r3
 8006e2c:	bf08      	it	eq
 8006e2e:	68f5      	ldreq	r5, [r6, #12]
 8006e30:	e7da      	b.n	8006de8 <_vfiprintf_r+0x20>
 8006e32:	89ab      	ldrh	r3, [r5, #12]
 8006e34:	0598      	lsls	r0, r3, #22
 8006e36:	d4ed      	bmi.n	8006e14 <_vfiprintf_r+0x4c>
 8006e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e3a:	f000 fd1a 	bl	8007872 <__retarget_lock_release_recursive>
 8006e3e:	e7e9      	b.n	8006e14 <_vfiprintf_r+0x4c>
 8006e40:	2300      	movs	r3, #0
 8006e42:	9309      	str	r3, [sp, #36]	; 0x24
 8006e44:	2320      	movs	r3, #32
 8006e46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e4e:	2330      	movs	r3, #48	; 0x30
 8006e50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007014 <_vfiprintf_r+0x24c>
 8006e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e58:	f04f 0901 	mov.w	r9, #1
 8006e5c:	4623      	mov	r3, r4
 8006e5e:	469a      	mov	sl, r3
 8006e60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e64:	b10a      	cbz	r2, 8006e6a <_vfiprintf_r+0xa2>
 8006e66:	2a25      	cmp	r2, #37	; 0x25
 8006e68:	d1f9      	bne.n	8006e5e <_vfiprintf_r+0x96>
 8006e6a:	ebba 0b04 	subs.w	fp, sl, r4
 8006e6e:	d00b      	beq.n	8006e88 <_vfiprintf_r+0xc0>
 8006e70:	465b      	mov	r3, fp
 8006e72:	4622      	mov	r2, r4
 8006e74:	4629      	mov	r1, r5
 8006e76:	4630      	mov	r0, r6
 8006e78:	f7ff ff93 	bl	8006da2 <__sfputs_r>
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	f000 80aa 	beq.w	8006fd6 <_vfiprintf_r+0x20e>
 8006e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e84:	445a      	add	r2, fp
 8006e86:	9209      	str	r2, [sp, #36]	; 0x24
 8006e88:	f89a 3000 	ldrb.w	r3, [sl]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 80a2 	beq.w	8006fd6 <_vfiprintf_r+0x20e>
 8006e92:	2300      	movs	r3, #0
 8006e94:	f04f 32ff 	mov.w	r2, #4294967295
 8006e98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e9c:	f10a 0a01 	add.w	sl, sl, #1
 8006ea0:	9304      	str	r3, [sp, #16]
 8006ea2:	9307      	str	r3, [sp, #28]
 8006ea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ea8:	931a      	str	r3, [sp, #104]	; 0x68
 8006eaa:	4654      	mov	r4, sl
 8006eac:	2205      	movs	r2, #5
 8006eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eb2:	4858      	ldr	r0, [pc, #352]	; (8007014 <_vfiprintf_r+0x24c>)
 8006eb4:	f7f9 f9c4 	bl	8000240 <memchr>
 8006eb8:	9a04      	ldr	r2, [sp, #16]
 8006eba:	b9d8      	cbnz	r0, 8006ef4 <_vfiprintf_r+0x12c>
 8006ebc:	06d1      	lsls	r1, r2, #27
 8006ebe:	bf44      	itt	mi
 8006ec0:	2320      	movmi	r3, #32
 8006ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ec6:	0713      	lsls	r3, r2, #28
 8006ec8:	bf44      	itt	mi
 8006eca:	232b      	movmi	r3, #43	; 0x2b
 8006ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ed6:	d015      	beq.n	8006f04 <_vfiprintf_r+0x13c>
 8006ed8:	9a07      	ldr	r2, [sp, #28]
 8006eda:	4654      	mov	r4, sl
 8006edc:	2000      	movs	r0, #0
 8006ede:	f04f 0c0a 	mov.w	ip, #10
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ee8:	3b30      	subs	r3, #48	; 0x30
 8006eea:	2b09      	cmp	r3, #9
 8006eec:	d94e      	bls.n	8006f8c <_vfiprintf_r+0x1c4>
 8006eee:	b1b0      	cbz	r0, 8006f1e <_vfiprintf_r+0x156>
 8006ef0:	9207      	str	r2, [sp, #28]
 8006ef2:	e014      	b.n	8006f1e <_vfiprintf_r+0x156>
 8006ef4:	eba0 0308 	sub.w	r3, r0, r8
 8006ef8:	fa09 f303 	lsl.w	r3, r9, r3
 8006efc:	4313      	orrs	r3, r2
 8006efe:	9304      	str	r3, [sp, #16]
 8006f00:	46a2      	mov	sl, r4
 8006f02:	e7d2      	b.n	8006eaa <_vfiprintf_r+0xe2>
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	1d19      	adds	r1, r3, #4
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	9103      	str	r1, [sp, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	bfbb      	ittet	lt
 8006f10:	425b      	neglt	r3, r3
 8006f12:	f042 0202 	orrlt.w	r2, r2, #2
 8006f16:	9307      	strge	r3, [sp, #28]
 8006f18:	9307      	strlt	r3, [sp, #28]
 8006f1a:	bfb8      	it	lt
 8006f1c:	9204      	strlt	r2, [sp, #16]
 8006f1e:	7823      	ldrb	r3, [r4, #0]
 8006f20:	2b2e      	cmp	r3, #46	; 0x2e
 8006f22:	d10c      	bne.n	8006f3e <_vfiprintf_r+0x176>
 8006f24:	7863      	ldrb	r3, [r4, #1]
 8006f26:	2b2a      	cmp	r3, #42	; 0x2a
 8006f28:	d135      	bne.n	8006f96 <_vfiprintf_r+0x1ce>
 8006f2a:	9b03      	ldr	r3, [sp, #12]
 8006f2c:	1d1a      	adds	r2, r3, #4
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	9203      	str	r2, [sp, #12]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	bfb8      	it	lt
 8006f36:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f3a:	3402      	adds	r4, #2
 8006f3c:	9305      	str	r3, [sp, #20]
 8006f3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007024 <_vfiprintf_r+0x25c>
 8006f42:	7821      	ldrb	r1, [r4, #0]
 8006f44:	2203      	movs	r2, #3
 8006f46:	4650      	mov	r0, sl
 8006f48:	f7f9 f97a 	bl	8000240 <memchr>
 8006f4c:	b140      	cbz	r0, 8006f60 <_vfiprintf_r+0x198>
 8006f4e:	2340      	movs	r3, #64	; 0x40
 8006f50:	eba0 000a 	sub.w	r0, r0, sl
 8006f54:	fa03 f000 	lsl.w	r0, r3, r0
 8006f58:	9b04      	ldr	r3, [sp, #16]
 8006f5a:	4303      	orrs	r3, r0
 8006f5c:	3401      	adds	r4, #1
 8006f5e:	9304      	str	r3, [sp, #16]
 8006f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f64:	482c      	ldr	r0, [pc, #176]	; (8007018 <_vfiprintf_r+0x250>)
 8006f66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f6a:	2206      	movs	r2, #6
 8006f6c:	f7f9 f968 	bl	8000240 <memchr>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	d03f      	beq.n	8006ff4 <_vfiprintf_r+0x22c>
 8006f74:	4b29      	ldr	r3, [pc, #164]	; (800701c <_vfiprintf_r+0x254>)
 8006f76:	bb1b      	cbnz	r3, 8006fc0 <_vfiprintf_r+0x1f8>
 8006f78:	9b03      	ldr	r3, [sp, #12]
 8006f7a:	3307      	adds	r3, #7
 8006f7c:	f023 0307 	bic.w	r3, r3, #7
 8006f80:	3308      	adds	r3, #8
 8006f82:	9303      	str	r3, [sp, #12]
 8006f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f86:	443b      	add	r3, r7
 8006f88:	9309      	str	r3, [sp, #36]	; 0x24
 8006f8a:	e767      	b.n	8006e5c <_vfiprintf_r+0x94>
 8006f8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f90:	460c      	mov	r4, r1
 8006f92:	2001      	movs	r0, #1
 8006f94:	e7a5      	b.n	8006ee2 <_vfiprintf_r+0x11a>
 8006f96:	2300      	movs	r3, #0
 8006f98:	3401      	adds	r4, #1
 8006f9a:	9305      	str	r3, [sp, #20]
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	f04f 0c0a 	mov.w	ip, #10
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fa8:	3a30      	subs	r2, #48	; 0x30
 8006faa:	2a09      	cmp	r2, #9
 8006fac:	d903      	bls.n	8006fb6 <_vfiprintf_r+0x1ee>
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0c5      	beq.n	8006f3e <_vfiprintf_r+0x176>
 8006fb2:	9105      	str	r1, [sp, #20]
 8006fb4:	e7c3      	b.n	8006f3e <_vfiprintf_r+0x176>
 8006fb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fba:	4604      	mov	r4, r0
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e7f0      	b.n	8006fa2 <_vfiprintf_r+0x1da>
 8006fc0:	ab03      	add	r3, sp, #12
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	462a      	mov	r2, r5
 8006fc6:	4b16      	ldr	r3, [pc, #88]	; (8007020 <_vfiprintf_r+0x258>)
 8006fc8:	a904      	add	r1, sp, #16
 8006fca:	4630      	mov	r0, r6
 8006fcc:	f3af 8000 	nop.w
 8006fd0:	4607      	mov	r7, r0
 8006fd2:	1c78      	adds	r0, r7, #1
 8006fd4:	d1d6      	bne.n	8006f84 <_vfiprintf_r+0x1bc>
 8006fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fd8:	07d9      	lsls	r1, r3, #31
 8006fda:	d405      	bmi.n	8006fe8 <_vfiprintf_r+0x220>
 8006fdc:	89ab      	ldrh	r3, [r5, #12]
 8006fde:	059a      	lsls	r2, r3, #22
 8006fe0:	d402      	bmi.n	8006fe8 <_vfiprintf_r+0x220>
 8006fe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fe4:	f000 fc45 	bl	8007872 <__retarget_lock_release_recursive>
 8006fe8:	89ab      	ldrh	r3, [r5, #12]
 8006fea:	065b      	lsls	r3, r3, #25
 8006fec:	f53f af12 	bmi.w	8006e14 <_vfiprintf_r+0x4c>
 8006ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ff2:	e711      	b.n	8006e18 <_vfiprintf_r+0x50>
 8006ff4:	ab03      	add	r3, sp, #12
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	462a      	mov	r2, r5
 8006ffa:	4b09      	ldr	r3, [pc, #36]	; (8007020 <_vfiprintf_r+0x258>)
 8006ffc:	a904      	add	r1, sp, #16
 8006ffe:	4630      	mov	r0, r6
 8007000:	f000 f880 	bl	8007104 <_printf_i>
 8007004:	e7e4      	b.n	8006fd0 <_vfiprintf_r+0x208>
 8007006:	bf00      	nop
 8007008:	080080e8 	.word	0x080080e8
 800700c:	08008108 	.word	0x08008108
 8007010:	080080c8 	.word	0x080080c8
 8007014:	08008095 	.word	0x08008095
 8007018:	0800809f 	.word	0x0800809f
 800701c:	00000000 	.word	0x00000000
 8007020:	08006da3 	.word	0x08006da3
 8007024:	0800809b 	.word	0x0800809b

08007028 <_printf_common>:
 8007028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800702c:	4616      	mov	r6, r2
 800702e:	4699      	mov	r9, r3
 8007030:	688a      	ldr	r2, [r1, #8]
 8007032:	690b      	ldr	r3, [r1, #16]
 8007034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007038:	4293      	cmp	r3, r2
 800703a:	bfb8      	it	lt
 800703c:	4613      	movlt	r3, r2
 800703e:	6033      	str	r3, [r6, #0]
 8007040:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007044:	4607      	mov	r7, r0
 8007046:	460c      	mov	r4, r1
 8007048:	b10a      	cbz	r2, 800704e <_printf_common+0x26>
 800704a:	3301      	adds	r3, #1
 800704c:	6033      	str	r3, [r6, #0]
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	0699      	lsls	r1, r3, #26
 8007052:	bf42      	ittt	mi
 8007054:	6833      	ldrmi	r3, [r6, #0]
 8007056:	3302      	addmi	r3, #2
 8007058:	6033      	strmi	r3, [r6, #0]
 800705a:	6825      	ldr	r5, [r4, #0]
 800705c:	f015 0506 	ands.w	r5, r5, #6
 8007060:	d106      	bne.n	8007070 <_printf_common+0x48>
 8007062:	f104 0a19 	add.w	sl, r4, #25
 8007066:	68e3      	ldr	r3, [r4, #12]
 8007068:	6832      	ldr	r2, [r6, #0]
 800706a:	1a9b      	subs	r3, r3, r2
 800706c:	42ab      	cmp	r3, r5
 800706e:	dc26      	bgt.n	80070be <_printf_common+0x96>
 8007070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007074:	1e13      	subs	r3, r2, #0
 8007076:	6822      	ldr	r2, [r4, #0]
 8007078:	bf18      	it	ne
 800707a:	2301      	movne	r3, #1
 800707c:	0692      	lsls	r2, r2, #26
 800707e:	d42b      	bmi.n	80070d8 <_printf_common+0xb0>
 8007080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007084:	4649      	mov	r1, r9
 8007086:	4638      	mov	r0, r7
 8007088:	47c0      	blx	r8
 800708a:	3001      	adds	r0, #1
 800708c:	d01e      	beq.n	80070cc <_printf_common+0xa4>
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	68e5      	ldr	r5, [r4, #12]
 8007092:	6832      	ldr	r2, [r6, #0]
 8007094:	f003 0306 	and.w	r3, r3, #6
 8007098:	2b04      	cmp	r3, #4
 800709a:	bf08      	it	eq
 800709c:	1aad      	subeq	r5, r5, r2
 800709e:	68a3      	ldr	r3, [r4, #8]
 80070a0:	6922      	ldr	r2, [r4, #16]
 80070a2:	bf0c      	ite	eq
 80070a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070a8:	2500      	movne	r5, #0
 80070aa:	4293      	cmp	r3, r2
 80070ac:	bfc4      	itt	gt
 80070ae:	1a9b      	subgt	r3, r3, r2
 80070b0:	18ed      	addgt	r5, r5, r3
 80070b2:	2600      	movs	r6, #0
 80070b4:	341a      	adds	r4, #26
 80070b6:	42b5      	cmp	r5, r6
 80070b8:	d11a      	bne.n	80070f0 <_printf_common+0xc8>
 80070ba:	2000      	movs	r0, #0
 80070bc:	e008      	b.n	80070d0 <_printf_common+0xa8>
 80070be:	2301      	movs	r3, #1
 80070c0:	4652      	mov	r2, sl
 80070c2:	4649      	mov	r1, r9
 80070c4:	4638      	mov	r0, r7
 80070c6:	47c0      	blx	r8
 80070c8:	3001      	adds	r0, #1
 80070ca:	d103      	bne.n	80070d4 <_printf_common+0xac>
 80070cc:	f04f 30ff 	mov.w	r0, #4294967295
 80070d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d4:	3501      	adds	r5, #1
 80070d6:	e7c6      	b.n	8007066 <_printf_common+0x3e>
 80070d8:	18e1      	adds	r1, r4, r3
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	2030      	movs	r0, #48	; 0x30
 80070de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070e2:	4422      	add	r2, r4
 80070e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070ec:	3302      	adds	r3, #2
 80070ee:	e7c7      	b.n	8007080 <_printf_common+0x58>
 80070f0:	2301      	movs	r3, #1
 80070f2:	4622      	mov	r2, r4
 80070f4:	4649      	mov	r1, r9
 80070f6:	4638      	mov	r0, r7
 80070f8:	47c0      	blx	r8
 80070fa:	3001      	adds	r0, #1
 80070fc:	d0e6      	beq.n	80070cc <_printf_common+0xa4>
 80070fe:	3601      	adds	r6, #1
 8007100:	e7d9      	b.n	80070b6 <_printf_common+0x8e>
	...

08007104 <_printf_i>:
 8007104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007108:	7e0f      	ldrb	r7, [r1, #24]
 800710a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800710c:	2f78      	cmp	r7, #120	; 0x78
 800710e:	4691      	mov	r9, r2
 8007110:	4680      	mov	r8, r0
 8007112:	460c      	mov	r4, r1
 8007114:	469a      	mov	sl, r3
 8007116:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800711a:	d807      	bhi.n	800712c <_printf_i+0x28>
 800711c:	2f62      	cmp	r7, #98	; 0x62
 800711e:	d80a      	bhi.n	8007136 <_printf_i+0x32>
 8007120:	2f00      	cmp	r7, #0
 8007122:	f000 80d8 	beq.w	80072d6 <_printf_i+0x1d2>
 8007126:	2f58      	cmp	r7, #88	; 0x58
 8007128:	f000 80a3 	beq.w	8007272 <_printf_i+0x16e>
 800712c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007134:	e03a      	b.n	80071ac <_printf_i+0xa8>
 8007136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800713a:	2b15      	cmp	r3, #21
 800713c:	d8f6      	bhi.n	800712c <_printf_i+0x28>
 800713e:	a101      	add	r1, pc, #4	; (adr r1, 8007144 <_printf_i+0x40>)
 8007140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007144:	0800719d 	.word	0x0800719d
 8007148:	080071b1 	.word	0x080071b1
 800714c:	0800712d 	.word	0x0800712d
 8007150:	0800712d 	.word	0x0800712d
 8007154:	0800712d 	.word	0x0800712d
 8007158:	0800712d 	.word	0x0800712d
 800715c:	080071b1 	.word	0x080071b1
 8007160:	0800712d 	.word	0x0800712d
 8007164:	0800712d 	.word	0x0800712d
 8007168:	0800712d 	.word	0x0800712d
 800716c:	0800712d 	.word	0x0800712d
 8007170:	080072bd 	.word	0x080072bd
 8007174:	080071e1 	.word	0x080071e1
 8007178:	0800729f 	.word	0x0800729f
 800717c:	0800712d 	.word	0x0800712d
 8007180:	0800712d 	.word	0x0800712d
 8007184:	080072df 	.word	0x080072df
 8007188:	0800712d 	.word	0x0800712d
 800718c:	080071e1 	.word	0x080071e1
 8007190:	0800712d 	.word	0x0800712d
 8007194:	0800712d 	.word	0x0800712d
 8007198:	080072a7 	.word	0x080072a7
 800719c:	682b      	ldr	r3, [r5, #0]
 800719e:	1d1a      	adds	r2, r3, #4
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	602a      	str	r2, [r5, #0]
 80071a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071ac:	2301      	movs	r3, #1
 80071ae:	e0a3      	b.n	80072f8 <_printf_i+0x1f4>
 80071b0:	6820      	ldr	r0, [r4, #0]
 80071b2:	6829      	ldr	r1, [r5, #0]
 80071b4:	0606      	lsls	r6, r0, #24
 80071b6:	f101 0304 	add.w	r3, r1, #4
 80071ba:	d50a      	bpl.n	80071d2 <_printf_i+0xce>
 80071bc:	680e      	ldr	r6, [r1, #0]
 80071be:	602b      	str	r3, [r5, #0]
 80071c0:	2e00      	cmp	r6, #0
 80071c2:	da03      	bge.n	80071cc <_printf_i+0xc8>
 80071c4:	232d      	movs	r3, #45	; 0x2d
 80071c6:	4276      	negs	r6, r6
 80071c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071cc:	485e      	ldr	r0, [pc, #376]	; (8007348 <_printf_i+0x244>)
 80071ce:	230a      	movs	r3, #10
 80071d0:	e019      	b.n	8007206 <_printf_i+0x102>
 80071d2:	680e      	ldr	r6, [r1, #0]
 80071d4:	602b      	str	r3, [r5, #0]
 80071d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071da:	bf18      	it	ne
 80071dc:	b236      	sxthne	r6, r6
 80071de:	e7ef      	b.n	80071c0 <_printf_i+0xbc>
 80071e0:	682b      	ldr	r3, [r5, #0]
 80071e2:	6820      	ldr	r0, [r4, #0]
 80071e4:	1d19      	adds	r1, r3, #4
 80071e6:	6029      	str	r1, [r5, #0]
 80071e8:	0601      	lsls	r1, r0, #24
 80071ea:	d501      	bpl.n	80071f0 <_printf_i+0xec>
 80071ec:	681e      	ldr	r6, [r3, #0]
 80071ee:	e002      	b.n	80071f6 <_printf_i+0xf2>
 80071f0:	0646      	lsls	r6, r0, #25
 80071f2:	d5fb      	bpl.n	80071ec <_printf_i+0xe8>
 80071f4:	881e      	ldrh	r6, [r3, #0]
 80071f6:	4854      	ldr	r0, [pc, #336]	; (8007348 <_printf_i+0x244>)
 80071f8:	2f6f      	cmp	r7, #111	; 0x6f
 80071fa:	bf0c      	ite	eq
 80071fc:	2308      	moveq	r3, #8
 80071fe:	230a      	movne	r3, #10
 8007200:	2100      	movs	r1, #0
 8007202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007206:	6865      	ldr	r5, [r4, #4]
 8007208:	60a5      	str	r5, [r4, #8]
 800720a:	2d00      	cmp	r5, #0
 800720c:	bfa2      	ittt	ge
 800720e:	6821      	ldrge	r1, [r4, #0]
 8007210:	f021 0104 	bicge.w	r1, r1, #4
 8007214:	6021      	strge	r1, [r4, #0]
 8007216:	b90e      	cbnz	r6, 800721c <_printf_i+0x118>
 8007218:	2d00      	cmp	r5, #0
 800721a:	d04d      	beq.n	80072b8 <_printf_i+0x1b4>
 800721c:	4615      	mov	r5, r2
 800721e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007222:	fb03 6711 	mls	r7, r3, r1, r6
 8007226:	5dc7      	ldrb	r7, [r0, r7]
 8007228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800722c:	4637      	mov	r7, r6
 800722e:	42bb      	cmp	r3, r7
 8007230:	460e      	mov	r6, r1
 8007232:	d9f4      	bls.n	800721e <_printf_i+0x11a>
 8007234:	2b08      	cmp	r3, #8
 8007236:	d10b      	bne.n	8007250 <_printf_i+0x14c>
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	07de      	lsls	r6, r3, #31
 800723c:	d508      	bpl.n	8007250 <_printf_i+0x14c>
 800723e:	6923      	ldr	r3, [r4, #16]
 8007240:	6861      	ldr	r1, [r4, #4]
 8007242:	4299      	cmp	r1, r3
 8007244:	bfde      	ittt	le
 8007246:	2330      	movle	r3, #48	; 0x30
 8007248:	f805 3c01 	strble.w	r3, [r5, #-1]
 800724c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007250:	1b52      	subs	r2, r2, r5
 8007252:	6122      	str	r2, [r4, #16]
 8007254:	f8cd a000 	str.w	sl, [sp]
 8007258:	464b      	mov	r3, r9
 800725a:	aa03      	add	r2, sp, #12
 800725c:	4621      	mov	r1, r4
 800725e:	4640      	mov	r0, r8
 8007260:	f7ff fee2 	bl	8007028 <_printf_common>
 8007264:	3001      	adds	r0, #1
 8007266:	d14c      	bne.n	8007302 <_printf_i+0x1fe>
 8007268:	f04f 30ff 	mov.w	r0, #4294967295
 800726c:	b004      	add	sp, #16
 800726e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007272:	4835      	ldr	r0, [pc, #212]	; (8007348 <_printf_i+0x244>)
 8007274:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007278:	6829      	ldr	r1, [r5, #0]
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007280:	6029      	str	r1, [r5, #0]
 8007282:	061d      	lsls	r5, r3, #24
 8007284:	d514      	bpl.n	80072b0 <_printf_i+0x1ac>
 8007286:	07df      	lsls	r7, r3, #31
 8007288:	bf44      	itt	mi
 800728a:	f043 0320 	orrmi.w	r3, r3, #32
 800728e:	6023      	strmi	r3, [r4, #0]
 8007290:	b91e      	cbnz	r6, 800729a <_printf_i+0x196>
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	f023 0320 	bic.w	r3, r3, #32
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	2310      	movs	r3, #16
 800729c:	e7b0      	b.n	8007200 <_printf_i+0xfc>
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	f043 0320 	orr.w	r3, r3, #32
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	2378      	movs	r3, #120	; 0x78
 80072a8:	4828      	ldr	r0, [pc, #160]	; (800734c <_printf_i+0x248>)
 80072aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072ae:	e7e3      	b.n	8007278 <_printf_i+0x174>
 80072b0:	0659      	lsls	r1, r3, #25
 80072b2:	bf48      	it	mi
 80072b4:	b2b6      	uxthmi	r6, r6
 80072b6:	e7e6      	b.n	8007286 <_printf_i+0x182>
 80072b8:	4615      	mov	r5, r2
 80072ba:	e7bb      	b.n	8007234 <_printf_i+0x130>
 80072bc:	682b      	ldr	r3, [r5, #0]
 80072be:	6826      	ldr	r6, [r4, #0]
 80072c0:	6961      	ldr	r1, [r4, #20]
 80072c2:	1d18      	adds	r0, r3, #4
 80072c4:	6028      	str	r0, [r5, #0]
 80072c6:	0635      	lsls	r5, r6, #24
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	d501      	bpl.n	80072d0 <_printf_i+0x1cc>
 80072cc:	6019      	str	r1, [r3, #0]
 80072ce:	e002      	b.n	80072d6 <_printf_i+0x1d2>
 80072d0:	0670      	lsls	r0, r6, #25
 80072d2:	d5fb      	bpl.n	80072cc <_printf_i+0x1c8>
 80072d4:	8019      	strh	r1, [r3, #0]
 80072d6:	2300      	movs	r3, #0
 80072d8:	6123      	str	r3, [r4, #16]
 80072da:	4615      	mov	r5, r2
 80072dc:	e7ba      	b.n	8007254 <_printf_i+0x150>
 80072de:	682b      	ldr	r3, [r5, #0]
 80072e0:	1d1a      	adds	r2, r3, #4
 80072e2:	602a      	str	r2, [r5, #0]
 80072e4:	681d      	ldr	r5, [r3, #0]
 80072e6:	6862      	ldr	r2, [r4, #4]
 80072e8:	2100      	movs	r1, #0
 80072ea:	4628      	mov	r0, r5
 80072ec:	f7f8 ffa8 	bl	8000240 <memchr>
 80072f0:	b108      	cbz	r0, 80072f6 <_printf_i+0x1f2>
 80072f2:	1b40      	subs	r0, r0, r5
 80072f4:	6060      	str	r0, [r4, #4]
 80072f6:	6863      	ldr	r3, [r4, #4]
 80072f8:	6123      	str	r3, [r4, #16]
 80072fa:	2300      	movs	r3, #0
 80072fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007300:	e7a8      	b.n	8007254 <_printf_i+0x150>
 8007302:	6923      	ldr	r3, [r4, #16]
 8007304:	462a      	mov	r2, r5
 8007306:	4649      	mov	r1, r9
 8007308:	4640      	mov	r0, r8
 800730a:	47d0      	blx	sl
 800730c:	3001      	adds	r0, #1
 800730e:	d0ab      	beq.n	8007268 <_printf_i+0x164>
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	079b      	lsls	r3, r3, #30
 8007314:	d413      	bmi.n	800733e <_printf_i+0x23a>
 8007316:	68e0      	ldr	r0, [r4, #12]
 8007318:	9b03      	ldr	r3, [sp, #12]
 800731a:	4298      	cmp	r0, r3
 800731c:	bfb8      	it	lt
 800731e:	4618      	movlt	r0, r3
 8007320:	e7a4      	b.n	800726c <_printf_i+0x168>
 8007322:	2301      	movs	r3, #1
 8007324:	4632      	mov	r2, r6
 8007326:	4649      	mov	r1, r9
 8007328:	4640      	mov	r0, r8
 800732a:	47d0      	blx	sl
 800732c:	3001      	adds	r0, #1
 800732e:	d09b      	beq.n	8007268 <_printf_i+0x164>
 8007330:	3501      	adds	r5, #1
 8007332:	68e3      	ldr	r3, [r4, #12]
 8007334:	9903      	ldr	r1, [sp, #12]
 8007336:	1a5b      	subs	r3, r3, r1
 8007338:	42ab      	cmp	r3, r5
 800733a:	dcf2      	bgt.n	8007322 <_printf_i+0x21e>
 800733c:	e7eb      	b.n	8007316 <_printf_i+0x212>
 800733e:	2500      	movs	r5, #0
 8007340:	f104 0619 	add.w	r6, r4, #25
 8007344:	e7f5      	b.n	8007332 <_printf_i+0x22e>
 8007346:	bf00      	nop
 8007348:	080080a6 	.word	0x080080a6
 800734c:	080080b7 	.word	0x080080b7

08007350 <_sbrk_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	4d06      	ldr	r5, [pc, #24]	; (800736c <_sbrk_r+0x1c>)
 8007354:	2300      	movs	r3, #0
 8007356:	4604      	mov	r4, r0
 8007358:	4608      	mov	r0, r1
 800735a:	602b      	str	r3, [r5, #0]
 800735c:	f7f9 fd80 	bl	8000e60 <_sbrk>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	d102      	bne.n	800736a <_sbrk_r+0x1a>
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	b103      	cbz	r3, 800736a <_sbrk_r+0x1a>
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	20000214 	.word	0x20000214

08007370 <__swbuf_r>:
 8007370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007372:	460e      	mov	r6, r1
 8007374:	4614      	mov	r4, r2
 8007376:	4605      	mov	r5, r0
 8007378:	b118      	cbz	r0, 8007382 <__swbuf_r+0x12>
 800737a:	6983      	ldr	r3, [r0, #24]
 800737c:	b90b      	cbnz	r3, 8007382 <__swbuf_r+0x12>
 800737e:	f000 f9d9 	bl	8007734 <__sinit>
 8007382:	4b21      	ldr	r3, [pc, #132]	; (8007408 <__swbuf_r+0x98>)
 8007384:	429c      	cmp	r4, r3
 8007386:	d12b      	bne.n	80073e0 <__swbuf_r+0x70>
 8007388:	686c      	ldr	r4, [r5, #4]
 800738a:	69a3      	ldr	r3, [r4, #24]
 800738c:	60a3      	str	r3, [r4, #8]
 800738e:	89a3      	ldrh	r3, [r4, #12]
 8007390:	071a      	lsls	r2, r3, #28
 8007392:	d52f      	bpl.n	80073f4 <__swbuf_r+0x84>
 8007394:	6923      	ldr	r3, [r4, #16]
 8007396:	b36b      	cbz	r3, 80073f4 <__swbuf_r+0x84>
 8007398:	6923      	ldr	r3, [r4, #16]
 800739a:	6820      	ldr	r0, [r4, #0]
 800739c:	1ac0      	subs	r0, r0, r3
 800739e:	6963      	ldr	r3, [r4, #20]
 80073a0:	b2f6      	uxtb	r6, r6
 80073a2:	4283      	cmp	r3, r0
 80073a4:	4637      	mov	r7, r6
 80073a6:	dc04      	bgt.n	80073b2 <__swbuf_r+0x42>
 80073a8:	4621      	mov	r1, r4
 80073aa:	4628      	mov	r0, r5
 80073ac:	f000 f92e 	bl	800760c <_fflush_r>
 80073b0:	bb30      	cbnz	r0, 8007400 <__swbuf_r+0x90>
 80073b2:	68a3      	ldr	r3, [r4, #8]
 80073b4:	3b01      	subs	r3, #1
 80073b6:	60a3      	str	r3, [r4, #8]
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	6022      	str	r2, [r4, #0]
 80073be:	701e      	strb	r6, [r3, #0]
 80073c0:	6963      	ldr	r3, [r4, #20]
 80073c2:	3001      	adds	r0, #1
 80073c4:	4283      	cmp	r3, r0
 80073c6:	d004      	beq.n	80073d2 <__swbuf_r+0x62>
 80073c8:	89a3      	ldrh	r3, [r4, #12]
 80073ca:	07db      	lsls	r3, r3, #31
 80073cc:	d506      	bpl.n	80073dc <__swbuf_r+0x6c>
 80073ce:	2e0a      	cmp	r6, #10
 80073d0:	d104      	bne.n	80073dc <__swbuf_r+0x6c>
 80073d2:	4621      	mov	r1, r4
 80073d4:	4628      	mov	r0, r5
 80073d6:	f000 f919 	bl	800760c <_fflush_r>
 80073da:	b988      	cbnz	r0, 8007400 <__swbuf_r+0x90>
 80073dc:	4638      	mov	r0, r7
 80073de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073e0:	4b0a      	ldr	r3, [pc, #40]	; (800740c <__swbuf_r+0x9c>)
 80073e2:	429c      	cmp	r4, r3
 80073e4:	d101      	bne.n	80073ea <__swbuf_r+0x7a>
 80073e6:	68ac      	ldr	r4, [r5, #8]
 80073e8:	e7cf      	b.n	800738a <__swbuf_r+0x1a>
 80073ea:	4b09      	ldr	r3, [pc, #36]	; (8007410 <__swbuf_r+0xa0>)
 80073ec:	429c      	cmp	r4, r3
 80073ee:	bf08      	it	eq
 80073f0:	68ec      	ldreq	r4, [r5, #12]
 80073f2:	e7ca      	b.n	800738a <__swbuf_r+0x1a>
 80073f4:	4621      	mov	r1, r4
 80073f6:	4628      	mov	r0, r5
 80073f8:	f000 f80c 	bl	8007414 <__swsetup_r>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d0cb      	beq.n	8007398 <__swbuf_r+0x28>
 8007400:	f04f 37ff 	mov.w	r7, #4294967295
 8007404:	e7ea      	b.n	80073dc <__swbuf_r+0x6c>
 8007406:	bf00      	nop
 8007408:	080080e8 	.word	0x080080e8
 800740c:	08008108 	.word	0x08008108
 8007410:	080080c8 	.word	0x080080c8

08007414 <__swsetup_r>:
 8007414:	4b32      	ldr	r3, [pc, #200]	; (80074e0 <__swsetup_r+0xcc>)
 8007416:	b570      	push	{r4, r5, r6, lr}
 8007418:	681d      	ldr	r5, [r3, #0]
 800741a:	4606      	mov	r6, r0
 800741c:	460c      	mov	r4, r1
 800741e:	b125      	cbz	r5, 800742a <__swsetup_r+0x16>
 8007420:	69ab      	ldr	r3, [r5, #24]
 8007422:	b913      	cbnz	r3, 800742a <__swsetup_r+0x16>
 8007424:	4628      	mov	r0, r5
 8007426:	f000 f985 	bl	8007734 <__sinit>
 800742a:	4b2e      	ldr	r3, [pc, #184]	; (80074e4 <__swsetup_r+0xd0>)
 800742c:	429c      	cmp	r4, r3
 800742e:	d10f      	bne.n	8007450 <__swsetup_r+0x3c>
 8007430:	686c      	ldr	r4, [r5, #4]
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007438:	0719      	lsls	r1, r3, #28
 800743a:	d42c      	bmi.n	8007496 <__swsetup_r+0x82>
 800743c:	06dd      	lsls	r5, r3, #27
 800743e:	d411      	bmi.n	8007464 <__swsetup_r+0x50>
 8007440:	2309      	movs	r3, #9
 8007442:	6033      	str	r3, [r6, #0]
 8007444:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007448:	81a3      	strh	r3, [r4, #12]
 800744a:	f04f 30ff 	mov.w	r0, #4294967295
 800744e:	e03e      	b.n	80074ce <__swsetup_r+0xba>
 8007450:	4b25      	ldr	r3, [pc, #148]	; (80074e8 <__swsetup_r+0xd4>)
 8007452:	429c      	cmp	r4, r3
 8007454:	d101      	bne.n	800745a <__swsetup_r+0x46>
 8007456:	68ac      	ldr	r4, [r5, #8]
 8007458:	e7eb      	b.n	8007432 <__swsetup_r+0x1e>
 800745a:	4b24      	ldr	r3, [pc, #144]	; (80074ec <__swsetup_r+0xd8>)
 800745c:	429c      	cmp	r4, r3
 800745e:	bf08      	it	eq
 8007460:	68ec      	ldreq	r4, [r5, #12]
 8007462:	e7e6      	b.n	8007432 <__swsetup_r+0x1e>
 8007464:	0758      	lsls	r0, r3, #29
 8007466:	d512      	bpl.n	800748e <__swsetup_r+0x7a>
 8007468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800746a:	b141      	cbz	r1, 800747e <__swsetup_r+0x6a>
 800746c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007470:	4299      	cmp	r1, r3
 8007472:	d002      	beq.n	800747a <__swsetup_r+0x66>
 8007474:	4630      	mov	r0, r6
 8007476:	f7ff fa41 	bl	80068fc <_free_r>
 800747a:	2300      	movs	r3, #0
 800747c:	6363      	str	r3, [r4, #52]	; 0x34
 800747e:	89a3      	ldrh	r3, [r4, #12]
 8007480:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007484:	81a3      	strh	r3, [r4, #12]
 8007486:	2300      	movs	r3, #0
 8007488:	6063      	str	r3, [r4, #4]
 800748a:	6923      	ldr	r3, [r4, #16]
 800748c:	6023      	str	r3, [r4, #0]
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	f043 0308 	orr.w	r3, r3, #8
 8007494:	81a3      	strh	r3, [r4, #12]
 8007496:	6923      	ldr	r3, [r4, #16]
 8007498:	b94b      	cbnz	r3, 80074ae <__swsetup_r+0x9a>
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074a4:	d003      	beq.n	80074ae <__swsetup_r+0x9a>
 80074a6:	4621      	mov	r1, r4
 80074a8:	4630      	mov	r0, r6
 80074aa:	f000 fa09 	bl	80078c0 <__smakebuf_r>
 80074ae:	89a0      	ldrh	r0, [r4, #12]
 80074b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074b4:	f010 0301 	ands.w	r3, r0, #1
 80074b8:	d00a      	beq.n	80074d0 <__swsetup_r+0xbc>
 80074ba:	2300      	movs	r3, #0
 80074bc:	60a3      	str	r3, [r4, #8]
 80074be:	6963      	ldr	r3, [r4, #20]
 80074c0:	425b      	negs	r3, r3
 80074c2:	61a3      	str	r3, [r4, #24]
 80074c4:	6923      	ldr	r3, [r4, #16]
 80074c6:	b943      	cbnz	r3, 80074da <__swsetup_r+0xc6>
 80074c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074cc:	d1ba      	bne.n	8007444 <__swsetup_r+0x30>
 80074ce:	bd70      	pop	{r4, r5, r6, pc}
 80074d0:	0781      	lsls	r1, r0, #30
 80074d2:	bf58      	it	pl
 80074d4:	6963      	ldrpl	r3, [r4, #20]
 80074d6:	60a3      	str	r3, [r4, #8]
 80074d8:	e7f4      	b.n	80074c4 <__swsetup_r+0xb0>
 80074da:	2000      	movs	r0, #0
 80074dc:	e7f7      	b.n	80074ce <__swsetup_r+0xba>
 80074de:	bf00      	nop
 80074e0:	20000010 	.word	0x20000010
 80074e4:	080080e8 	.word	0x080080e8
 80074e8:	08008108 	.word	0x08008108
 80074ec:	080080c8 	.word	0x080080c8

080074f0 <abort>:
 80074f0:	b508      	push	{r3, lr}
 80074f2:	2006      	movs	r0, #6
 80074f4:	f000 fab0 	bl	8007a58 <raise>
 80074f8:	2001      	movs	r0, #1
 80074fa:	f7f9 fc39 	bl	8000d70 <_exit>
	...

08007500 <__sflush_r>:
 8007500:	898a      	ldrh	r2, [r1, #12]
 8007502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007506:	4605      	mov	r5, r0
 8007508:	0710      	lsls	r0, r2, #28
 800750a:	460c      	mov	r4, r1
 800750c:	d458      	bmi.n	80075c0 <__sflush_r+0xc0>
 800750e:	684b      	ldr	r3, [r1, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	dc05      	bgt.n	8007520 <__sflush_r+0x20>
 8007514:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007516:	2b00      	cmp	r3, #0
 8007518:	dc02      	bgt.n	8007520 <__sflush_r+0x20>
 800751a:	2000      	movs	r0, #0
 800751c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007520:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007522:	2e00      	cmp	r6, #0
 8007524:	d0f9      	beq.n	800751a <__sflush_r+0x1a>
 8007526:	2300      	movs	r3, #0
 8007528:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800752c:	682f      	ldr	r7, [r5, #0]
 800752e:	602b      	str	r3, [r5, #0]
 8007530:	d032      	beq.n	8007598 <__sflush_r+0x98>
 8007532:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007534:	89a3      	ldrh	r3, [r4, #12]
 8007536:	075a      	lsls	r2, r3, #29
 8007538:	d505      	bpl.n	8007546 <__sflush_r+0x46>
 800753a:	6863      	ldr	r3, [r4, #4]
 800753c:	1ac0      	subs	r0, r0, r3
 800753e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007540:	b10b      	cbz	r3, 8007546 <__sflush_r+0x46>
 8007542:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007544:	1ac0      	subs	r0, r0, r3
 8007546:	2300      	movs	r3, #0
 8007548:	4602      	mov	r2, r0
 800754a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800754c:	6a21      	ldr	r1, [r4, #32]
 800754e:	4628      	mov	r0, r5
 8007550:	47b0      	blx	r6
 8007552:	1c43      	adds	r3, r0, #1
 8007554:	89a3      	ldrh	r3, [r4, #12]
 8007556:	d106      	bne.n	8007566 <__sflush_r+0x66>
 8007558:	6829      	ldr	r1, [r5, #0]
 800755a:	291d      	cmp	r1, #29
 800755c:	d82c      	bhi.n	80075b8 <__sflush_r+0xb8>
 800755e:	4a2a      	ldr	r2, [pc, #168]	; (8007608 <__sflush_r+0x108>)
 8007560:	40ca      	lsrs	r2, r1
 8007562:	07d6      	lsls	r6, r2, #31
 8007564:	d528      	bpl.n	80075b8 <__sflush_r+0xb8>
 8007566:	2200      	movs	r2, #0
 8007568:	6062      	str	r2, [r4, #4]
 800756a:	04d9      	lsls	r1, r3, #19
 800756c:	6922      	ldr	r2, [r4, #16]
 800756e:	6022      	str	r2, [r4, #0]
 8007570:	d504      	bpl.n	800757c <__sflush_r+0x7c>
 8007572:	1c42      	adds	r2, r0, #1
 8007574:	d101      	bne.n	800757a <__sflush_r+0x7a>
 8007576:	682b      	ldr	r3, [r5, #0]
 8007578:	b903      	cbnz	r3, 800757c <__sflush_r+0x7c>
 800757a:	6560      	str	r0, [r4, #84]	; 0x54
 800757c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800757e:	602f      	str	r7, [r5, #0]
 8007580:	2900      	cmp	r1, #0
 8007582:	d0ca      	beq.n	800751a <__sflush_r+0x1a>
 8007584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007588:	4299      	cmp	r1, r3
 800758a:	d002      	beq.n	8007592 <__sflush_r+0x92>
 800758c:	4628      	mov	r0, r5
 800758e:	f7ff f9b5 	bl	80068fc <_free_r>
 8007592:	2000      	movs	r0, #0
 8007594:	6360      	str	r0, [r4, #52]	; 0x34
 8007596:	e7c1      	b.n	800751c <__sflush_r+0x1c>
 8007598:	6a21      	ldr	r1, [r4, #32]
 800759a:	2301      	movs	r3, #1
 800759c:	4628      	mov	r0, r5
 800759e:	47b0      	blx	r6
 80075a0:	1c41      	adds	r1, r0, #1
 80075a2:	d1c7      	bne.n	8007534 <__sflush_r+0x34>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0c4      	beq.n	8007534 <__sflush_r+0x34>
 80075aa:	2b1d      	cmp	r3, #29
 80075ac:	d001      	beq.n	80075b2 <__sflush_r+0xb2>
 80075ae:	2b16      	cmp	r3, #22
 80075b0:	d101      	bne.n	80075b6 <__sflush_r+0xb6>
 80075b2:	602f      	str	r7, [r5, #0]
 80075b4:	e7b1      	b.n	800751a <__sflush_r+0x1a>
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075bc:	81a3      	strh	r3, [r4, #12]
 80075be:	e7ad      	b.n	800751c <__sflush_r+0x1c>
 80075c0:	690f      	ldr	r7, [r1, #16]
 80075c2:	2f00      	cmp	r7, #0
 80075c4:	d0a9      	beq.n	800751a <__sflush_r+0x1a>
 80075c6:	0793      	lsls	r3, r2, #30
 80075c8:	680e      	ldr	r6, [r1, #0]
 80075ca:	bf08      	it	eq
 80075cc:	694b      	ldreq	r3, [r1, #20]
 80075ce:	600f      	str	r7, [r1, #0]
 80075d0:	bf18      	it	ne
 80075d2:	2300      	movne	r3, #0
 80075d4:	eba6 0807 	sub.w	r8, r6, r7
 80075d8:	608b      	str	r3, [r1, #8]
 80075da:	f1b8 0f00 	cmp.w	r8, #0
 80075de:	dd9c      	ble.n	800751a <__sflush_r+0x1a>
 80075e0:	6a21      	ldr	r1, [r4, #32]
 80075e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075e4:	4643      	mov	r3, r8
 80075e6:	463a      	mov	r2, r7
 80075e8:	4628      	mov	r0, r5
 80075ea:	47b0      	blx	r6
 80075ec:	2800      	cmp	r0, #0
 80075ee:	dc06      	bgt.n	80075fe <__sflush_r+0xfe>
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075f6:	81a3      	strh	r3, [r4, #12]
 80075f8:	f04f 30ff 	mov.w	r0, #4294967295
 80075fc:	e78e      	b.n	800751c <__sflush_r+0x1c>
 80075fe:	4407      	add	r7, r0
 8007600:	eba8 0800 	sub.w	r8, r8, r0
 8007604:	e7e9      	b.n	80075da <__sflush_r+0xda>
 8007606:	bf00      	nop
 8007608:	20400001 	.word	0x20400001

0800760c <_fflush_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	690b      	ldr	r3, [r1, #16]
 8007610:	4605      	mov	r5, r0
 8007612:	460c      	mov	r4, r1
 8007614:	b913      	cbnz	r3, 800761c <_fflush_r+0x10>
 8007616:	2500      	movs	r5, #0
 8007618:	4628      	mov	r0, r5
 800761a:	bd38      	pop	{r3, r4, r5, pc}
 800761c:	b118      	cbz	r0, 8007626 <_fflush_r+0x1a>
 800761e:	6983      	ldr	r3, [r0, #24]
 8007620:	b90b      	cbnz	r3, 8007626 <_fflush_r+0x1a>
 8007622:	f000 f887 	bl	8007734 <__sinit>
 8007626:	4b14      	ldr	r3, [pc, #80]	; (8007678 <_fflush_r+0x6c>)
 8007628:	429c      	cmp	r4, r3
 800762a:	d11b      	bne.n	8007664 <_fflush_r+0x58>
 800762c:	686c      	ldr	r4, [r5, #4]
 800762e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0ef      	beq.n	8007616 <_fflush_r+0xa>
 8007636:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007638:	07d0      	lsls	r0, r2, #31
 800763a:	d404      	bmi.n	8007646 <_fflush_r+0x3a>
 800763c:	0599      	lsls	r1, r3, #22
 800763e:	d402      	bmi.n	8007646 <_fflush_r+0x3a>
 8007640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007642:	f000 f915 	bl	8007870 <__retarget_lock_acquire_recursive>
 8007646:	4628      	mov	r0, r5
 8007648:	4621      	mov	r1, r4
 800764a:	f7ff ff59 	bl	8007500 <__sflush_r>
 800764e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007650:	07da      	lsls	r2, r3, #31
 8007652:	4605      	mov	r5, r0
 8007654:	d4e0      	bmi.n	8007618 <_fflush_r+0xc>
 8007656:	89a3      	ldrh	r3, [r4, #12]
 8007658:	059b      	lsls	r3, r3, #22
 800765a:	d4dd      	bmi.n	8007618 <_fflush_r+0xc>
 800765c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800765e:	f000 f908 	bl	8007872 <__retarget_lock_release_recursive>
 8007662:	e7d9      	b.n	8007618 <_fflush_r+0xc>
 8007664:	4b05      	ldr	r3, [pc, #20]	; (800767c <_fflush_r+0x70>)
 8007666:	429c      	cmp	r4, r3
 8007668:	d101      	bne.n	800766e <_fflush_r+0x62>
 800766a:	68ac      	ldr	r4, [r5, #8]
 800766c:	e7df      	b.n	800762e <_fflush_r+0x22>
 800766e:	4b04      	ldr	r3, [pc, #16]	; (8007680 <_fflush_r+0x74>)
 8007670:	429c      	cmp	r4, r3
 8007672:	bf08      	it	eq
 8007674:	68ec      	ldreq	r4, [r5, #12]
 8007676:	e7da      	b.n	800762e <_fflush_r+0x22>
 8007678:	080080e8 	.word	0x080080e8
 800767c:	08008108 	.word	0x08008108
 8007680:	080080c8 	.word	0x080080c8

08007684 <std>:
 8007684:	2300      	movs	r3, #0
 8007686:	b510      	push	{r4, lr}
 8007688:	4604      	mov	r4, r0
 800768a:	e9c0 3300 	strd	r3, r3, [r0]
 800768e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007692:	6083      	str	r3, [r0, #8]
 8007694:	8181      	strh	r1, [r0, #12]
 8007696:	6643      	str	r3, [r0, #100]	; 0x64
 8007698:	81c2      	strh	r2, [r0, #14]
 800769a:	6183      	str	r3, [r0, #24]
 800769c:	4619      	mov	r1, r3
 800769e:	2208      	movs	r2, #8
 80076a0:	305c      	adds	r0, #92	; 0x5c
 80076a2:	f7fe ffe3 	bl	800666c <memset>
 80076a6:	4b05      	ldr	r3, [pc, #20]	; (80076bc <std+0x38>)
 80076a8:	6263      	str	r3, [r4, #36]	; 0x24
 80076aa:	4b05      	ldr	r3, [pc, #20]	; (80076c0 <std+0x3c>)
 80076ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80076ae:	4b05      	ldr	r3, [pc, #20]	; (80076c4 <std+0x40>)
 80076b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076b2:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <std+0x44>)
 80076b4:	6224      	str	r4, [r4, #32]
 80076b6:	6323      	str	r3, [r4, #48]	; 0x30
 80076b8:	bd10      	pop	{r4, pc}
 80076ba:	bf00      	nop
 80076bc:	08007a91 	.word	0x08007a91
 80076c0:	08007ab3 	.word	0x08007ab3
 80076c4:	08007aeb 	.word	0x08007aeb
 80076c8:	08007b0f 	.word	0x08007b0f

080076cc <_cleanup_r>:
 80076cc:	4901      	ldr	r1, [pc, #4]	; (80076d4 <_cleanup_r+0x8>)
 80076ce:	f000 b8af 	b.w	8007830 <_fwalk_reent>
 80076d2:	bf00      	nop
 80076d4:	0800760d 	.word	0x0800760d

080076d8 <__sfmoreglue>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	2268      	movs	r2, #104	; 0x68
 80076dc:	1e4d      	subs	r5, r1, #1
 80076de:	4355      	muls	r5, r2
 80076e0:	460e      	mov	r6, r1
 80076e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076e6:	f7ff f975 	bl	80069d4 <_malloc_r>
 80076ea:	4604      	mov	r4, r0
 80076ec:	b140      	cbz	r0, 8007700 <__sfmoreglue+0x28>
 80076ee:	2100      	movs	r1, #0
 80076f0:	e9c0 1600 	strd	r1, r6, [r0]
 80076f4:	300c      	adds	r0, #12
 80076f6:	60a0      	str	r0, [r4, #8]
 80076f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076fc:	f7fe ffb6 	bl	800666c <memset>
 8007700:	4620      	mov	r0, r4
 8007702:	bd70      	pop	{r4, r5, r6, pc}

08007704 <__sfp_lock_acquire>:
 8007704:	4801      	ldr	r0, [pc, #4]	; (800770c <__sfp_lock_acquire+0x8>)
 8007706:	f000 b8b3 	b.w	8007870 <__retarget_lock_acquire_recursive>
 800770a:	bf00      	nop
 800770c:	20000211 	.word	0x20000211

08007710 <__sfp_lock_release>:
 8007710:	4801      	ldr	r0, [pc, #4]	; (8007718 <__sfp_lock_release+0x8>)
 8007712:	f000 b8ae 	b.w	8007872 <__retarget_lock_release_recursive>
 8007716:	bf00      	nop
 8007718:	20000211 	.word	0x20000211

0800771c <__sinit_lock_acquire>:
 800771c:	4801      	ldr	r0, [pc, #4]	; (8007724 <__sinit_lock_acquire+0x8>)
 800771e:	f000 b8a7 	b.w	8007870 <__retarget_lock_acquire_recursive>
 8007722:	bf00      	nop
 8007724:	20000212 	.word	0x20000212

08007728 <__sinit_lock_release>:
 8007728:	4801      	ldr	r0, [pc, #4]	; (8007730 <__sinit_lock_release+0x8>)
 800772a:	f000 b8a2 	b.w	8007872 <__retarget_lock_release_recursive>
 800772e:	bf00      	nop
 8007730:	20000212 	.word	0x20000212

08007734 <__sinit>:
 8007734:	b510      	push	{r4, lr}
 8007736:	4604      	mov	r4, r0
 8007738:	f7ff fff0 	bl	800771c <__sinit_lock_acquire>
 800773c:	69a3      	ldr	r3, [r4, #24]
 800773e:	b11b      	cbz	r3, 8007748 <__sinit+0x14>
 8007740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007744:	f7ff bff0 	b.w	8007728 <__sinit_lock_release>
 8007748:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800774c:	6523      	str	r3, [r4, #80]	; 0x50
 800774e:	4b13      	ldr	r3, [pc, #76]	; (800779c <__sinit+0x68>)
 8007750:	4a13      	ldr	r2, [pc, #76]	; (80077a0 <__sinit+0x6c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	62a2      	str	r2, [r4, #40]	; 0x28
 8007756:	42a3      	cmp	r3, r4
 8007758:	bf04      	itt	eq
 800775a:	2301      	moveq	r3, #1
 800775c:	61a3      	streq	r3, [r4, #24]
 800775e:	4620      	mov	r0, r4
 8007760:	f000 f820 	bl	80077a4 <__sfp>
 8007764:	6060      	str	r0, [r4, #4]
 8007766:	4620      	mov	r0, r4
 8007768:	f000 f81c 	bl	80077a4 <__sfp>
 800776c:	60a0      	str	r0, [r4, #8]
 800776e:	4620      	mov	r0, r4
 8007770:	f000 f818 	bl	80077a4 <__sfp>
 8007774:	2200      	movs	r2, #0
 8007776:	60e0      	str	r0, [r4, #12]
 8007778:	2104      	movs	r1, #4
 800777a:	6860      	ldr	r0, [r4, #4]
 800777c:	f7ff ff82 	bl	8007684 <std>
 8007780:	68a0      	ldr	r0, [r4, #8]
 8007782:	2201      	movs	r2, #1
 8007784:	2109      	movs	r1, #9
 8007786:	f7ff ff7d 	bl	8007684 <std>
 800778a:	68e0      	ldr	r0, [r4, #12]
 800778c:	2202      	movs	r2, #2
 800778e:	2112      	movs	r1, #18
 8007790:	f7ff ff78 	bl	8007684 <std>
 8007794:	2301      	movs	r3, #1
 8007796:	61a3      	str	r3, [r4, #24]
 8007798:	e7d2      	b.n	8007740 <__sinit+0xc>
 800779a:	bf00      	nop
 800779c:	08007ee0 	.word	0x08007ee0
 80077a0:	080076cd 	.word	0x080076cd

080077a4 <__sfp>:
 80077a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a6:	4607      	mov	r7, r0
 80077a8:	f7ff ffac 	bl	8007704 <__sfp_lock_acquire>
 80077ac:	4b1e      	ldr	r3, [pc, #120]	; (8007828 <__sfp+0x84>)
 80077ae:	681e      	ldr	r6, [r3, #0]
 80077b0:	69b3      	ldr	r3, [r6, #24]
 80077b2:	b913      	cbnz	r3, 80077ba <__sfp+0x16>
 80077b4:	4630      	mov	r0, r6
 80077b6:	f7ff ffbd 	bl	8007734 <__sinit>
 80077ba:	3648      	adds	r6, #72	; 0x48
 80077bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077c0:	3b01      	subs	r3, #1
 80077c2:	d503      	bpl.n	80077cc <__sfp+0x28>
 80077c4:	6833      	ldr	r3, [r6, #0]
 80077c6:	b30b      	cbz	r3, 800780c <__sfp+0x68>
 80077c8:	6836      	ldr	r6, [r6, #0]
 80077ca:	e7f7      	b.n	80077bc <__sfp+0x18>
 80077cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077d0:	b9d5      	cbnz	r5, 8007808 <__sfp+0x64>
 80077d2:	4b16      	ldr	r3, [pc, #88]	; (800782c <__sfp+0x88>)
 80077d4:	60e3      	str	r3, [r4, #12]
 80077d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077da:	6665      	str	r5, [r4, #100]	; 0x64
 80077dc:	f000 f847 	bl	800786e <__retarget_lock_init_recursive>
 80077e0:	f7ff ff96 	bl	8007710 <__sfp_lock_release>
 80077e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80077e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80077ec:	6025      	str	r5, [r4, #0]
 80077ee:	61a5      	str	r5, [r4, #24]
 80077f0:	2208      	movs	r2, #8
 80077f2:	4629      	mov	r1, r5
 80077f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077f8:	f7fe ff38 	bl	800666c <memset>
 80077fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007800:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007804:	4620      	mov	r0, r4
 8007806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007808:	3468      	adds	r4, #104	; 0x68
 800780a:	e7d9      	b.n	80077c0 <__sfp+0x1c>
 800780c:	2104      	movs	r1, #4
 800780e:	4638      	mov	r0, r7
 8007810:	f7ff ff62 	bl	80076d8 <__sfmoreglue>
 8007814:	4604      	mov	r4, r0
 8007816:	6030      	str	r0, [r6, #0]
 8007818:	2800      	cmp	r0, #0
 800781a:	d1d5      	bne.n	80077c8 <__sfp+0x24>
 800781c:	f7ff ff78 	bl	8007710 <__sfp_lock_release>
 8007820:	230c      	movs	r3, #12
 8007822:	603b      	str	r3, [r7, #0]
 8007824:	e7ee      	b.n	8007804 <__sfp+0x60>
 8007826:	bf00      	nop
 8007828:	08007ee0 	.word	0x08007ee0
 800782c:	ffff0001 	.word	0xffff0001

08007830 <_fwalk_reent>:
 8007830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007834:	4606      	mov	r6, r0
 8007836:	4688      	mov	r8, r1
 8007838:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800783c:	2700      	movs	r7, #0
 800783e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007842:	f1b9 0901 	subs.w	r9, r9, #1
 8007846:	d505      	bpl.n	8007854 <_fwalk_reent+0x24>
 8007848:	6824      	ldr	r4, [r4, #0]
 800784a:	2c00      	cmp	r4, #0
 800784c:	d1f7      	bne.n	800783e <_fwalk_reent+0xe>
 800784e:	4638      	mov	r0, r7
 8007850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007854:	89ab      	ldrh	r3, [r5, #12]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d907      	bls.n	800786a <_fwalk_reent+0x3a>
 800785a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800785e:	3301      	adds	r3, #1
 8007860:	d003      	beq.n	800786a <_fwalk_reent+0x3a>
 8007862:	4629      	mov	r1, r5
 8007864:	4630      	mov	r0, r6
 8007866:	47c0      	blx	r8
 8007868:	4307      	orrs	r7, r0
 800786a:	3568      	adds	r5, #104	; 0x68
 800786c:	e7e9      	b.n	8007842 <_fwalk_reent+0x12>

0800786e <__retarget_lock_init_recursive>:
 800786e:	4770      	bx	lr

08007870 <__retarget_lock_acquire_recursive>:
 8007870:	4770      	bx	lr

08007872 <__retarget_lock_release_recursive>:
 8007872:	4770      	bx	lr

08007874 <__swhatbuf_r>:
 8007874:	b570      	push	{r4, r5, r6, lr}
 8007876:	460e      	mov	r6, r1
 8007878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800787c:	2900      	cmp	r1, #0
 800787e:	b096      	sub	sp, #88	; 0x58
 8007880:	4614      	mov	r4, r2
 8007882:	461d      	mov	r5, r3
 8007884:	da08      	bge.n	8007898 <__swhatbuf_r+0x24>
 8007886:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	602a      	str	r2, [r5, #0]
 800788e:	061a      	lsls	r2, r3, #24
 8007890:	d410      	bmi.n	80078b4 <__swhatbuf_r+0x40>
 8007892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007896:	e00e      	b.n	80078b6 <__swhatbuf_r+0x42>
 8007898:	466a      	mov	r2, sp
 800789a:	f000 f95f 	bl	8007b5c <_fstat_r>
 800789e:	2800      	cmp	r0, #0
 80078a0:	dbf1      	blt.n	8007886 <__swhatbuf_r+0x12>
 80078a2:	9a01      	ldr	r2, [sp, #4]
 80078a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078ac:	425a      	negs	r2, r3
 80078ae:	415a      	adcs	r2, r3
 80078b0:	602a      	str	r2, [r5, #0]
 80078b2:	e7ee      	b.n	8007892 <__swhatbuf_r+0x1e>
 80078b4:	2340      	movs	r3, #64	; 0x40
 80078b6:	2000      	movs	r0, #0
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	b016      	add	sp, #88	; 0x58
 80078bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080078c0 <__smakebuf_r>:
 80078c0:	898b      	ldrh	r3, [r1, #12]
 80078c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078c4:	079d      	lsls	r5, r3, #30
 80078c6:	4606      	mov	r6, r0
 80078c8:	460c      	mov	r4, r1
 80078ca:	d507      	bpl.n	80078dc <__smakebuf_r+0x1c>
 80078cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	6123      	str	r3, [r4, #16]
 80078d4:	2301      	movs	r3, #1
 80078d6:	6163      	str	r3, [r4, #20]
 80078d8:	b002      	add	sp, #8
 80078da:	bd70      	pop	{r4, r5, r6, pc}
 80078dc:	ab01      	add	r3, sp, #4
 80078de:	466a      	mov	r2, sp
 80078e0:	f7ff ffc8 	bl	8007874 <__swhatbuf_r>
 80078e4:	9900      	ldr	r1, [sp, #0]
 80078e6:	4605      	mov	r5, r0
 80078e8:	4630      	mov	r0, r6
 80078ea:	f7ff f873 	bl	80069d4 <_malloc_r>
 80078ee:	b948      	cbnz	r0, 8007904 <__smakebuf_r+0x44>
 80078f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078f4:	059a      	lsls	r2, r3, #22
 80078f6:	d4ef      	bmi.n	80078d8 <__smakebuf_r+0x18>
 80078f8:	f023 0303 	bic.w	r3, r3, #3
 80078fc:	f043 0302 	orr.w	r3, r3, #2
 8007900:	81a3      	strh	r3, [r4, #12]
 8007902:	e7e3      	b.n	80078cc <__smakebuf_r+0xc>
 8007904:	4b0d      	ldr	r3, [pc, #52]	; (800793c <__smakebuf_r+0x7c>)
 8007906:	62b3      	str	r3, [r6, #40]	; 0x28
 8007908:	89a3      	ldrh	r3, [r4, #12]
 800790a:	6020      	str	r0, [r4, #0]
 800790c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007910:	81a3      	strh	r3, [r4, #12]
 8007912:	9b00      	ldr	r3, [sp, #0]
 8007914:	6163      	str	r3, [r4, #20]
 8007916:	9b01      	ldr	r3, [sp, #4]
 8007918:	6120      	str	r0, [r4, #16]
 800791a:	b15b      	cbz	r3, 8007934 <__smakebuf_r+0x74>
 800791c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007920:	4630      	mov	r0, r6
 8007922:	f000 f92d 	bl	8007b80 <_isatty_r>
 8007926:	b128      	cbz	r0, 8007934 <__smakebuf_r+0x74>
 8007928:	89a3      	ldrh	r3, [r4, #12]
 800792a:	f023 0303 	bic.w	r3, r3, #3
 800792e:	f043 0301 	orr.w	r3, r3, #1
 8007932:	81a3      	strh	r3, [r4, #12]
 8007934:	89a0      	ldrh	r0, [r4, #12]
 8007936:	4305      	orrs	r5, r0
 8007938:	81a5      	strh	r5, [r4, #12]
 800793a:	e7cd      	b.n	80078d8 <__smakebuf_r+0x18>
 800793c:	080076cd 	.word	0x080076cd

08007940 <memcpy>:
 8007940:	440a      	add	r2, r1
 8007942:	4291      	cmp	r1, r2
 8007944:	f100 33ff 	add.w	r3, r0, #4294967295
 8007948:	d100      	bne.n	800794c <memcpy+0xc>
 800794a:	4770      	bx	lr
 800794c:	b510      	push	{r4, lr}
 800794e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007952:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007956:	4291      	cmp	r1, r2
 8007958:	d1f9      	bne.n	800794e <memcpy+0xe>
 800795a:	bd10      	pop	{r4, pc}

0800795c <memmove>:
 800795c:	4288      	cmp	r0, r1
 800795e:	b510      	push	{r4, lr}
 8007960:	eb01 0402 	add.w	r4, r1, r2
 8007964:	d902      	bls.n	800796c <memmove+0x10>
 8007966:	4284      	cmp	r4, r0
 8007968:	4623      	mov	r3, r4
 800796a:	d807      	bhi.n	800797c <memmove+0x20>
 800796c:	1e43      	subs	r3, r0, #1
 800796e:	42a1      	cmp	r1, r4
 8007970:	d008      	beq.n	8007984 <memmove+0x28>
 8007972:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007976:	f803 2f01 	strb.w	r2, [r3, #1]!
 800797a:	e7f8      	b.n	800796e <memmove+0x12>
 800797c:	4402      	add	r2, r0
 800797e:	4601      	mov	r1, r0
 8007980:	428a      	cmp	r2, r1
 8007982:	d100      	bne.n	8007986 <memmove+0x2a>
 8007984:	bd10      	pop	{r4, pc}
 8007986:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800798a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800798e:	e7f7      	b.n	8007980 <memmove+0x24>

08007990 <__malloc_lock>:
 8007990:	4801      	ldr	r0, [pc, #4]	; (8007998 <__malloc_lock+0x8>)
 8007992:	f7ff bf6d 	b.w	8007870 <__retarget_lock_acquire_recursive>
 8007996:	bf00      	nop
 8007998:	20000210 	.word	0x20000210

0800799c <__malloc_unlock>:
 800799c:	4801      	ldr	r0, [pc, #4]	; (80079a4 <__malloc_unlock+0x8>)
 800799e:	f7ff bf68 	b.w	8007872 <__retarget_lock_release_recursive>
 80079a2:	bf00      	nop
 80079a4:	20000210 	.word	0x20000210

080079a8 <_realloc_r>:
 80079a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ac:	4680      	mov	r8, r0
 80079ae:	4614      	mov	r4, r2
 80079b0:	460e      	mov	r6, r1
 80079b2:	b921      	cbnz	r1, 80079be <_realloc_r+0x16>
 80079b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079b8:	4611      	mov	r1, r2
 80079ba:	f7ff b80b 	b.w	80069d4 <_malloc_r>
 80079be:	b92a      	cbnz	r2, 80079cc <_realloc_r+0x24>
 80079c0:	f7fe ff9c 	bl	80068fc <_free_r>
 80079c4:	4625      	mov	r5, r4
 80079c6:	4628      	mov	r0, r5
 80079c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079cc:	f000 f8fa 	bl	8007bc4 <_malloc_usable_size_r>
 80079d0:	4284      	cmp	r4, r0
 80079d2:	4607      	mov	r7, r0
 80079d4:	d802      	bhi.n	80079dc <_realloc_r+0x34>
 80079d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079da:	d812      	bhi.n	8007a02 <_realloc_r+0x5a>
 80079dc:	4621      	mov	r1, r4
 80079de:	4640      	mov	r0, r8
 80079e0:	f7fe fff8 	bl	80069d4 <_malloc_r>
 80079e4:	4605      	mov	r5, r0
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d0ed      	beq.n	80079c6 <_realloc_r+0x1e>
 80079ea:	42bc      	cmp	r4, r7
 80079ec:	4622      	mov	r2, r4
 80079ee:	4631      	mov	r1, r6
 80079f0:	bf28      	it	cs
 80079f2:	463a      	movcs	r2, r7
 80079f4:	f7ff ffa4 	bl	8007940 <memcpy>
 80079f8:	4631      	mov	r1, r6
 80079fa:	4640      	mov	r0, r8
 80079fc:	f7fe ff7e 	bl	80068fc <_free_r>
 8007a00:	e7e1      	b.n	80079c6 <_realloc_r+0x1e>
 8007a02:	4635      	mov	r5, r6
 8007a04:	e7df      	b.n	80079c6 <_realloc_r+0x1e>

08007a06 <_raise_r>:
 8007a06:	291f      	cmp	r1, #31
 8007a08:	b538      	push	{r3, r4, r5, lr}
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	460d      	mov	r5, r1
 8007a0e:	d904      	bls.n	8007a1a <_raise_r+0x14>
 8007a10:	2316      	movs	r3, #22
 8007a12:	6003      	str	r3, [r0, #0]
 8007a14:	f04f 30ff 	mov.w	r0, #4294967295
 8007a18:	bd38      	pop	{r3, r4, r5, pc}
 8007a1a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a1c:	b112      	cbz	r2, 8007a24 <_raise_r+0x1e>
 8007a1e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a22:	b94b      	cbnz	r3, 8007a38 <_raise_r+0x32>
 8007a24:	4620      	mov	r0, r4
 8007a26:	f000 f831 	bl	8007a8c <_getpid_r>
 8007a2a:	462a      	mov	r2, r5
 8007a2c:	4601      	mov	r1, r0
 8007a2e:	4620      	mov	r0, r4
 8007a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a34:	f000 b818 	b.w	8007a68 <_kill_r>
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d00a      	beq.n	8007a52 <_raise_r+0x4c>
 8007a3c:	1c59      	adds	r1, r3, #1
 8007a3e:	d103      	bne.n	8007a48 <_raise_r+0x42>
 8007a40:	2316      	movs	r3, #22
 8007a42:	6003      	str	r3, [r0, #0]
 8007a44:	2001      	movs	r0, #1
 8007a46:	e7e7      	b.n	8007a18 <_raise_r+0x12>
 8007a48:	2400      	movs	r4, #0
 8007a4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a4e:	4628      	mov	r0, r5
 8007a50:	4798      	blx	r3
 8007a52:	2000      	movs	r0, #0
 8007a54:	e7e0      	b.n	8007a18 <_raise_r+0x12>
	...

08007a58 <raise>:
 8007a58:	4b02      	ldr	r3, [pc, #8]	; (8007a64 <raise+0xc>)
 8007a5a:	4601      	mov	r1, r0
 8007a5c:	6818      	ldr	r0, [r3, #0]
 8007a5e:	f7ff bfd2 	b.w	8007a06 <_raise_r>
 8007a62:	bf00      	nop
 8007a64:	20000010 	.word	0x20000010

08007a68 <_kill_r>:
 8007a68:	b538      	push	{r3, r4, r5, lr}
 8007a6a:	4d07      	ldr	r5, [pc, #28]	; (8007a88 <_kill_r+0x20>)
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4604      	mov	r4, r0
 8007a70:	4608      	mov	r0, r1
 8007a72:	4611      	mov	r1, r2
 8007a74:	602b      	str	r3, [r5, #0]
 8007a76:	f7f9 f96b 	bl	8000d50 <_kill>
 8007a7a:	1c43      	adds	r3, r0, #1
 8007a7c:	d102      	bne.n	8007a84 <_kill_r+0x1c>
 8007a7e:	682b      	ldr	r3, [r5, #0]
 8007a80:	b103      	cbz	r3, 8007a84 <_kill_r+0x1c>
 8007a82:	6023      	str	r3, [r4, #0]
 8007a84:	bd38      	pop	{r3, r4, r5, pc}
 8007a86:	bf00      	nop
 8007a88:	20000214 	.word	0x20000214

08007a8c <_getpid_r>:
 8007a8c:	f7f9 b958 	b.w	8000d40 <_getpid>

08007a90 <__sread>:
 8007a90:	b510      	push	{r4, lr}
 8007a92:	460c      	mov	r4, r1
 8007a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a98:	f000 f89c 	bl	8007bd4 <_read_r>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	bfab      	itete	ge
 8007aa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8007aa4:	181b      	addge	r3, r3, r0
 8007aa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007aaa:	bfac      	ite	ge
 8007aac:	6563      	strge	r3, [r4, #84]	; 0x54
 8007aae:	81a3      	strhlt	r3, [r4, #12]
 8007ab0:	bd10      	pop	{r4, pc}

08007ab2 <__swrite>:
 8007ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab6:	461f      	mov	r7, r3
 8007ab8:	898b      	ldrh	r3, [r1, #12]
 8007aba:	05db      	lsls	r3, r3, #23
 8007abc:	4605      	mov	r5, r0
 8007abe:	460c      	mov	r4, r1
 8007ac0:	4616      	mov	r6, r2
 8007ac2:	d505      	bpl.n	8007ad0 <__swrite+0x1e>
 8007ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac8:	2302      	movs	r3, #2
 8007aca:	2200      	movs	r2, #0
 8007acc:	f000 f868 	bl	8007ba0 <_lseek_r>
 8007ad0:	89a3      	ldrh	r3, [r4, #12]
 8007ad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ad6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ada:	81a3      	strh	r3, [r4, #12]
 8007adc:	4632      	mov	r2, r6
 8007ade:	463b      	mov	r3, r7
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae6:	f000 b817 	b.w	8007b18 <_write_r>

08007aea <__sseek>:
 8007aea:	b510      	push	{r4, lr}
 8007aec:	460c      	mov	r4, r1
 8007aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af2:	f000 f855 	bl	8007ba0 <_lseek_r>
 8007af6:	1c43      	adds	r3, r0, #1
 8007af8:	89a3      	ldrh	r3, [r4, #12]
 8007afa:	bf15      	itete	ne
 8007afc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007afe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b06:	81a3      	strheq	r3, [r4, #12]
 8007b08:	bf18      	it	ne
 8007b0a:	81a3      	strhne	r3, [r4, #12]
 8007b0c:	bd10      	pop	{r4, pc}

08007b0e <__sclose>:
 8007b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b12:	f000 b813 	b.w	8007b3c <_close_r>
	...

08007b18 <_write_r>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4d07      	ldr	r5, [pc, #28]	; (8007b38 <_write_r+0x20>)
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	4608      	mov	r0, r1
 8007b20:	4611      	mov	r1, r2
 8007b22:	2200      	movs	r2, #0
 8007b24:	602a      	str	r2, [r5, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	f7f9 f949 	bl	8000dbe <_write>
 8007b2c:	1c43      	adds	r3, r0, #1
 8007b2e:	d102      	bne.n	8007b36 <_write_r+0x1e>
 8007b30:	682b      	ldr	r3, [r5, #0]
 8007b32:	b103      	cbz	r3, 8007b36 <_write_r+0x1e>
 8007b34:	6023      	str	r3, [r4, #0]
 8007b36:	bd38      	pop	{r3, r4, r5, pc}
 8007b38:	20000214 	.word	0x20000214

08007b3c <_close_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	4d06      	ldr	r5, [pc, #24]	; (8007b58 <_close_r+0x1c>)
 8007b40:	2300      	movs	r3, #0
 8007b42:	4604      	mov	r4, r0
 8007b44:	4608      	mov	r0, r1
 8007b46:	602b      	str	r3, [r5, #0]
 8007b48:	f7f9 f955 	bl	8000df6 <_close>
 8007b4c:	1c43      	adds	r3, r0, #1
 8007b4e:	d102      	bne.n	8007b56 <_close_r+0x1a>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	b103      	cbz	r3, 8007b56 <_close_r+0x1a>
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	bd38      	pop	{r3, r4, r5, pc}
 8007b58:	20000214 	.word	0x20000214

08007b5c <_fstat_r>:
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	4d07      	ldr	r5, [pc, #28]	; (8007b7c <_fstat_r+0x20>)
 8007b60:	2300      	movs	r3, #0
 8007b62:	4604      	mov	r4, r0
 8007b64:	4608      	mov	r0, r1
 8007b66:	4611      	mov	r1, r2
 8007b68:	602b      	str	r3, [r5, #0]
 8007b6a:	f7f9 f950 	bl	8000e0e <_fstat>
 8007b6e:	1c43      	adds	r3, r0, #1
 8007b70:	d102      	bne.n	8007b78 <_fstat_r+0x1c>
 8007b72:	682b      	ldr	r3, [r5, #0]
 8007b74:	b103      	cbz	r3, 8007b78 <_fstat_r+0x1c>
 8007b76:	6023      	str	r3, [r4, #0]
 8007b78:	bd38      	pop	{r3, r4, r5, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20000214 	.word	0x20000214

08007b80 <_isatty_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4d06      	ldr	r5, [pc, #24]	; (8007b9c <_isatty_r+0x1c>)
 8007b84:	2300      	movs	r3, #0
 8007b86:	4604      	mov	r4, r0
 8007b88:	4608      	mov	r0, r1
 8007b8a:	602b      	str	r3, [r5, #0]
 8007b8c:	f7f9 f94f 	bl	8000e2e <_isatty>
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	d102      	bne.n	8007b9a <_isatty_r+0x1a>
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	b103      	cbz	r3, 8007b9a <_isatty_r+0x1a>
 8007b98:	6023      	str	r3, [r4, #0]
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}
 8007b9c:	20000214 	.word	0x20000214

08007ba0 <_lseek_r>:
 8007ba0:	b538      	push	{r3, r4, r5, lr}
 8007ba2:	4d07      	ldr	r5, [pc, #28]	; (8007bc0 <_lseek_r+0x20>)
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	4608      	mov	r0, r1
 8007ba8:	4611      	mov	r1, r2
 8007baa:	2200      	movs	r2, #0
 8007bac:	602a      	str	r2, [r5, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	f7f9 f948 	bl	8000e44 <_lseek>
 8007bb4:	1c43      	adds	r3, r0, #1
 8007bb6:	d102      	bne.n	8007bbe <_lseek_r+0x1e>
 8007bb8:	682b      	ldr	r3, [r5, #0]
 8007bba:	b103      	cbz	r3, 8007bbe <_lseek_r+0x1e>
 8007bbc:	6023      	str	r3, [r4, #0]
 8007bbe:	bd38      	pop	{r3, r4, r5, pc}
 8007bc0:	20000214 	.word	0x20000214

08007bc4 <_malloc_usable_size_r>:
 8007bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bc8:	1f18      	subs	r0, r3, #4
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	bfbc      	itt	lt
 8007bce:	580b      	ldrlt	r3, [r1, r0]
 8007bd0:	18c0      	addlt	r0, r0, r3
 8007bd2:	4770      	bx	lr

08007bd4 <_read_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4d07      	ldr	r5, [pc, #28]	; (8007bf4 <_read_r+0x20>)
 8007bd8:	4604      	mov	r4, r0
 8007bda:	4608      	mov	r0, r1
 8007bdc:	4611      	mov	r1, r2
 8007bde:	2200      	movs	r2, #0
 8007be0:	602a      	str	r2, [r5, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	f7f9 f8ce 	bl	8000d84 <_read>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d102      	bne.n	8007bf2 <_read_r+0x1e>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	b103      	cbz	r3, 8007bf2 <_read_r+0x1e>
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	20000214 	.word	0x20000214

08007bf8 <_init>:
 8007bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfa:	bf00      	nop
 8007bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bfe:	bc08      	pop	{r3}
 8007c00:	469e      	mov	lr, r3
 8007c02:	4770      	bx	lr

08007c04 <_fini>:
 8007c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c06:	bf00      	nop
 8007c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c0a:	bc08      	pop	{r3}
 8007c0c:	469e      	mov	lr, r3
 8007c0e:	4770      	bx	lr
