
TP_actionneurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d98  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000644  08009f78  08009f78  00019f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5bc  0800a5bc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5bc  0800a5bc  0001a5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5c4  0800a5c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5c4  0800a5c4  0001a5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5c8  0800a5c8  0001a5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a5cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000074  0800a640  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  0800a640  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b684  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003338  00000000  00000000  0003b728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  0003ea60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001468  00000000  00000000  00040020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e8d  00000000  00000000  00041488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019cd2  00000000  00000000  0006b315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113ed8  00000000  00000000  00084fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00198ebf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006888  00000000  00000000  00198f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009f60 	.word	0x08009f60

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08009f60 	.word	0x08009f60

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	; 0x30
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2220      	movs	r2, #32
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f008 f9e9 	bl	80089d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000602:	4b32      	ldr	r3, [pc, #200]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000604:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000608:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800060a:	4b30      	ldr	r3, [pc, #192]	; (80006cc <MX_ADC1_Init+0xe8>)
 800060c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000610:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000612:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000618:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <MX_ADC1_Init+0xe8>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061e:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000624:	4b29      	ldr	r3, [pc, #164]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062a:	4b28      	ldr	r3, [pc, #160]	; (80006cc <MX_ADC1_Init+0xe8>)
 800062c:	2204      	movs	r2, #4
 800062e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000632:	2200      	movs	r2, #0
 8000634:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000638:	2200      	movs	r2, #0
 800063a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <MX_ADC1_Init+0xe8>)
 800063e:	2201      	movs	r2, #1
 8000640:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000642:	4b22      	ldr	r3, [pc, #136]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064a:	4b20      	ldr	r3, [pc, #128]	; (80006cc <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000652:	2200      	movs	r2, #0
 8000654:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000656:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	4817      	ldr	r0, [pc, #92]	; (80006cc <MX_ADC1_Init+0xe8>)
 800066e:	f001 fafb 	bl	8001c68 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000678:	f000 fc02 	bl	8000e80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000684:	4619      	mov	r1, r3
 8000686:	4811      	ldr	r0, [pc, #68]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000688:	f002 fb70 	bl	8002d6c <HAL_ADCEx_MultiModeConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000692:	f000 fbf5 	bl	8000e80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_ADC1_Init+0xec>)
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069a:	2306      	movs	r3, #6
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a2:	237f      	movs	r3, #127	; 0x7f
 80006a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a6:	2304      	movs	r3, #4
 80006a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <MX_ADC1_Init+0xe8>)
 80006b4:	f001 fe92 	bl	80023dc <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006be:	f000 fbdf 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	3730      	adds	r7, #48	; 0x30
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000090 	.word	0x20000090
 80006d0:	04300002 	.word	0x04300002

080006d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b09e      	sub	sp, #120	; 0x78
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	2254      	movs	r2, #84	; 0x54
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f008 f96d 	bl	80089d4 <memset>
  if(adcHandle->Instance==ADC1)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000702:	d134      	bne.n	800076e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000704:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000708:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800070a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800070e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	4618      	mov	r0, r3
 8000716:	f003 fd99 	bl	800424c <HAL_RCCEx_PeriphCLKConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000720:	f000 fbae 	bl	8000e80 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <HAL_ADC_MspInit+0xa4>)
 8000726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000728:	4a13      	ldr	r2, [pc, #76]	; (8000778 <HAL_ADC_MspInit+0xa4>)
 800072a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800072e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <HAL_ADC_MspInit+0xa4>)
 8000732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <HAL_ADC_MspInit+0xa4>)
 800073e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <HAL_ADC_MspInit+0xa4>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <HAL_ADC_MspInit+0xa4>)
 800074a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_CURRENT_Pin;
 8000754:	2301      	movs	r3, #1
 8000756:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000758:	2303      	movs	r3, #3
 800075a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(ADC_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000764:	4619      	mov	r1, r3
 8000766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076a:	f002 fda7 	bl	80032bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800076e:	bf00      	nop
 8000770:	3778      	adds	r7, #120	; 0x78
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000

0800077c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	4b33      	ldr	r3, [pc, #204]	; (8000860 <MX_GPIO_Init+0xe4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a32      	ldr	r2, [pc, #200]	; (8000860 <MX_GPIO_Init+0xe4>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b30      	ldr	r3, [pc, #192]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a2c      	ldr	r2, [pc, #176]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007b0:	f043 0320 	orr.w	r3, r3, #32
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0320 	and.w	r3, r3, #32
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b27      	ldr	r3, [pc, #156]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a26      	ldr	r2, [pc, #152]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2108      	movs	r1, #8
 80007de:	4821      	ldr	r0, [pc, #132]	; (8000864 <MX_GPIO_Init+0xe8>)
 80007e0:	f002 feee 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2120      	movs	r1, #32
 80007e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ec:	f002 fee8 	bl	80035c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80007f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4619      	mov	r1, r3
 8000806:	4817      	ldr	r0, [pc, #92]	; (8000864 <MX_GPIO_Init+0xe8>)
 8000808:	f002 fd58 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 800080c:	2308      	movs	r3, #8
 800080e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	4810      	ldr	r0, [pc, #64]	; (8000864 <MX_GPIO_Init+0xe8>)
 8000824:	f002 fd4a 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000828:	2320      	movs	r3, #32
 800082a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	4619      	mov	r1, r3
 800083e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000842:	f002 fd3b 	bl	80032bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2028      	movs	r0, #40	; 0x28
 800084c:	f002 fc4e 	bl	80030ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000850:	2028      	movs	r0, #40	; 0x28
 8000852:	f002 fc65 	bl	8003120 <HAL_NVIC_EnableIRQ>

}
 8000856:	bf00      	nop
 8000858:	3720      	adds	r7, #32
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000
 8000864:	48000800 	.word	0x48000800

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b0a2      	sub	sp, #136	; 0x88
 800086c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char	 	cmd[CMD_BUFFER_SIZE];		///< Initializes a cmd list to store the characters sent via shell
	int 		idxCmd;						///< Initializes an index used to parse through the shell characters
	char* 		argv[MAX_ARGS];				///< Initializes a variable to hold the arguments of a function
	int		 	argc = 0;					///< Initializes a variable to hold the argc value
 800086e:	2300      	movs	r3, #0
 8000870:	67bb      	str	r3, [r7, #120]	; 0x78
	char*		token;						///< Initializes a variable to hold the tokens from strtok function
	int 		newCmdReady = 0;			///< Initializes a variable to verify if shell has finished user input
 8000872:	2300      	movs	r3, #0
 8000874:	673b      	str	r3, [r7, #112]	; 0x70
	int		speed = 0;						///< Initializes a variable to hold the speed value
 8000876:	2300      	movs	r3, #0
 8000878:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint16_t  CCR1 = 5312;					///< Initializes a variable to hold the value in the compare register channel 1
 800087a:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 800087e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	uint16_t  CCR2 = 5312;					///< Initializes a variable to hold the value in the compare register channel 2
 8000882:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 8000886:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

	uint16_t AD_RES = 0;					///< Initializes a variable to hold the value form the ADC conversion for the current
 800088a:	2300      	movs	r3, #0
 800088c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000890:	f000 ff61 	bl	8001756 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000894:	f000 f9fc 	bl	8000c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000898:	f7ff ff70 	bl	800077c <MX_GPIO_Init>
  MX_TIM1_Init();
 800089c:	f000 fcb6 	bl	800120c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80008a0:	f000 fe84 	bl	80015ac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008a4:	f7ff fe9e 	bl	80005e4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80008a8:	f000 fd6e 	bl	8001388 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008ac:	2100      	movs	r1, #0
 80008ae:	48a6      	ldr	r0, [pc, #664]	; (8000b48 <main+0x2e0>)
 80008b0:	f004 f84c 	bl	800494c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80008b4:	2104      	movs	r1, #4
 80008b6:	48a4      	ldr	r0, [pc, #656]	; (8000b48 <main+0x2e0>)
 80008b8:	f004 f848 	bl	800494c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80008bc:	2100      	movs	r1, #0
 80008be:	48a2      	ldr	r0, [pc, #648]	; (8000b48 <main+0x2e0>)
 80008c0:	f005 fd6e 	bl	80063a0 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80008c4:	2104      	movs	r1, #4
 80008c6:	48a0      	ldr	r0, [pc, #640]	; (8000b48 <main+0x2e0>)
 80008c8:	f005 fd6a 	bl	80063a0 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80008cc:	2100      	movs	r1, #0
 80008ce:	489f      	ldr	r0, [pc, #636]	; (8000b4c <main+0x2e4>)
 80008d0:	f004 f9b0 	bl	8004c34 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80008d4:	2104      	movs	r1, #4
 80008d6:	489d      	ldr	r0, [pc, #628]	; (8000b4c <main+0x2e4>)
 80008d8:	f004 f9ac 	bl	8004c34 <HAL_TIM_IC_Start_IT>

	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 80008dc:	463b      	mov	r3, r7
 80008de:	2224      	movs	r2, #36	; 0x24
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f008 f876 	bl	80089d4 <memset>
	memset(cmd,NULL,CMD_BUFFER_SIZE*sizeof(char));
 80008e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ec:	2240      	movs	r2, #64	; 0x40
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f008 f86f 	bl	80089d4 <memset>
 80008f6:	4b96      	ldr	r3, [pc, #600]	; (8000b50 <main+0x2e8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 80008fc:	2240      	movs	r2, #64	; 0x40
 80008fe:	2100      	movs	r1, #0
 8000900:	4894      	ldr	r0, [pc, #592]	; (8000b54 <main+0x2ec>)
 8000902:	f008 f867 	bl	80089d4 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000906:	2201      	movs	r2, #1
 8000908:	4991      	ldr	r1, [pc, #580]	; (8000b50 <main+0x2e8>)
 800090a:	4893      	ldr	r0, [pc, #588]	; (8000b58 <main+0x2f0>)
 800090c:	f006 f8a4 	bl	8006a58 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8000910:	200a      	movs	r0, #10
 8000912:	f000 ff57 	bl	80017c4 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	2266      	movs	r2, #102	; 0x66
 800091c:	498f      	ldr	r1, [pc, #572]	; (8000b5c <main+0x2f4>)
 800091e:	488e      	ldr	r0, [pc, #568]	; (8000b58 <main+0x2f0>)
 8000920:	f006 f803 	bl	800692a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	2218      	movs	r2, #24
 800092a:	498d      	ldr	r1, [pc, #564]	; (8000b60 <main+0x2f8>)
 800092c:	488a      	ldr	r0, [pc, #552]	; (8000b58 <main+0x2f0>)
 800092e:	f005 fffc 	bl	800692a <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 2
		if(uartRxReceived){
 8000932:	4b8c      	ldr	r3, [pc, #560]	; (8000b64 <main+0x2fc>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d058      	beq.n	80009ec <main+0x184>
			switch(uartRxBuffer[0]){
 800093a:	4b85      	ldr	r3, [pc, #532]	; (8000b50 <main+0x2e8>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b0d      	cmp	r3, #13
 8000940:	d002      	beq.n	8000948 <main+0xe0>
 8000942:	2b7f      	cmp	r3, #127	; 0x7f
 8000944:	d02f      	beq.n	80009a6 <main+0x13e>
 8000946:	e03e      	b.n	80009c6 <main+0x15e>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newLine, sizeof(newLine), HAL_MAX_DELAY);
 8000948:	f04f 33ff 	mov.w	r3, #4294967295
 800094c:	2203      	movs	r2, #3
 800094e:	4986      	ldr	r1, [pc, #536]	; (8000b68 <main+0x300>)
 8000950:	4881      	ldr	r0, [pc, #516]	; (8000b58 <main+0x2f0>)
 8000952:	f005 ffea 	bl	800692a <HAL_UART_Transmit>
				cmd[idxCmd] = '\0';
 8000956:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800095a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800095c:	4413      	add	r3, r2
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
				argc = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	67bb      	str	r3, [r7, #120]	; 0x78
				token = strtok(cmd, separators);
 8000966:	4b81      	ldr	r3, [pc, #516]	; (8000b6c <main+0x304>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	4611      	mov	r1, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f008 f857 	bl	8008a24 <strtok>
 8000976:	6778      	str	r0, [r7, #116]	; 0x74
				while(token!=NULL){
 8000978:	e00d      	b.n	8000996 <main+0x12e>
					argv[argc++] = token;
 800097a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	67ba      	str	r2, [r7, #120]	; 0x78
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	3380      	adds	r3, #128	; 0x80
 8000984:	443b      	add	r3, r7
 8000986:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000988:	f843 2c80 	str.w	r2, [r3, #-128]
					token = strtok(NULL, " ");
 800098c:	4978      	ldr	r1, [pc, #480]	; (8000b70 <main+0x308>)
 800098e:	2000      	movs	r0, #0
 8000990:	f008 f848 	bl	8008a24 <strtok>
 8000994:	6778      	str	r0, [r7, #116]	; 0x74
				while(token!=NULL){
 8000996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1ee      	bne.n	800097a <main+0x112>
				}

				idxCmd = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	67fb      	str	r3, [r7, #124]	; 0x7c
				newCmdReady = 1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	673b      	str	r3, [r7, #112]	; 0x70
				break;
 80009a4:	e01f      	b.n	80009e6 <main+0x17e>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmd[idxCmd--] = '\0';
 80009a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80009a8:	1e5a      	subs	r2, r3, #1
 80009aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80009ac:	3380      	adds	r3, #128	; 0x80
 80009ae:	443b      	add	r3, r7
 80009b0:	2200      	movs	r2, #0
 80009b2:	f803 2c5c 	strb.w	r2, [r3, #-92]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	2201      	movs	r2, #1
 80009bc:	4964      	ldr	r1, [pc, #400]	; (8000b50 <main+0x2e8>)
 80009be:	4866      	ldr	r0, [pc, #408]	; (8000b58 <main+0x2f0>)
 80009c0:	f005 ffb3 	bl	800692a <HAL_UART_Transmit>
				break;
 80009c4:	e00f      	b.n	80009e6 <main+0x17e>
				// Nouveau caractère
			default:
				cmd[idxCmd++] = uartRxBuffer[0];
 80009c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80009cc:	4a60      	ldr	r2, [pc, #384]	; (8000b50 <main+0x2e8>)
 80009ce:	7812      	ldrb	r2, [r2, #0]
 80009d0:	3380      	adds	r3, #128	; 0x80
 80009d2:	443b      	add	r3, r7
 80009d4:	f803 2c5c 	strb.w	r2, [r3, #-92]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
 80009dc:	2201      	movs	r2, #1
 80009de:	495c      	ldr	r1, [pc, #368]	; (8000b50 <main+0x2e8>)
 80009e0:	485d      	ldr	r0, [pc, #372]	; (8000b58 <main+0x2f0>)
 80009e2:	f005 ffa2 	bl	800692a <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 80009e6:	4b5f      	ldr	r3, [pc, #380]	; (8000b64 <main+0x2fc>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
		}


		if(newCmdReady){
 80009ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 8135 	beq.w	8000c5e <main+0x3f6>
			// Traiter l'instruction correspondante
			if(strcmp(argv[0],"set")==0){
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	495f      	ldr	r1, [pc, #380]	; (8000b74 <main+0x30c>)
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fc11 	bl	8000220 <strcmp>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d12d      	bne.n	8000a60 <main+0x1f8>
				if(strcmp(argv[1],"PA5")==0){
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	495c      	ldr	r1, [pc, #368]	; (8000b78 <main+0x310>)
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fc09 	bl	8000220 <strcmp>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d11d      	bne.n	8000a50 <main+0x1e8>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f007 ffae 	bl	8008978 <atoi>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	461a      	mov	r2, r3
 8000a22:	2120      	movs	r1, #32
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f002 fdca 	bl	80035c0 <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f007 ffa2 	bl	8008978 <atoi>
 8000a34:	4603      	mov	r3, r0
 8000a36:	461a      	mov	r2, r3
 8000a38:	4950      	ldr	r1, [pc, #320]	; (8000b7c <main+0x314>)
 8000a3a:	4846      	ldr	r0, [pc, #280]	; (8000b54 <main+0x2ec>)
 8000a3c:	f007 ffd2 	bl	80089e4 <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295
 8000a44:	2220      	movs	r2, #32
 8000a46:	4943      	ldr	r1, [pc, #268]	; (8000b54 <main+0x2ec>)
 8000a48:	4843      	ldr	r0, [pc, #268]	; (8000b58 <main+0x2f0>)
 8000a4a:	f005 ff6e 	bl	800692a <HAL_UART_Transmit>
 8000a4e:	e0fd      	b.n	8000c4c <main+0x3e4>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000a50:	f04f 33ff 	mov.w	r3, #4294967295
 8000a54:	2214      	movs	r2, #20
 8000a56:	494a      	ldr	r1, [pc, #296]	; (8000b80 <main+0x318>)
 8000a58:	483f      	ldr	r0, [pc, #252]	; (8000b58 <main+0x2f0>)
 8000a5a:	f005 ff66 	bl	800692a <HAL_UART_Transmit>
 8000a5e:	e0f5      	b.n	8000c4c <main+0x3e4>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	4948      	ldr	r1, [pc, #288]	; (8000b84 <main+0x31c>)
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fbdb 	bl	8000220 <strcmp>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d128      	bne.n	8000ac2 <main+0x25a>
			{
				// Read The ADC Conversion Result & Map It To PWM DutyCycle
				AD_RES = ((3300*HAL_ADC_GetValue(&hadc1)/4096)-2500)*12;
 8000a70:	4845      	ldr	r0, [pc, #276]	; (8000b88 <main+0x320>)
 8000a72:	f001 fca5 	bl	80023c0 <HAL_ADC_GetValue>
 8000a76:	4603      	mov	r3, r0
 8000a78:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000a7c:	fb02 f303 	mul.w	r3, r2, r3
 8000a80:	0b1b      	lsrs	r3, r3, #12
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	461a      	mov	r2, r3
 8000a86:	0052      	lsls	r2, r2, #1
 8000a88:	4413      	add	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000a92:	3b30      	subs	r3, #48	; 0x30
 8000a94:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				sprintf(uartTxBuffer,"ADC = %d | Freq = %d \r\n",AD_RES,(int) frequency);
 8000a98:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8000a9c:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <main+0x324>)
 8000a9e:	edd3 7a00 	vldr	s15, [r3]
 8000aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aa6:	ee17 3a90 	vmov	r3, s15
 8000aaa:	4939      	ldr	r1, [pc, #228]	; (8000b90 <main+0x328>)
 8000aac:	4829      	ldr	r0, [pc, #164]	; (8000b54 <main+0x2ec>)
 8000aae:	f007 ff99 	bl	80089e4 <siprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	2240      	movs	r2, #64	; 0x40
 8000ab8:	4926      	ldr	r1, [pc, #152]	; (8000b54 <main+0x2ec>)
 8000aba:	4827      	ldr	r0, [pc, #156]	; (8000b58 <main+0x2f0>)
 8000abc:	f005 ff35 	bl	800692a <HAL_UART_Transmit>
 8000ac0:	e0c4      	b.n	8000c4c <main+0x3e4>

			}
			else if(strcmp(argv[0],"help")==0)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	4933      	ldr	r1, [pc, #204]	; (8000b94 <main+0x32c>)
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fbaa 	bl	8000220 <strcmp>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d108      	bne.n	8000ae4 <main+0x27c>
			{
				HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad6:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8000ada:	492f      	ldr	r1, [pc, #188]	; (8000b98 <main+0x330>)
 8000adc:	481e      	ldr	r0, [pc, #120]	; (8000b58 <main+0x2f0>)
 8000ade:	f005 ff24 	bl	800692a <HAL_UART_Transmit>
 8000ae2:	e0b3      	b.n	8000c4c <main+0x3e4>
			}
			else if(strcmp(argv[0],"pinout")==0)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	492d      	ldr	r1, [pc, #180]	; (8000b9c <main+0x334>)
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fb99 	bl	8000220 <strcmp>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d107      	bne.n	8000b04 <main+0x29c>
			{
				HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 8000af4:	f04f 33ff 	mov.w	r3, #4294967295
 8000af8:	22d0      	movs	r2, #208	; 0xd0
 8000afa:	4929      	ldr	r1, [pc, #164]	; (8000ba0 <main+0x338>)
 8000afc:	4816      	ldr	r0, [pc, #88]	; (8000b58 <main+0x2f0>)
 8000afe:	f005 ff14 	bl	800692a <HAL_UART_Transmit>
 8000b02:	e0a3      	b.n	8000c4c <main+0x3e4>
			}
			else if(strcmp(argv[0],"start")==0)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	4927      	ldr	r1, [pc, #156]	; (8000ba4 <main+0x33c>)
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fb89 	bl	8000220 <strcmp>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d109      	bne.n	8000b28 <main+0x2c0>
			{
				powerUpSequence();
 8000b14:	f000 f91c 	bl	8000d50 <powerUpSequence>
				HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1c:	2232      	movs	r2, #50	; 0x32
 8000b1e:	4922      	ldr	r1, [pc, #136]	; (8000ba8 <main+0x340>)
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <main+0x2f0>)
 8000b22:	f005 ff02 	bl	800692a <HAL_UART_Transmit>
 8000b26:	e091      	b.n	8000c4c <main+0x3e4>
			}
			else if(strcmp(argv[0],"stop")==0)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	4920      	ldr	r1, [pc, #128]	; (8000bac <main+0x344>)
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fb77 	bl	8000220 <strcmp>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d13d      	bne.n	8000bb4 <main+0x34c>
			{
				HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3c:	2233      	movs	r2, #51	; 0x33
 8000b3e:	491c      	ldr	r1, [pc, #112]	; (8000bb0 <main+0x348>)
 8000b40:	4805      	ldr	r0, [pc, #20]	; (8000b58 <main+0x2f0>)
 8000b42:	f005 fef2 	bl	800692a <HAL_UART_Transmit>
 8000b46:	e081      	b.n	8000c4c <main+0x3e4>
 8000b48:	200001ac 	.word	0x200001ac
 8000b4c:	200001f8 	.word	0x200001f8
 8000b50:	20000100 	.word	0x20000100
 8000b54:	20000104 	.word	0x20000104
 8000b58:	20000244 	.word	0x20000244
 8000b5c:	0800a02c 	.word	0x0800a02c
 8000b60:	0800a014 	.word	0x0800a014
 8000b64:	200000fc 	.word	0x200000fc
 8000b68:	0800a094 	.word	0x0800a094
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	08009f7c 	.word	0x08009f7c
 8000b74:	08009f80 	.word	0x08009f80
 8000b78:	08009f84 	.word	0x08009f84
 8000b7c:	08009f88 	.word	0x08009f88
 8000b80:	0800a098 	.word	0x0800a098
 8000b84:	08009fa4 	.word	0x08009fa4
 8000b88:	20000090 	.word	0x20000090
 8000b8c:	20000158 	.word	0x20000158
 8000b90:	08009fa8 	.word	0x08009fa8
 8000b94:	08009fc0 	.word	0x08009fc0
 8000b98:	0800a0ac 	.word	0x0800a0ac
 8000b9c:	08009fc8 	.word	0x08009fc8
 8000ba0:	0800a1fc 	.word	0x0800a1fc
 8000ba4:	08009fd0 	.word	0x08009fd0
 8000ba8:	0800a2cc 	.word	0x0800a2cc
 8000bac:	08009fd8 	.word	0x08009fd8
 8000bb0:	0800a300 	.word	0x0800a300
			}
			else if(strcmp(argv[0],"speed")==0){
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	492e      	ldr	r1, [pc, #184]	; (8000c70 <main+0x408>)
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fb31 	bl	8000220 <strcmp>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d13c      	bne.n	8000c3e <main+0x3d6>
				speed = atoi(argv[1]);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f007 fed6 	bl	8008978 <atoi>
 8000bcc:	66f8      	str	r0, [r7, #108]	; 0x6c
				if (speed > SPEED_MAX)	speed = SPEED_MAX;
 8000bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bd4:	dd02      	ble.n	8000bdc <main+0x374>
 8000bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bda:	66fb      	str	r3, [r7, #108]	; 0x6c
				CCR1=5312*(SPEED_MAX+speed)/(2*SPEED_MAX);
 8000bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bde:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000be2:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8000be6:	fb02 f303 	mul.w	r3, r2, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	da01      	bge.n	8000bf2 <main+0x38a>
 8000bee:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000bf2:	129b      	asrs	r3, r3, #10
 8000bf4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
				CCR2=5312-CCR1;
 8000bf8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8000bfc:	f5c3 53a6 	rsb	r3, r3, #5312	; 0x14c0
 8000c00:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,CCR1);
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <main+0x40c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8000c0c:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,CCR2);
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <main+0x40c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8000c16:	639a      	str	r2, [r3, #56]	; 0x38
				sprintf(uartTxBuffer,"Speed set to : %d | CCR1 = %d | CCR2= %d \r\n",speed,CCR1,CCR2);
 8000c18:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8000c1c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	4613      	mov	r3, r2
 8000c24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000c26:	4914      	ldr	r1, [pc, #80]	; (8000c78 <main+0x410>)
 8000c28:	4814      	ldr	r0, [pc, #80]	; (8000c7c <main+0x414>)
 8000c2a:	f007 fedb 	bl	80089e4 <siprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	2240      	movs	r2, #64	; 0x40
 8000c34:	4911      	ldr	r1, [pc, #68]	; (8000c7c <main+0x414>)
 8000c36:	4812      	ldr	r0, [pc, #72]	; (8000c80 <main+0x418>)
 8000c38:	f005 fe77 	bl	800692a <HAL_UART_Transmit>
 8000c3c:	e006      	b.n	8000c4c <main+0x3e4>
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	2214      	movs	r2, #20
 8000c44:	490f      	ldr	r1, [pc, #60]	; (8000c84 <main+0x41c>)
 8000c46:	480e      	ldr	r0, [pc, #56]	; (8000c80 <main+0x418>)
 8000c48:	f005 fe6f 	bl	800692a <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c50:	2218      	movs	r2, #24
 8000c52:	490d      	ldr	r1, [pc, #52]	; (8000c88 <main+0x420>)
 8000c54:	480a      	ldr	r0, [pc, #40]	; (8000c80 <main+0x418>)
 8000c56:	f005 fe68 	bl	800692a <HAL_UART_Transmit>
			newCmdReady = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	673b      	str	r3, [r7, #112]	; 0x70
			if
		}
		*/

		// Start ADC Conversion
		HAL_ADC_Start(&hadc1);
 8000c5e:	480b      	ldr	r0, [pc, #44]	; (8000c8c <main+0x424>)
 8000c60:	f001 f9c4 	bl	8001fec <HAL_ADC_Start>
		// Poll ADC1 Perihperal & TimeOut = 1mSec
		HAL_ADC_PollForConversion(&hadc1, 100);
 8000c64:	2164      	movs	r1, #100	; 0x64
 8000c66:	4809      	ldr	r0, [pc, #36]	; (8000c8c <main+0x424>)
 8000c68:	f001 faa4 	bl	80021b4 <HAL_ADC_PollForConversion>
		if(uartRxReceived){
 8000c6c:	e661      	b.n	8000932 <main+0xca>
 8000c6e:	bf00      	nop
 8000c70:	08009fe0 	.word	0x08009fe0
 8000c74:	200001ac 	.word	0x200001ac
 8000c78:	08009fe8 	.word	0x08009fe8
 8000c7c:	20000104 	.word	0x20000104
 8000c80:	20000244 	.word	0x20000244
 8000c84:	0800a098 	.word	0x0800a098
 8000c88:	0800a014 	.word	0x0800a014
 8000c8c:	20000090 	.word	0x20000090

08000c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b094      	sub	sp, #80	; 0x50
 8000c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c96:	f107 0318 	add.w	r3, r7, #24
 8000c9a:	2238      	movs	r2, #56	; 0x38
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f007 fe98 	bl	80089d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f002 fcc0 	bl	8003638 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000cca:	2306      	movs	r3, #6
 8000ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cce:	2355      	movs	r3, #85	; 0x55
 8000cd0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cde:	f107 0318 	add.w	r3, r7, #24
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f002 fd4c 	bl	8003780 <HAL_RCC_OscConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000cee:	f000 f8c7 	bl	8000e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf2:	230f      	movs	r3, #15
 8000cf4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2104      	movs	r1, #4
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f003 f850 	bl	8003db0 <HAL_RCC_ClockConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d16:	f000 f8b3 	bl	8000e80 <Error_Handler>
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	3750      	adds	r7, #80	; 0x50
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <HAL_UART_RxCpltCallback+0x20>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000d32:	2201      	movs	r2, #1
 8000d34:	4904      	ldr	r1, [pc, #16]	; (8000d48 <HAL_UART_RxCpltCallback+0x24>)
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <HAL_UART_RxCpltCallback+0x28>)
 8000d38:	f005 fe8e 	bl	8006a58 <HAL_UART_Receive_IT>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200000fc 	.word	0x200000fc
 8000d48:	20000100 	.word	0x20000100
 8000d4c:	20000244 	.word	0x20000244

08000d50 <powerUpSequence>:
/**
 * Sends the required sequence to power up the motor
 * @param[in]  None
 * @param[out] None
 */
void powerUpSequence (void){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2108      	movs	r1, #8
 8000d58:	4806      	ldr	r0, [pc, #24]	; (8000d74 <powerUpSequence+0x24>)
 8000d5a:	f002 fc31 	bl	80035c0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f000 fd30 	bl	80017c4 <HAL_Delay>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2108      	movs	r1, #8
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <powerUpSequence+0x24>)
 8000d6a:	f002 fc29 	bl	80035c0 <HAL_GPIO_WritePin>
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	48000800 	.word	0x48000800

08000d78 <HAL_TIM_IC_CaptureCallback>:
	}
}
*/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	7f1b      	ldrb	r3, [r3, #28]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d148      	bne.n	8000e1a <HAL_TIM_IC_CaptureCallback+0xa2>
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
 8000d88:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d10a      	bne.n	8000da6 <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000d90:	2100      	movs	r1, #0
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f004 fce4 	bl	8005760 <HAL_TIM_ReadCapturedValue>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4a2a      	ldr	r2, [pc, #168]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000d9c:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000d9e:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	601a      	str	r2, [r3, #0]
			else   // If the first rising edge is captured, now we will capture the second edge
			{
				Is_First_Captured_2 = 0; // set it back to false
			}
		}
}
 8000da4:	e048      	b.n	8000e38 <HAL_TIM_IC_CaptureCallback+0xc0>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000da6:	2100      	movs	r1, #0
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f004 fcd9 	bl	8005760 <HAL_TIM_ReadCapturedValue>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4a25      	ldr	r2, [pc, #148]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000db2:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 8000db4:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d907      	bls.n	8000dd0 <HAL_TIM_IC_CaptureCallback+0x58>
				Difference = IC_Val2-IC_Val1;
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	4a20      	ldr	r2, [pc, #128]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e00d      	b.n	8000dec <HAL_TIM_IC_CaptureCallback+0x74>
			else if (IC_Val1 > IC_Val2)
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d907      	bls.n	8000dec <HAL_TIM_IC_CaptureCallback+0x74>
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	3b01      	subs	r3, #1
 8000de8:	4a18      	ldr	r2, [pc, #96]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000dea:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000dee:	60fb      	str	r3, [r7, #12]
			frequency = refClock/Difference;
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	ee07 3a90 	vmov	s15, r3
 8000df8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dfc:	edd7 6a03 	vldr	s13, [r7, #12]
 8000e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000e06:	edc3 7a00 	vstr	s15, [r3]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
}
 8000e18:	e00e      	b.n	8000e38 <HAL_TIM_IC_CaptureCallback+0xc0>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7f1b      	ldrb	r3, [r3, #28]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d10a      	bne.n	8000e38 <HAL_TIM_IC_CaptureCallback+0xc0>
			if (Is_First_Captured_2==0) // if the first rising edge is not captured
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d103      	bne.n	8000e32 <HAL_TIM_IC_CaptureCallback+0xba>
				Is_First_Captured_2 = 1;  // set the first captured as true
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]
}
 8000e30:	e002      	b.n	8000e38 <HAL_TIM_IC_CaptureCallback+0xc0>
				Is_First_Captured_2 = 0; // set it back to false
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000150 	.word	0x20000150
 8000e44:	20000144 	.word	0x20000144
 8000e48:	20000148 	.word	0x20000148
 8000e4c:	2000014c 	.word	0x2000014c
 8000e50:	4d221fe8 	.word	0x4d221fe8
 8000e54:	20000158 	.word	0x20000158
 8000e58:	20000154 	.word	0x20000154

08000e5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e6e:	f000 fc8b 	bl	8001788 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40001000 	.word	0x40001000

08000e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
}
 8000e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e88:	e7fe      	b.n	8000e88 <Error_Handler+0x8>
	...

08000e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_MspInit+0x44>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	; 0x30
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <HAL_InitTick+0xcc>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	4a2c      	ldr	r2, [pc, #176]	; (8000fa0 <HAL_InitTick+0xcc>)
 8000ef0:	f043 0310 	orr.w	r3, r3, #16
 8000ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <HAL_InitTick+0xcc>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f02:	f107 020c 	add.w	r2, r7, #12
 8000f06:	f107 0310 	add.w	r3, r7, #16
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f003 f925 	bl	800415c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f12:	f003 f8f7 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
 8000f16:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1a:	4a22      	ldr	r2, [pc, #136]	; (8000fa4 <HAL_InitTick+0xd0>)
 8000f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f20:	0c9b      	lsrs	r3, r3, #18
 8000f22:	3b01      	subs	r3, #1
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <HAL_InitTick+0xd4>)
 8000f28:	4a20      	ldr	r2, [pc, #128]	; (8000fac <HAL_InitTick+0xd8>)
 8000f2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <HAL_InitTick+0xd4>)
 8000f2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f32:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f34:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <HAL_InitTick+0xd4>)
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <HAL_InitTick+0xd4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f40:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <HAL_InitTick+0xd4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000f46:	4818      	ldr	r0, [pc, #96]	; (8000fa8 <HAL_InitTick+0xd4>)
 8000f48:	f003 fbce 	bl	80046e8 <HAL_TIM_Base_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d11b      	bne.n	8000f92 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f5a:	4813      	ldr	r0, [pc, #76]	; (8000fa8 <HAL_InitTick+0xd4>)
 8000f5c:	f003 fc1c 	bl	8004798 <HAL_TIM_Base_Start_IT>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d111      	bne.n	8000f92 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f6e:	2036      	movs	r0, #54	; 0x36
 8000f70:	f002 f8d6 	bl	8003120 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b0f      	cmp	r3, #15
 8000f78:	d808      	bhi.n	8000f8c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	2036      	movs	r0, #54	; 0x36
 8000f80:	f002 f8b4 	bl	80030ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f84:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <HAL_InitTick+0xdc>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e002      	b.n	8000f92 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3730      	adds	r7, #48	; 0x30
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	431bde83 	.word	0x431bde83
 8000fa8:	2000015c 	.word	0x2000015c
 8000fac:	40001000 	.word	0x40001000
 8000fb0:	20000008 	.word	0x20000008

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <NMI_Handler+0x4>

08000fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <TIM2_IRQHandler+0x10>)
 8001012:	f003 ff5f 	bl	8004ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200001f8 	.word	0x200001f8

08001020 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <USART2_IRQHandler+0x10>)
 8001026:	f005 fd6d 	bl	8006b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000244 	.word	0x20000244

08001034 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001038:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800103c:	f002 fad8 	bl	80035f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
	powerUpSequence();
 8001040:	f7ff fe86 	bl	8000d50 <powerUpSequence>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <TIM6_DAC_IRQHandler+0x10>)
 800104e:	f003 ff41 	bl	8004ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000015c 	.word	0x2000015c

0800105c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
	return 1;
 8001060:	2301      	movs	r3, #1
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <_kill>:

int _kill(int pid, int sig)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001076:	f007 fc83 	bl	8008980 <__errno>
 800107a:	4603      	mov	r3, r0
 800107c:	2216      	movs	r2, #22
 800107e:	601a      	str	r2, [r3, #0]
	return -1;
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_exit>:

void _exit (int status)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001094:	f04f 31ff 	mov.w	r1, #4294967295
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ffe7 	bl	800106c <_kill>
	while (1) {}		/* Make sure we hang here */
 800109e:	e7fe      	b.n	800109e <_exit+0x12>

080010a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	e00a      	b.n	80010c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010b2:	f3af 8000 	nop.w
 80010b6:	4601      	mov	r1, r0
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	60ba      	str	r2, [r7, #8]
 80010be:	b2ca      	uxtb	r2, r1
 80010c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dbf0      	blt.n	80010b2 <_read+0x12>
	}

return len;
 80010d0:	687b      	ldr	r3, [r7, #4]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	e009      	b.n	8001100 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	60ba      	str	r2, [r7, #8]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	429a      	cmp	r2, r3
 8001106:	dbf1      	blt.n	80010ec <_write+0x12>
	}
	return len;
 8001108:	687b      	ldr	r3, [r7, #4]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <_close>:

int _close(int file)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
	return -1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800113a:	605a      	str	r2, [r3, #4]
	return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_isatty>:

int _isatty(int file)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	return 1;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
	return 0;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001184:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <_sbrk+0x5c>)
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <_sbrk+0x60>)
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <_sbrk+0x64>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <_sbrk+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d207      	bcs.n	80011bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ac:	f007 fbe8 	bl	8008980 <__errno>
 80011b0:	4603      	mov	r3, r0
 80011b2:	220c      	movs	r2, #12
 80011b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	e009      	b.n	80011d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <_sbrk+0x64>)
 80011cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ce:	68fb      	ldr	r3, [r7, #12]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20020000 	.word	0x20020000
 80011dc:	00000400 	.word	0x00000400
 80011e0:	200001a8 	.word	0x200001a8
 80011e4:	200002e8 	.word	0x200002e8

080011e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <SystemInit+0x20>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <SystemInit+0x20>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b09c      	sub	sp, #112	; 0x70
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001212:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
 800123c:	615a      	str	r2, [r3, #20]
 800123e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2234      	movs	r2, #52	; 0x34
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f007 fbc4 	bl	80089d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800124c:	4b4c      	ldr	r3, [pc, #304]	; (8001380 <MX_TIM1_Init+0x174>)
 800124e:	4a4d      	ldr	r2, [pc, #308]	; (8001384 <MX_TIM1_Init+0x178>)
 8001250:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001252:	4b4b      	ldr	r3, [pc, #300]	; (8001380 <MX_TIM1_Init+0x174>)
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001258:	4b49      	ldr	r3, [pc, #292]	; (8001380 <MX_TIM1_Init+0x174>)
 800125a:	2220      	movs	r2, #32
 800125c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5312;
 800125e:	4b48      	ldr	r3, [pc, #288]	; (8001380 <MX_TIM1_Init+0x174>)
 8001260:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8001264:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001266:	4b46      	ldr	r3, [pc, #280]	; (8001380 <MX_TIM1_Init+0x174>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800126c:	4b44      	ldr	r3, [pc, #272]	; (8001380 <MX_TIM1_Init+0x174>)
 800126e:	2200      	movs	r2, #0
 8001270:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001272:	4b43      	ldr	r3, [pc, #268]	; (8001380 <MX_TIM1_Init+0x174>)
 8001274:	2280      	movs	r2, #128	; 0x80
 8001276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001278:	4841      	ldr	r0, [pc, #260]	; (8001380 <MX_TIM1_Init+0x174>)
 800127a:	f003 fa35 	bl	80046e8 <HAL_TIM_Base_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001284:	f7ff fdfc 	bl	8000e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800128e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001292:	4619      	mov	r1, r3
 8001294:	483a      	ldr	r0, [pc, #232]	; (8001380 <MX_TIM1_Init+0x174>)
 8001296:	f004 f94d 	bl	8005534 <HAL_TIM_ConfigClockSource>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80012a0:	f7ff fdee 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012a4:	4836      	ldr	r0, [pc, #216]	; (8001380 <MX_TIM1_Init+0x174>)
 80012a6:	f003 faef 	bl	8004888 <HAL_TIM_PWM_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012b0:	f7ff fde6 	bl	8000e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012c4:	4619      	mov	r1, r3
 80012c6:	482e      	ldr	r0, [pc, #184]	; (8001380 <MX_TIM1_Init+0x174>)
 80012c8:	f005 f92c 	bl	8006524 <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012d2:	f7ff fdd5 	bl	8000e80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d6:	2360      	movs	r3, #96	; 0x60
 80012d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2656;
 80012da:	f44f 6326 	mov.w	r3, #2656	; 0xa60
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e0:	2300      	movs	r3, #0
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012e4:	2300      	movs	r3, #0
 80012e6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012ec:	2300      	movs	r3, #0
 80012ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012f0:	2300      	movs	r3, #0
 80012f2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012f8:	2200      	movs	r2, #0
 80012fa:	4619      	mov	r1, r3
 80012fc:	4820      	ldr	r0, [pc, #128]	; (8001380 <MX_TIM1_Init+0x174>)
 80012fe:	f004 f805 	bl	800530c <HAL_TIM_PWM_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001308:	f7ff fdba 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800130c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001310:	2204      	movs	r2, #4
 8001312:	4619      	mov	r1, r3
 8001314:	481a      	ldr	r0, [pc, #104]	; (8001380 <MX_TIM1_Init+0x174>)
 8001316:	f003 fff9 	bl	800530c <HAL_TIM_PWM_ConfigChannel>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001320:	f7ff fdae 	bl	8000e80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 222;
 8001330:	23de      	movs	r3, #222	; 0xde
 8001332:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800134a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001354:	2300      	movs	r3, #0
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	4619      	mov	r1, r3
 8001360:	4807      	ldr	r0, [pc, #28]	; (8001380 <MX_TIM1_Init+0x174>)
 8001362:	f005 f975 	bl	8006650 <HAL_TIMEx_ConfigBreakDeadTime>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 800136c:	f7ff fd88 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001370:	4803      	ldr	r0, [pc, #12]	; (8001380 <MX_TIM1_Init+0x174>)
 8001372:	f000 f8e3 	bl	800153c <HAL_TIM_MspPostInit>

}
 8001376:	bf00      	nop
 8001378:	3770      	adds	r7, #112	; 0x70
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200001ac 	.word	0x200001ac
 8001384:	40012c00 	.word	0x40012c00

08001388 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	; 0x30
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138e:	f107 0320 	add.w	r3, r7, #32
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013b4:	4b31      	ldr	r3, [pc, #196]	; (800147c <MX_TIM2_Init+0xf4>)
 80013b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013bc:	4b2f      	ldr	r3, [pc, #188]	; (800147c <MX_TIM2_Init+0xf4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c2:	4b2e      	ldr	r3, [pc, #184]	; (800147c <MX_TIM2_Init+0xf4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80013c8:	4b2c      	ldr	r3, [pc, #176]	; (800147c <MX_TIM2_Init+0xf4>)
 80013ca:	f04f 32ff 	mov.w	r2, #4294967295
 80013ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d0:	4b2a      	ldr	r3, [pc, #168]	; (800147c <MX_TIM2_Init+0xf4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d6:	4b29      	ldr	r3, [pc, #164]	; (800147c <MX_TIM2_Init+0xf4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013dc:	4827      	ldr	r0, [pc, #156]	; (800147c <MX_TIM2_Init+0xf4>)
 80013de:	f003 f983 	bl	80046e8 <HAL_TIM_Base_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80013e8:	f7ff fd4a 	bl	8000e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	4619      	mov	r1, r3
 80013f8:	4820      	ldr	r0, [pc, #128]	; (800147c <MX_TIM2_Init+0xf4>)
 80013fa:	f004 f89b 	bl	8005534 <HAL_TIM_ConfigClockSource>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001404:	f7ff fd3c 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001408:	481c      	ldr	r0, [pc, #112]	; (800147c <MX_TIM2_Init+0xf4>)
 800140a:	f003 fbb1 	bl	8004b70 <HAL_TIM_IC_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001414:	f7ff fd34 	bl	8000e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	4815      	ldr	r0, [pc, #84]	; (800147c <MX_TIM2_Init+0xf4>)
 8001428:	f005 f87c 	bl	8006524 <HAL_TIMEx_MasterConfigSynchronization>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001432:	f7ff fd25 	bl	8000e80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800143a:	2301      	movs	r3, #1
 800143c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	480b      	ldr	r0, [pc, #44]	; (800147c <MX_TIM2_Init+0xf4>)
 800144e:	f003 fec0 	bl	80051d2 <HAL_TIM_IC_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001458:	f7ff fd12 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2204      	movs	r2, #4
 8001460:	4619      	mov	r1, r3
 8001462:	4806      	ldr	r0, [pc, #24]	; (800147c <MX_TIM2_Init+0xf4>)
 8001464:	f003 feb5 	bl	80051d2 <HAL_TIM_IC_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 800146e:	f7ff fd07 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	3730      	adds	r7, #48	; 0x30
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200001f8 	.word	0x200001f8

08001480 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a25      	ldr	r2, [pc, #148]	; (8001534 <HAL_TIM_Base_MspInit+0xb4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d10c      	bne.n	80014bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014a2:	4b25      	ldr	r3, [pc, #148]	; (8001538 <HAL_TIM_Base_MspInit+0xb8>)
 80014a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a6:	4a24      	ldr	r2, [pc, #144]	; (8001538 <HAL_TIM_Base_MspInit+0xb8>)
 80014a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014ac:	6613      	str	r3, [r2, #96]	; 0x60
 80014ae:	4b22      	ldr	r3, [pc, #136]	; (8001538 <HAL_TIM_Base_MspInit+0xb8>)
 80014b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014ba:	e036      	b.n	800152a <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c4:	d131      	bne.n	800152a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014c6:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <HAL_TIM_Base_MspInit+0xb8>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	4a1b      	ldr	r2, [pc, #108]	; (8001538 <HAL_TIM_Base_MspInit+0xb8>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6593      	str	r3, [r2, #88]	; 0x58
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_TIM_Base_MspInit+0xb8>)
 80014d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <HAL_TIM_Base_MspInit+0xb8>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	4a15      	ldr	r2, [pc, #84]	; (8001538 <HAL_TIM_Base_MspInit+0xb8>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <HAL_TIM_Base_MspInit+0xb8>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80014f6:	f248 0302 	movw	r3, #32770	; 0x8002
 80014fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001508:	2301      	movs	r3, #1
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001516:	f001 fed1 	bl	80032bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	201c      	movs	r0, #28
 8001520:	f001 fde4 	bl	80030ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001524:	201c      	movs	r0, #28
 8001526:	f001 fdfb 	bl	8003120 <HAL_NVIC_EnableIRQ>
}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40012c00 	.word	0x40012c00
 8001538:	40021000 	.word	0x40021000

0800153c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <HAL_TIM_MspPostInit+0x68>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d11d      	bne.n	800159a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_TIM_MspPostInit+0x6c>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	4a11      	ldr	r2, [pc, #68]	; (80015a8 <HAL_TIM_MspPostInit+0x6c>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_TIM_MspPostInit+0x6c>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001576:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800157a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001588:	2306      	movs	r3, #6
 800158a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	4619      	mov	r1, r3
 8001592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001596:	f001 fe91 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800159a:	bf00      	nop
 800159c:	3720      	adds	r7, #32
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40012c00 	.word	0x40012c00
 80015a8:	40021000 	.word	0x40021000

080015ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015b0:	4b22      	ldr	r3, [pc, #136]	; (800163c <MX_USART2_UART_Init+0x90>)
 80015b2:	4a23      	ldr	r2, [pc, #140]	; (8001640 <MX_USART2_UART_Init+0x94>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <MX_USART2_UART_Init+0x90>)
 80015b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <MX_USART2_UART_Init+0x90>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <MX_USART2_UART_Init+0x90>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <MX_USART2_UART_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <MX_USART2_UART_Init+0x90>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <MX_USART2_UART_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <MX_USART2_UART_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <MX_USART2_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_USART2_UART_Init+0x90>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <MX_USART2_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015f4:	4811      	ldr	r0, [pc, #68]	; (800163c <MX_USART2_UART_Init+0x90>)
 80015f6:	f005 f948 	bl	800688a <HAL_UART_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001600:	f7ff fc3e 	bl	8000e80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001604:	2100      	movs	r1, #0
 8001606:	480d      	ldr	r0, [pc, #52]	; (800163c <MX_USART2_UART_Init+0x90>)
 8001608:	f007 f8eb 	bl	80087e2 <HAL_UARTEx_SetTxFifoThreshold>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001612:	f7ff fc35 	bl	8000e80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001616:	2100      	movs	r1, #0
 8001618:	4808      	ldr	r0, [pc, #32]	; (800163c <MX_USART2_UART_Init+0x90>)
 800161a:	f007 f920 	bl	800885e <HAL_UARTEx_SetRxFifoThreshold>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001624:	f7ff fc2c 	bl	8000e80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <MX_USART2_UART_Init+0x90>)
 800162a:	f007 f8a1 	bl	8008770 <HAL_UARTEx_DisableFifoMode>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001634:	f7ff fc24 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000244 	.word	0x20000244
 8001640:	40004400 	.word	0x40004400

08001644 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b09e      	sub	sp, #120	; 0x78
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	2254      	movs	r2, #84	; 0x54
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f007 f9b5 	bl	80089d4 <memset>
  if(uartHandle->Instance==USART2)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a23      	ldr	r2, [pc, #140]	; (80016fc <HAL_UART_MspInit+0xb8>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d13e      	bne.n	80016f2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001674:	2302      	movs	r3, #2
 8001676:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	4618      	mov	r0, r3
 8001682:	f002 fde3 	bl	800424c <HAL_RCCEx_PeriphCLKConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800168c:	f7ff fbf8 	bl	8000e80 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_UART_MspInit+0xbc>)
 8001692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001694:	4a1a      	ldr	r2, [pc, #104]	; (8001700 <HAL_UART_MspInit+0xbc>)
 8001696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169a:	6593      	str	r3, [r2, #88]	; 0x58
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_UART_MspInit+0xbc>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_UART_MspInit+0xbc>)
 80016aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ac:	4a14      	ldr	r2, [pc, #80]	; (8001700 <HAL_UART_MspInit+0xbc>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_UART_MspInit+0xbc>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016c0:	230c      	movs	r3, #12
 80016c2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016d0:	2307      	movs	r3, #7
 80016d2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016d8:	4619      	mov	r1, r3
 80016da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016de:	f001 fded 	bl	80032bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	2026      	movs	r0, #38	; 0x26
 80016e8:	f001 fd00 	bl	80030ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016ec:	2026      	movs	r0, #38	; 0x26
 80016ee:	f001 fd17 	bl	8003120 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016f2:	bf00      	nop
 80016f4:	3778      	adds	r7, #120	; 0x78
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40004400 	.word	0x40004400
 8001700:	40021000 	.word	0x40021000

08001704 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001704:	480d      	ldr	r0, [pc, #52]	; (800173c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001706:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001708:	480d      	ldr	r0, [pc, #52]	; (8001740 <LoopForever+0x6>)
  ldr r1, =_edata
 800170a:	490e      	ldr	r1, [pc, #56]	; (8001744 <LoopForever+0xa>)
  ldr r2, =_sidata
 800170c:	4a0e      	ldr	r2, [pc, #56]	; (8001748 <LoopForever+0xe>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001710:	e002      	b.n	8001718 <LoopCopyDataInit>

08001712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001716:	3304      	adds	r3, #4

08001718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800171c:	d3f9      	bcc.n	8001712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171e:	4a0b      	ldr	r2, [pc, #44]	; (800174c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001720:	4c0b      	ldr	r4, [pc, #44]	; (8001750 <LoopForever+0x16>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001724:	e001      	b.n	800172a <LoopFillZerobss>

08001726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001728:	3204      	adds	r2, #4

0800172a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800172c:	d3fb      	bcc.n	8001726 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800172e:	f7ff fd5b 	bl	80011e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001732:	f007 f92b 	bl	800898c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001736:	f7ff f897 	bl	8000868 <main>

0800173a <LoopForever>:

LoopForever:
    b LoopForever
 800173a:	e7fe      	b.n	800173a <LoopForever>
  ldr   r0, =_estack
 800173c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001744:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001748:	0800a5cc 	.word	0x0800a5cc
  ldr r2, =_sbss
 800174c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001750:	200002e8 	.word	0x200002e8

08001754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001754:	e7fe      	b.n	8001754 <ADC1_2_IRQHandler>

08001756 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001760:	2003      	movs	r0, #3
 8001762:	f001 fcb8 	bl	80030d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001766:	200f      	movs	r0, #15
 8001768:	f7ff fbb4 	bl	8000ed4 <HAL_InitTick>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	71fb      	strb	r3, [r7, #7]
 8001776:	e001      	b.n	800177c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001778:	f7ff fb88 	bl	8000e8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800177c:	79fb      	ldrb	r3, [r7, #7]

}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_IncTick+0x1c>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_IncTick+0x20>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4413      	add	r3, r2
 8001796:	4a03      	ldr	r2, [pc, #12]	; (80017a4 <HAL_IncTick+0x1c>)
 8001798:	6013      	str	r3, [r2, #0]
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	200002d4 	.word	0x200002d4
 80017a8:	2000000c 	.word	0x2000000c

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	200002d4 	.word	0x200002d4

080017c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017cc:	f7ff ffee 	bl	80017ac <HAL_GetTick>
 80017d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017dc:	d004      	beq.n	80017e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_Delay+0x40>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4413      	add	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017e8:	bf00      	nop
 80017ea:	f7ff ffdf 	bl	80017ac <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d8f7      	bhi.n	80017ea <HAL_Delay+0x26>
  {
  }
}
 80017fa:	bf00      	nop
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2000000c 	.word	0x2000000c

08001808 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	609a      	str	r2, [r3, #8]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	609a      	str	r2, [r3, #8]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001870:	b480      	push	{r7}
 8001872:	b087      	sub	sp, #28
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3360      	adds	r3, #96	; 0x60
 8001882:	461a      	mov	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <LL_ADC_SetOffset+0x44>)
 8001892:	4013      	ands	r3, r2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	4313      	orrs	r3, r2
 80018a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	03fff000 	.word	0x03fff000

080018b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3360      	adds	r3, #96	; 0x60
 80018c6:	461a      	mov	r2, r3
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3360      	adds	r3, #96	; 0x60
 80018f4:	461a      	mov	r2, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	431a      	orrs	r2, r3
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800190e:	bf00      	nop
 8001910:	371c      	adds	r7, #28
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800191a:	b480      	push	{r7}
 800191c:	b087      	sub	sp, #28
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3360      	adds	r3, #96	; 0x60
 800192a:	461a      	mov	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	431a      	orrs	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001944:	bf00      	nop
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001950:	b480      	push	{r7}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3360      	adds	r3, #96	; 0x60
 8001960:	461a      	mov	r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	431a      	orrs	r2, r3
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800197a:	bf00      	nop
 800197c:	371c      	adds	r7, #28
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	615a      	str	r2, [r3, #20]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b087      	sub	sp, #28
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3330      	adds	r3, #48	; 0x30
 80019e2:	461a      	mov	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	0a1b      	lsrs	r3, r3, #8
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	4413      	add	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	211f      	movs	r1, #31
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	401a      	ands	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	0e9b      	lsrs	r3, r3, #26
 8001a0a:	f003 011f 	and.w	r1, r3, #31
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	f003 031f 	and.w	r3, r3, #31
 8001a14:	fa01 f303 	lsl.w	r3, r1, r3
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a1e:	bf00      	nop
 8001a20:	371c      	adds	r7, #28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b087      	sub	sp, #28
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3314      	adds	r3, #20
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	0e5b      	lsrs	r3, r3, #25
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	4413      	add	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	0d1b      	lsrs	r3, r3, #20
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2107      	movs	r1, #7
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	401a      	ands	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	0d1b      	lsrs	r3, r3, #20
 8001a64:	f003 031f 	and.w	r3, r3, #31
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a0f      	ldr	r2, [pc, #60]	; (8001acc <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d10a      	bne.n	8001aaa <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	401a      	ands	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	407f0000 	.word	0x407f0000

08001ad0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 031f 	and.w	r3, r3, #31
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6093      	str	r3, [r2, #8]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b40:	d101      	bne.n	8001b46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b90:	d101      	bne.n	8001b96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bb8:	f043 0201 	orr.w	r2, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d101      	bne.n	8001be4 <LL_ADC_IsEnabled+0x18>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <LL_ADC_IsEnabled+0x1a>
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c06:	f043 0204 	orr.w	r2, r3, #4
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d101      	bne.n	8001c32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d101      	bne.n	8001c58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b089      	sub	sp, #36	; 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e1af      	b.n	8001fe2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d109      	bne.n	8001ca4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7fe fd1f 	bl	80006d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff3f 	bl	8001b2c <LL_ADC_IsDeepPowerDownEnabled>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d004      	beq.n	8001cbe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff25 	bl	8001b08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ff5a 	bl	8001b7c <LL_ADC_IsInternalRegulatorEnabled>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d115      	bne.n	8001cfa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff ff3e 	bl	8001b54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cd8:	4b9f      	ldr	r3, [pc, #636]	; (8001f58 <HAL_ADC_Init+0x2f0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	099b      	lsrs	r3, r3, #6
 8001cde:	4a9f      	ldr	r2, [pc, #636]	; (8001f5c <HAL_ADC_Init+0x2f4>)
 8001ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce4:	099b      	lsrs	r3, r3, #6
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cec:	e002      	b.n	8001cf4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f9      	bne.n	8001cee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff ff3c 	bl	8001b7c <LL_ADC_IsInternalRegulatorEnabled>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10d      	bne.n	8001d26 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0e:	f043 0210 	orr.w	r2, r3, #16
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1a:	f043 0201 	orr.w	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ff75 	bl	8001c1a <LL_ADC_REG_IsConversionOngoing>
 8001d30:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 8148 	bne.w	8001fd0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 8144 	bne.w	8001fd0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d50:	f043 0202 	orr.w	r2, r3, #2
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff35 	bl	8001bcc <LL_ADC_IsEnabled>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d141      	bne.n	8001dec <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d70:	d004      	beq.n	8001d7c <HAL_ADC_Init+0x114>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a7a      	ldr	r2, [pc, #488]	; (8001f60 <HAL_ADC_Init+0x2f8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d10f      	bne.n	8001d9c <HAL_ADC_Init+0x134>
 8001d7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001d80:	f7ff ff24 	bl	8001bcc <LL_ADC_IsEnabled>
 8001d84:	4604      	mov	r4, r0
 8001d86:	4876      	ldr	r0, [pc, #472]	; (8001f60 <HAL_ADC_Init+0x2f8>)
 8001d88:	f7ff ff20 	bl	8001bcc <LL_ADC_IsEnabled>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4323      	orrs	r3, r4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	bf0c      	ite	eq
 8001d94:	2301      	moveq	r3, #1
 8001d96:	2300      	movne	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	e012      	b.n	8001dc2 <HAL_ADC_Init+0x15a>
 8001d9c:	4871      	ldr	r0, [pc, #452]	; (8001f64 <HAL_ADC_Init+0x2fc>)
 8001d9e:	f7ff ff15 	bl	8001bcc <LL_ADC_IsEnabled>
 8001da2:	4604      	mov	r4, r0
 8001da4:	4870      	ldr	r0, [pc, #448]	; (8001f68 <HAL_ADC_Init+0x300>)
 8001da6:	f7ff ff11 	bl	8001bcc <LL_ADC_IsEnabled>
 8001daa:	4603      	mov	r3, r0
 8001dac:	431c      	orrs	r4, r3
 8001dae:	486f      	ldr	r0, [pc, #444]	; (8001f6c <HAL_ADC_Init+0x304>)
 8001db0:	f7ff ff0c 	bl	8001bcc <LL_ADC_IsEnabled>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4323      	orrs	r3, r4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d012      	beq.n	8001dec <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dce:	d004      	beq.n	8001dda <HAL_ADC_Init+0x172>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a62      	ldr	r2, [pc, #392]	; (8001f60 <HAL_ADC_Init+0x2f8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_ADC_Init+0x176>
 8001dda:	4a65      	ldr	r2, [pc, #404]	; (8001f70 <HAL_ADC_Init+0x308>)
 8001ddc:	e000      	b.n	8001de0 <HAL_ADC_Init+0x178>
 8001dde:	4a65      	ldr	r2, [pc, #404]	; (8001f74 <HAL_ADC_Init+0x30c>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4619      	mov	r1, r3
 8001de6:	4610      	mov	r0, r2
 8001de8:	f7ff fd0e 	bl	8001808 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	7f5b      	ldrb	r3, [r3, #29]
 8001df0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001df6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001dfc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e02:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e0a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d106      	bne.n	8001e28 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	045b      	lsls	r3, r3, #17
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d009      	beq.n	8001e44 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	4b4b      	ldr	r3, [pc, #300]	; (8001f78 <HAL_ADC_Init+0x310>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	69b9      	ldr	r1, [r7, #24]
 8001e54:	430b      	orrs	r3, r1
 8001e56:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fed1 	bl	8001c1a <LL_ADC_REG_IsConversionOngoing>
 8001e78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fede 	bl	8001c40 <LL_ADC_INJ_IsConversionOngoing>
 8001e84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d17f      	bne.n	8001f8c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d17c      	bne.n	8001f8c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e96:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e9e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eae:	f023 0302 	bic.w	r3, r3, #2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	69b9      	ldr	r1, [r7, #24]
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d017      	beq.n	8001ef4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ed2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001edc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ee0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6911      	ldr	r1, [r2, #16]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	430b      	orrs	r3, r1
 8001eee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001ef2:	e013      	b.n	8001f1c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f02:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f18:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d12a      	bne.n	8001f7c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f30:	f023 0304 	bic.w	r3, r3, #4
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f3c:	4311      	orrs	r1, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f42:	4311      	orrs	r1, r2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 0201 	orr.w	r2, r2, #1
 8001f54:	611a      	str	r2, [r3, #16]
 8001f56:	e019      	b.n	8001f8c <HAL_ADC_Init+0x324>
 8001f58:	20000004 	.word	0x20000004
 8001f5c:	053e2d63 	.word	0x053e2d63
 8001f60:	50000100 	.word	0x50000100
 8001f64:	50000400 	.word	0x50000400
 8001f68:	50000500 	.word	0x50000500
 8001f6c:	50000600 	.word	0x50000600
 8001f70:	50000300 	.word	0x50000300
 8001f74:	50000700 	.word	0x50000700
 8001f78:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691a      	ldr	r2, [r3, #16]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d10c      	bne.n	8001fae <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f023 010f 	bic.w	r1, r3, #15
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	1e5a      	subs	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	631a      	str	r2, [r3, #48]	; 0x30
 8001fac:	e007      	b.n	8001fbe <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 020f 	bic.w	r2, r2, #15
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	f023 0303 	bic.w	r3, r3, #3
 8001fc6:	f043 0201 	orr.w	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fce:	e007      	b.n	8001fe0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	f043 0210 	orr.w	r2, r3, #16
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fe0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3724      	adds	r7, #36	; 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd90      	pop	{r4, r7, pc}
 8001fea:	bf00      	nop

08001fec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ffc:	d004      	beq.n	8002008 <HAL_ADC_Start+0x1c>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a67      	ldr	r2, [pc, #412]	; (80021a0 <HAL_ADC_Start+0x1b4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d101      	bne.n	800200c <HAL_ADC_Start+0x20>
 8002008:	4b66      	ldr	r3, [pc, #408]	; (80021a4 <HAL_ADC_Start+0x1b8>)
 800200a:	e000      	b.n	800200e <HAL_ADC_Start+0x22>
 800200c:	4b66      	ldr	r3, [pc, #408]	; (80021a8 <HAL_ADC_Start+0x1bc>)
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fd5e 	bl	8001ad0 <LL_ADC_GetMultimode>
 8002014:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fdfd 	bl	8001c1a <LL_ADC_REG_IsConversionOngoing>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	f040 80b4 	bne.w	8002190 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_ADC_Start+0x4a>
 8002032:	2302      	movs	r3, #2
 8002034:	e0af      	b.n	8002196 <HAL_ADC_Start+0x1aa>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 fe0c 	bl	8002c5c <ADC_Enable>
 8002044:	4603      	mov	r3, r0
 8002046:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002048:	7dfb      	ldrb	r3, [r7, #23]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f040 809b 	bne.w	8002186 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002054:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a4d      	ldr	r2, [pc, #308]	; (80021a0 <HAL_ADC_Start+0x1b4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d009      	beq.n	8002082 <HAL_ADC_Start+0x96>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a4e      	ldr	r2, [pc, #312]	; (80021ac <HAL_ADC_Start+0x1c0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d002      	beq.n	800207e <HAL_ADC_Start+0x92>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	e003      	b.n	8002086 <HAL_ADC_Start+0x9a>
 800207e:	4b4c      	ldr	r3, [pc, #304]	; (80021b0 <HAL_ADC_Start+0x1c4>)
 8002080:	e001      	b.n	8002086 <HAL_ADC_Start+0x9a>
 8002082:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	4293      	cmp	r3, r2
 800208c:	d002      	beq.n	8002094 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d105      	bne.n	80020a0 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002098:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ac:	d106      	bne.n	80020bc <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b2:	f023 0206 	bic.w	r2, r3, #6
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	661a      	str	r2, [r3, #96]	; 0x60
 80020ba:	e002      	b.n	80020c2 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	221c      	movs	r2, #28
 80020c8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a32      	ldr	r2, [pc, #200]	; (80021a0 <HAL_ADC_Start+0x1b4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d009      	beq.n	80020f0 <HAL_ADC_Start+0x104>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a32      	ldr	r2, [pc, #200]	; (80021ac <HAL_ADC_Start+0x1c0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d002      	beq.n	80020ec <HAL_ADC_Start+0x100>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	e003      	b.n	80020f4 <HAL_ADC_Start+0x108>
 80020ec:	4b30      	ldr	r3, [pc, #192]	; (80021b0 <HAL_ADC_Start+0x1c4>)
 80020ee:	e001      	b.n	80020f4 <HAL_ADC_Start+0x108>
 80020f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d008      	beq.n	800210e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	2b05      	cmp	r3, #5
 8002106:	d002      	beq.n	800210e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	2b09      	cmp	r3, #9
 800210c:	d114      	bne.n	8002138 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d007      	beq.n	800212c <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002124:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fd5e 	bl	8001bf2 <LL_ADC_REG_StartConversion>
 8002136:	e02d      	b.n	8002194 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a15      	ldr	r2, [pc, #84]	; (80021a0 <HAL_ADC_Start+0x1b4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d009      	beq.n	8002162 <HAL_ADC_Start+0x176>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a16      	ldr	r2, [pc, #88]	; (80021ac <HAL_ADC_Start+0x1c0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d002      	beq.n	800215e <HAL_ADC_Start+0x172>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	e003      	b.n	8002166 <HAL_ADC_Start+0x17a>
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <HAL_ADC_Start+0x1c4>)
 8002160:	e001      	b.n	8002166 <HAL_ADC_Start+0x17a>
 8002162:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002166:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00f      	beq.n	8002194 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800217c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	65da      	str	r2, [r3, #92]	; 0x5c
 8002184:	e006      	b.n	8002194 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800218e:	e001      	b.n	8002194 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002190:	2302      	movs	r3, #2
 8002192:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002194:	7dfb      	ldrb	r3, [r7, #23]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	50000100 	.word	0x50000100
 80021a4:	50000300 	.word	0x50000300
 80021a8:	50000700 	.word	0x50000700
 80021ac:	50000500 	.word	0x50000500
 80021b0:	50000400 	.word	0x50000400

080021b4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021c6:	d004      	beq.n	80021d2 <HAL_ADC_PollForConversion+0x1e>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a77      	ldr	r2, [pc, #476]	; (80023ac <HAL_ADC_PollForConversion+0x1f8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_PollForConversion+0x22>
 80021d2:	4b77      	ldr	r3, [pc, #476]	; (80023b0 <HAL_ADC_PollForConversion+0x1fc>)
 80021d4:	e000      	b.n	80021d8 <HAL_ADC_PollForConversion+0x24>
 80021d6:	4b77      	ldr	r3, [pc, #476]	; (80023b4 <HAL_ADC_PollForConversion+0x200>)
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fc79 	bl	8001ad0 <LL_ADC_GetMultimode>
 80021de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d102      	bne.n	80021ee <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80021e8:	2308      	movs	r3, #8
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	e037      	b.n	800225e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	d002      	beq.n	8002200 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b09      	cmp	r3, #9
 80021fe:	d111      	bne.n	8002224 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d007      	beq.n	800221e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002212:	f043 0220 	orr.w	r2, r3, #32
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e0c1      	b.n	80023a2 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800221e:	2304      	movs	r3, #4
 8002220:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002222:	e01c      	b.n	800225e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800222c:	d004      	beq.n	8002238 <HAL_ADC_PollForConversion+0x84>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a5e      	ldr	r2, [pc, #376]	; (80023ac <HAL_ADC_PollForConversion+0x1f8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d101      	bne.n	800223c <HAL_ADC_PollForConversion+0x88>
 8002238:	4b5d      	ldr	r3, [pc, #372]	; (80023b0 <HAL_ADC_PollForConversion+0x1fc>)
 800223a:	e000      	b.n	800223e <HAL_ADC_PollForConversion+0x8a>
 800223c:	4b5d      	ldr	r3, [pc, #372]	; (80023b4 <HAL_ADC_PollForConversion+0x200>)
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fc54 	bl	8001aec <LL_ADC_GetMultiDMATransfer>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d007      	beq.n	800225a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224e:	f043 0220 	orr.w	r2, r3, #32
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e0a3      	b.n	80023a2 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800225a:	2304      	movs	r3, #4
 800225c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800225e:	f7ff faa5 	bl	80017ac <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002264:	e021      	b.n	80022aa <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d01d      	beq.n	80022aa <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800226e:	f7ff fa9d 	bl	80017ac <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d302      	bcc.n	8002284 <HAL_ADC_PollForConversion+0xd0>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d112      	bne.n	80022aa <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	4013      	ands	r3, r2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10b      	bne.n	80022aa <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002296:	f043 0204 	orr.w	r2, r3, #4
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e07b      	b.n	80023a2 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0d6      	beq.n	8002266 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fb6f 	bl	80019ac <LL_ADC_REG_IsTriggerSourceSWStart>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d01c      	beq.n	800230e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	7f5b      	ldrb	r3, [r3, #29]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d118      	bne.n	800230e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d111      	bne.n	800230e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d105      	bne.n	800230e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a26      	ldr	r2, [pc, #152]	; (80023ac <HAL_ADC_PollForConversion+0x1f8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d009      	beq.n	800232c <HAL_ADC_PollForConversion+0x178>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a26      	ldr	r2, [pc, #152]	; (80023b8 <HAL_ADC_PollForConversion+0x204>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d002      	beq.n	8002328 <HAL_ADC_PollForConversion+0x174>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	e003      	b.n	8002330 <HAL_ADC_PollForConversion+0x17c>
 8002328:	4b24      	ldr	r3, [pc, #144]	; (80023bc <HAL_ADC_PollForConversion+0x208>)
 800232a:	e001      	b.n	8002330 <HAL_ADC_PollForConversion+0x17c>
 800232c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	4293      	cmp	r3, r2
 8002336:	d008      	beq.n	800234a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d002      	beq.n	800234a <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2b09      	cmp	r3, #9
 8002348:	d104      	bne.n	8002354 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61bb      	str	r3, [r7, #24]
 8002352:	e014      	b.n	800237e <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a14      	ldr	r2, [pc, #80]	; (80023ac <HAL_ADC_PollForConversion+0x1f8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d009      	beq.n	8002372 <HAL_ADC_PollForConversion+0x1be>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a15      	ldr	r2, [pc, #84]	; (80023b8 <HAL_ADC_PollForConversion+0x204>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d002      	beq.n	800236e <HAL_ADC_PollForConversion+0x1ba>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	e003      	b.n	8002376 <HAL_ADC_PollForConversion+0x1c2>
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_ADC_PollForConversion+0x208>)
 8002370:	e001      	b.n	8002376 <HAL_ADC_PollForConversion+0x1c2>
 8002372:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002376:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	2b08      	cmp	r3, #8
 8002382:	d104      	bne.n	800238e <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2208      	movs	r2, #8
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	e008      	b.n	80023a0 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d103      	bne.n	80023a0 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	220c      	movs	r2, #12
 800239e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3720      	adds	r7, #32
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	50000100 	.word	0x50000100
 80023b0:	50000300 	.word	0x50000300
 80023b4:	50000700 	.word	0x50000700
 80023b8:	50000500 	.word	0x50000500
 80023bc:	50000400 	.word	0x50000400

080023c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b0b6      	sub	sp, #216	; 0xd8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d102      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x24>
 80023fa:	2302      	movs	r3, #2
 80023fc:	f000 bc13 	b.w	8002c26 <HAL_ADC_ConfigChannel+0x84a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fc04 	bl	8001c1a <LL_ADC_REG_IsConversionOngoing>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	f040 83f3 	bne.w	8002c00 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	6859      	ldr	r1, [r3, #4]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	f7ff fad3 	bl	80019d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fbf2 	bl	8001c1a <LL_ADC_REG_IsConversionOngoing>
 8002436:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fbfe 	bl	8001c40 <LL_ADC_INJ_IsConversionOngoing>
 8002444:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002448:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 81d9 	bne.w	8002804 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002452:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002456:	2b00      	cmp	r3, #0
 8002458:	f040 81d4 	bne.w	8002804 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002464:	d10f      	bne.n	8002486 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2200      	movs	r2, #0
 8002470:	4619      	mov	r1, r3
 8002472:	f7ff fada 	bl	8001a2a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fa81 	bl	8001986 <LL_ADC_SetSamplingTimeCommonConfig>
 8002484:	e00e      	b.n	80024a4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6819      	ldr	r1, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	461a      	mov	r2, r3
 8002494:	f7ff fac9 	bl	8001a2a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fa71 	bl	8001986 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	08db      	lsrs	r3, r3, #3
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d022      	beq.n	800250c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6919      	ldr	r1, [r3, #16]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024d6:	f7ff f9cb 	bl	8001870 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	6919      	ldr	r1, [r3, #16]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	461a      	mov	r2, r3
 80024e8:	f7ff fa17 	bl	800191a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6919      	ldr	r1, [r3, #16]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	7f1b      	ldrb	r3, [r3, #28]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d102      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x126>
 80024fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002500:	e000      	b.n	8002504 <HAL_ADC_ConfigChannel+0x128>
 8002502:	2300      	movs	r3, #0
 8002504:	461a      	mov	r2, r3
 8002506:	f7ff fa23 	bl	8001950 <LL_ADC_SetOffsetSaturation>
 800250a:	e17b      	b.n	8002804 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff f9d0 	bl	80018b8 <LL_ADC_GetOffsetChannel>
 8002518:	4603      	mov	r3, r0
 800251a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x15c>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff f9c5 	bl	80018b8 <LL_ADC_GetOffsetChannel>
 800252e:	4603      	mov	r3, r0
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	f003 021f 	and.w	r2, r3, #31
 8002536:	e01e      	b.n	8002576 <HAL_ADC_ConfigChannel+0x19a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff f9ba 	bl	80018b8 <LL_ADC_GetOffsetChannel>
 8002544:	4603      	mov	r3, r0
 8002546:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002556:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800255a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800255e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002566:	2320      	movs	r3, #32
 8002568:	e004      	b.n	8002574 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800256a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257e:	2b00      	cmp	r3, #0
 8002580:	d105      	bne.n	800258e <HAL_ADC_ConfigChannel+0x1b2>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0e9b      	lsrs	r3, r3, #26
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	e018      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x1e4>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80025a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80025aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80025b2:	2320      	movs	r3, #32
 80025b4:	e004      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80025b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d106      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2200      	movs	r2, #0
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff f989 	bl	80018e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2101      	movs	r1, #1
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff f96d 	bl	80018b8 <LL_ADC_GetOffsetChannel>
 80025de:	4603      	mov	r3, r0
 80025e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10a      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x222>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2101      	movs	r1, #1
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff f962 	bl	80018b8 <LL_ADC_GetOffsetChannel>
 80025f4:	4603      	mov	r3, r0
 80025f6:	0e9b      	lsrs	r3, r3, #26
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	e01e      	b.n	800263c <HAL_ADC_ConfigChannel+0x260>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2101      	movs	r1, #1
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff f957 	bl	80018b8 <LL_ADC_GetOffsetChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800261c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002620:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002624:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800262c:	2320      	movs	r3, #32
 800262e:	e004      	b.n	800263a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002630:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002634:	fab3 f383 	clz	r3, r3
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x278>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	0e9b      	lsrs	r3, r3, #26
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	e018      	b.n	8002686 <HAL_ADC_ConfigChannel+0x2aa>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002668:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800266c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002670:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002678:	2320      	movs	r3, #32
 800267a:	e004      	b.n	8002686 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800267c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002686:	429a      	cmp	r2, r3
 8002688:	d106      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2200      	movs	r2, #0
 8002690:	2101      	movs	r1, #1
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff f926 	bl	80018e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2102      	movs	r1, #2
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff f90a 	bl	80018b8 <LL_ADC_GetOffsetChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10a      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x2e8>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2102      	movs	r1, #2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff f8ff 	bl	80018b8 <LL_ADC_GetOffsetChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	f003 021f 	and.w	r2, r3, #31
 80026c2:	e01e      	b.n	8002702 <HAL_ADC_ConfigChannel+0x326>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2102      	movs	r1, #2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff f8f4 	bl	80018b8 <LL_ADC_GetOffsetChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80026e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80026ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80026f2:	2320      	movs	r3, #32
 80026f4:	e004      	b.n	8002700 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80026f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270a:	2b00      	cmp	r3, #0
 800270c:	d105      	bne.n	800271a <HAL_ADC_ConfigChannel+0x33e>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	0e9b      	lsrs	r3, r3, #26
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	e016      	b.n	8002748 <HAL_ADC_ConfigChannel+0x36c>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800272c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800272e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002732:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800273a:	2320      	movs	r3, #32
 800273c:	e004      	b.n	8002748 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800273e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002748:	429a      	cmp	r2, r3
 800274a:	d106      	bne.n	800275a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2200      	movs	r2, #0
 8002752:	2102      	movs	r1, #2
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff f8c5 	bl	80018e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2103      	movs	r1, #3
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff f8a9 	bl	80018b8 <LL_ADC_GetOffsetChannel>
 8002766:	4603      	mov	r3, r0
 8002768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10a      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x3aa>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2103      	movs	r1, #3
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff f89e 	bl	80018b8 <LL_ADC_GetOffsetChannel>
 800277c:	4603      	mov	r3, r0
 800277e:	0e9b      	lsrs	r3, r3, #26
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	e017      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x3da>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2103      	movs	r1, #3
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff f893 	bl	80018b8 <LL_ADC_GetOffsetChannel>
 8002792:	4603      	mov	r3, r0
 8002794:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800279e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027a0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80027a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80027a8:	2320      	movs	r3, #32
 80027aa:	e003      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80027ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027ae:	fab3 f383 	clz	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d105      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x3f2>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	0e9b      	lsrs	r3, r3, #26
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	e011      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x416>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80027dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027de:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80027e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80027e6:	2320      	movs	r3, #32
 80027e8:	e003      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80027ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d106      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2200      	movs	r2, #0
 80027fc:	2103      	movs	r1, #3
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff f870 	bl	80018e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff f9df 	bl	8001bcc <LL_ADC_IsEnabled>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	f040 813d 	bne.w	8002a90 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6819      	ldr	r1, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	461a      	mov	r2, r3
 8002824:	f7ff f92c 	bl	8001a80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4aa2      	ldr	r2, [pc, #648]	; (8002ab8 <HAL_ADC_ConfigChannel+0x6dc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	f040 812e 	bne.w	8002a90 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10b      	bne.n	800285c <HAL_ADC_ConfigChannel+0x480>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	0e9b      	lsrs	r3, r3, #26
 800284a:	3301      	adds	r3, #1
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	2b09      	cmp	r3, #9
 8002852:	bf94      	ite	ls
 8002854:	2301      	movls	r3, #1
 8002856:	2300      	movhi	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	e019      	b.n	8002890 <HAL_ADC_ConfigChannel+0x4b4>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800286a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800286c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800286e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002874:	2320      	movs	r3, #32
 8002876:	e003      	b.n	8002880 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002878:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	3301      	adds	r3, #1
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	2b09      	cmp	r3, #9
 8002888:	bf94      	ite	ls
 800288a:	2301      	movls	r3, #1
 800288c:	2300      	movhi	r3, #0
 800288e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002890:	2b00      	cmp	r3, #0
 8002892:	d079      	beq.n	8002988 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289c:	2b00      	cmp	r3, #0
 800289e:	d107      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x4d4>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	0e9b      	lsrs	r3, r3, #26
 80028a6:	3301      	adds	r3, #1
 80028a8:	069b      	lsls	r3, r3, #26
 80028aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ae:	e015      	b.n	80028dc <HAL_ADC_ConfigChannel+0x500>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80028c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80028c8:	2320      	movs	r3, #32
 80028ca:	e003      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80028cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	3301      	adds	r3, #1
 80028d6:	069b      	lsls	r3, r3, #26
 80028d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x520>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	0e9b      	lsrs	r3, r3, #26
 80028ee:	3301      	adds	r3, #1
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	2101      	movs	r1, #1
 80028f6:	fa01 f303 	lsl.w	r3, r1, r3
 80028fa:	e017      	b.n	800292c <HAL_ADC_ConfigChannel+0x550>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800290a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800290c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800290e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002914:	2320      	movs	r3, #32
 8002916:	e003      	b.n	8002920 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	3301      	adds	r3, #1
 8002922:	f003 031f 	and.w	r3, r3, #31
 8002926:	2101      	movs	r1, #1
 8002928:	fa01 f303 	lsl.w	r3, r1, r3
 800292c:	ea42 0103 	orr.w	r1, r2, r3
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10a      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x576>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	0e9b      	lsrs	r3, r3, #26
 8002942:	3301      	adds	r3, #1
 8002944:	f003 021f 	and.w	r2, r3, #31
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	051b      	lsls	r3, r3, #20
 8002950:	e018      	b.n	8002984 <HAL_ADC_ConfigChannel+0x5a8>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002962:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800296a:	2320      	movs	r3, #32
 800296c:	e003      	b.n	8002976 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800296e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	3301      	adds	r3, #1
 8002978:	f003 021f 	and.w	r2, r3, #31
 800297c:	4613      	mov	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4413      	add	r3, r2
 8002982:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002984:	430b      	orrs	r3, r1
 8002986:	e07e      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002990:	2b00      	cmp	r3, #0
 8002992:	d107      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x5c8>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	0e9b      	lsrs	r3, r3, #26
 800299a:	3301      	adds	r3, #1
 800299c:	069b      	lsls	r3, r3, #26
 800299e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029a2:	e015      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x5f4>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80029b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80029b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80029bc:	2320      	movs	r3, #32
 80029be:	e003      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80029c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	3301      	adds	r3, #1
 80029ca:	069b      	lsls	r3, r3, #26
 80029cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d109      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x614>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	0e9b      	lsrs	r3, r3, #26
 80029e2:	3301      	adds	r3, #1
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	2101      	movs	r1, #1
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	e017      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x644>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	fa93 f3a3 	rbit	r3, r3
 80029fc:	61fb      	str	r3, [r7, #28]
  return result;
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002a08:	2320      	movs	r3, #32
 8002a0a:	e003      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	3301      	adds	r3, #1
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a20:	ea42 0103 	orr.w	r1, r2, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10d      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x670>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	0e9b      	lsrs	r3, r3, #26
 8002a36:	3301      	adds	r3, #1
 8002a38:	f003 021f 	and.w	r2, r3, #31
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	3b1e      	subs	r3, #30
 8002a44:	051b      	lsls	r3, r3, #20
 8002a46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	e01b      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x6a8>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	613b      	str	r3, [r7, #16]
  return result;
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002a64:	2320      	movs	r3, #32
 8002a66:	e003      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	3301      	adds	r3, #1
 8002a72:	f003 021f 	and.w	r2, r3, #31
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3b1e      	subs	r3, #30
 8002a7e:	051b      	lsls	r3, r3, #20
 8002a80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a84:	430b      	orrs	r3, r1
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	6892      	ldr	r2, [r2, #8]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7fe ffcd 	bl	8001a2a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_ADC_ConfigChannel+0x6e0>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80be 	beq.w	8002c1a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa6:	d004      	beq.n	8002ab2 <HAL_ADC_ConfigChannel+0x6d6>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <HAL_ADC_ConfigChannel+0x6e4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d10a      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x6ec>
 8002ab2:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <HAL_ADC_ConfigChannel+0x6e8>)
 8002ab4:	e009      	b.n	8002aca <HAL_ADC_ConfigChannel+0x6ee>
 8002ab6:	bf00      	nop
 8002ab8:	407f0000 	.word	0x407f0000
 8002abc:	80080000 	.word	0x80080000
 8002ac0:	50000100 	.word	0x50000100
 8002ac4:	50000300 	.word	0x50000300
 8002ac8:	4b59      	ldr	r3, [pc, #356]	; (8002c30 <HAL_ADC_ConfigChannel+0x854>)
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe fec2 	bl	8001854 <LL_ADC_GetCommonPathInternalCh>
 8002ad0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a56      	ldr	r2, [pc, #344]	; (8002c34 <HAL_ADC_ConfigChannel+0x858>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d004      	beq.n	8002ae8 <HAL_ADC_ConfigChannel+0x70c>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a55      	ldr	r2, [pc, #340]	; (8002c38 <HAL_ADC_ConfigChannel+0x85c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d13a      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ae8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d134      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002afc:	d005      	beq.n	8002b0a <HAL_ADC_ConfigChannel+0x72e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a4e      	ldr	r2, [pc, #312]	; (8002c3c <HAL_ADC_ConfigChannel+0x860>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	f040 8085 	bne.w	8002c14 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b12:	d004      	beq.n	8002b1e <HAL_ADC_ConfigChannel+0x742>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a49      	ldr	r2, [pc, #292]	; (8002c40 <HAL_ADC_ConfigChannel+0x864>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x746>
 8002b1e:	4a49      	ldr	r2, [pc, #292]	; (8002c44 <HAL_ADC_ConfigChannel+0x868>)
 8002b20:	e000      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x748>
 8002b22:	4a43      	ldr	r2, [pc, #268]	; (8002c30 <HAL_ADC_ConfigChannel+0x854>)
 8002b24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f7fe fe7d 	bl	800182e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b34:	4b44      	ldr	r3, [pc, #272]	; (8002c48 <HAL_ADC_ConfigChannel+0x86c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	4a44      	ldr	r2, [pc, #272]	; (8002c4c <HAL_ADC_ConfigChannel+0x870>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b4e:	e002      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f9      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b5c:	e05a      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a3b      	ldr	r2, [pc, #236]	; (8002c50 <HAL_ADC_ConfigChannel+0x874>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d125      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x7d8>
 8002b68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d11f      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a31      	ldr	r2, [pc, #196]	; (8002c40 <HAL_ADC_ConfigChannel+0x864>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d104      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x7ac>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a34      	ldr	r2, [pc, #208]	; (8002c54 <HAL_ADC_ConfigChannel+0x878>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d047      	beq.n	8002c18 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b90:	d004      	beq.n	8002b9c <HAL_ADC_ConfigChannel+0x7c0>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a2a      	ldr	r2, [pc, #168]	; (8002c40 <HAL_ADC_ConfigChannel+0x864>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d101      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x7c4>
 8002b9c:	4a29      	ldr	r2, [pc, #164]	; (8002c44 <HAL_ADC_ConfigChannel+0x868>)
 8002b9e:	e000      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x7c6>
 8002ba0:	4a23      	ldr	r2, [pc, #140]	; (8002c30 <HAL_ADC_ConfigChannel+0x854>)
 8002ba2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002baa:	4619      	mov	r1, r3
 8002bac:	4610      	mov	r0, r2
 8002bae:	f7fe fe3e 	bl	800182e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bb2:	e031      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a27      	ldr	r2, [pc, #156]	; (8002c58 <HAL_ADC_ConfigChannel+0x87c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d12d      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d127      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1c      	ldr	r2, [pc, #112]	; (8002c40 <HAL_ADC_ConfigChannel+0x864>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d022      	beq.n	8002c1a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bdc:	d004      	beq.n	8002be8 <HAL_ADC_ConfigChannel+0x80c>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a17      	ldr	r2, [pc, #92]	; (8002c40 <HAL_ADC_ConfigChannel+0x864>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d101      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x810>
 8002be8:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <HAL_ADC_ConfigChannel+0x868>)
 8002bea:	e000      	b.n	8002bee <HAL_ADC_ConfigChannel+0x812>
 8002bec:	4a10      	ldr	r2, [pc, #64]	; (8002c30 <HAL_ADC_ConfigChannel+0x854>)
 8002bee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bf2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	f7fe fe18 	bl	800182e <LL_ADC_SetCommonPathInternalCh>
 8002bfe:	e00c      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c04:	f043 0220 	orr.w	r2, r3, #32
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002c12:	e002      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c14:	bf00      	nop
 8002c16:	e000      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c22:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	37d8      	adds	r7, #216	; 0xd8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	50000700 	.word	0x50000700
 8002c34:	c3210000 	.word	0xc3210000
 8002c38:	90c00010 	.word	0x90c00010
 8002c3c:	50000600 	.word	0x50000600
 8002c40:	50000100 	.word	0x50000100
 8002c44:	50000300 	.word	0x50000300
 8002c48:	20000004 	.word	0x20000004
 8002c4c:	053e2d63 	.word	0x053e2d63
 8002c50:	c7520000 	.word	0xc7520000
 8002c54:	50000500 	.word	0x50000500
 8002c58:	cb840000 	.word	0xcb840000

08002c5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe ffaf 	bl	8001bcc <LL_ADC_IsEnabled>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d14d      	bne.n	8002d10 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <ADC_Enable+0xc0>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c86:	f043 0210 	orr.w	r2, r3, #16
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e039      	b.n	8002d12 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe ff7e 	bl	8001ba4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ca8:	f7fe fd80 	bl	80017ac <HAL_GetTick>
 8002cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cae:	e028      	b.n	8002d02 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe ff89 	bl	8001bcc <LL_ADC_IsEnabled>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d104      	bne.n	8002cca <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe ff6d 	bl	8001ba4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cca:	f7fe fd6f 	bl	80017ac <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d914      	bls.n	8002d02 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d00d      	beq.n	8002d02 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	f043 0210 	orr.w	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf6:	f043 0201 	orr.w	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e007      	b.n	8002d12 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d1cf      	bne.n	8002cb0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	8000003f 	.word	0x8000003f

08002d20 <LL_ADC_IsEnabled>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <LL_ADC_IsEnabled+0x18>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <LL_ADC_IsEnabled+0x1a>
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d101      	bne.n	8002d5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b0a1      	sub	sp, #132	; 0x84
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e0e7      	b.n	8002f5a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002d92:	2300      	movs	r3, #0
 8002d94:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002d96:	2300      	movs	r3, #0
 8002d98:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002da2:	d102      	bne.n	8002daa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002da4:	4b6f      	ldr	r3, [pc, #444]	; (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	e009      	b.n	8002dbe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6e      	ldr	r2, [pc, #440]	; (8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d102      	bne.n	8002dba <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002db4:	4b6d      	ldr	r3, [pc, #436]	; (8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	e001      	b.n	8002dbe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	f043 0220 	orr.w	r2, r3, #32
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0be      	b.n	8002f5a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff ffb1 	bl	8002d46 <LL_ADC_REG_IsConversionOngoing>
 8002de4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff ffab 	bl	8002d46 <LL_ADC_REG_IsConversionOngoing>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f040 80a0 	bne.w	8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f040 809c 	bne.w	8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e08:	d004      	beq.n	8002e14 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a55      	ldr	r2, [pc, #340]	; (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d101      	bne.n	8002e18 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002e14:	4b56      	ldr	r3, [pc, #344]	; (8002f70 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002e16:	e000      	b.n	8002e1a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002e18:	4b56      	ldr	r3, [pc, #344]	; (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002e1a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d04b      	beq.n	8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	6859      	ldr	r1, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e36:	035b      	lsls	r3, r3, #13
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e3e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e48:	d004      	beq.n	8002e54 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a45      	ldr	r2, [pc, #276]	; (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d10f      	bne.n	8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002e54:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e58:	f7ff ff62 	bl	8002d20 <LL_ADC_IsEnabled>
 8002e5c:	4604      	mov	r4, r0
 8002e5e:	4841      	ldr	r0, [pc, #260]	; (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e60:	f7ff ff5e 	bl	8002d20 <LL_ADC_IsEnabled>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4323      	orrs	r3, r4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	e012      	b.n	8002e9a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002e74:	483c      	ldr	r0, [pc, #240]	; (8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002e76:	f7ff ff53 	bl	8002d20 <LL_ADC_IsEnabled>
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	483b      	ldr	r0, [pc, #236]	; (8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002e7e:	f7ff ff4f 	bl	8002d20 <LL_ADC_IsEnabled>
 8002e82:	4603      	mov	r3, r0
 8002e84:	431c      	orrs	r4, r3
 8002e86:	483c      	ldr	r0, [pc, #240]	; (8002f78 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002e88:	f7ff ff4a 	bl	8002d20 <LL_ADC_IsEnabled>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	4323      	orrs	r3, r4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	bf0c      	ite	eq
 8002e94:	2301      	moveq	r3, #1
 8002e96:	2300      	movne	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d056      	beq.n	8002f4c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ea6:	f023 030f 	bic.w	r3, r3, #15
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	6811      	ldr	r1, [r2, #0]
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	6892      	ldr	r2, [r2, #8]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eba:	e047      	b.n	8002f4c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ec6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ed0:	d004      	beq.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a23      	ldr	r2, [pc, #140]	; (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d10f      	bne.n	8002efc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002edc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ee0:	f7ff ff1e 	bl	8002d20 <LL_ADC_IsEnabled>
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	481f      	ldr	r0, [pc, #124]	; (8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ee8:	f7ff ff1a 	bl	8002d20 <LL_ADC_IsEnabled>
 8002eec:	4603      	mov	r3, r0
 8002eee:	4323      	orrs	r3, r4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	e012      	b.n	8002f22 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002efc:	481a      	ldr	r0, [pc, #104]	; (8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002efe:	f7ff ff0f 	bl	8002d20 <LL_ADC_IsEnabled>
 8002f02:	4604      	mov	r4, r0
 8002f04:	4819      	ldr	r0, [pc, #100]	; (8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002f06:	f7ff ff0b 	bl	8002d20 <LL_ADC_IsEnabled>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	431c      	orrs	r4, r3
 8002f0e:	481a      	ldr	r0, [pc, #104]	; (8002f78 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002f10:	f7ff ff06 	bl	8002d20 <LL_ADC_IsEnabled>
 8002f14:	4603      	mov	r3, r0
 8002f16:	4323      	orrs	r3, r4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d012      	beq.n	8002f4c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f2e:	f023 030f 	bic.w	r3, r3, #15
 8002f32:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f34:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f36:	e009      	b.n	8002f4c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	f043 0220 	orr.w	r2, r3, #32
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002f4a:	e000      	b.n	8002f4e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f4c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f56:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3784      	adds	r7, #132	; 0x84
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd90      	pop	{r4, r7, pc}
 8002f62:	bf00      	nop
 8002f64:	50000100 	.word	0x50000100
 8002f68:	50000400 	.word	0x50000400
 8002f6c:	50000500 	.word	0x50000500
 8002f70:	50000300 	.word	0x50000300
 8002f74:	50000700 	.word	0x50000700
 8002f78:	50000600 	.word	0x50000600

08002f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fae:	4a04      	ldr	r2, [pc, #16]	; (8002fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	60d3      	str	r3, [r2, #12]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc8:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <__NVIC_GetPriorityGrouping+0x18>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	0a1b      	lsrs	r3, r3, #8
 8002fce:	f003 0307 	and.w	r3, r3, #7
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	db0b      	blt.n	800300a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	f003 021f 	and.w	r2, r3, #31
 8002ff8:	4907      	ldr	r1, [pc, #28]	; (8003018 <__NVIC_EnableIRQ+0x38>)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	2001      	movs	r0, #1
 8003002:	fa00 f202 	lsl.w	r2, r0, r2
 8003006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	e000e100 	.word	0xe000e100

0800301c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	6039      	str	r1, [r7, #0]
 8003026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302c:	2b00      	cmp	r3, #0
 800302e:	db0a      	blt.n	8003046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	490c      	ldr	r1, [pc, #48]	; (8003068 <__NVIC_SetPriority+0x4c>)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	0112      	lsls	r2, r2, #4
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	440b      	add	r3, r1
 8003040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003044:	e00a      	b.n	800305c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	4908      	ldr	r1, [pc, #32]	; (800306c <__NVIC_SetPriority+0x50>)
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	3b04      	subs	r3, #4
 8003054:	0112      	lsls	r2, r2, #4
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	440b      	add	r3, r1
 800305a:	761a      	strb	r2, [r3, #24]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	e000e100 	.word	0xe000e100
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f1c3 0307 	rsb	r3, r3, #7
 800308a:	2b04      	cmp	r3, #4
 800308c:	bf28      	it	cs
 800308e:	2304      	movcs	r3, #4
 8003090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3304      	adds	r3, #4
 8003096:	2b06      	cmp	r3, #6
 8003098:	d902      	bls.n	80030a0 <NVIC_EncodePriority+0x30>
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3b03      	subs	r3, #3
 800309e:	e000      	b.n	80030a2 <NVIC_EncodePriority+0x32>
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a4:	f04f 32ff 	mov.w	r2, #4294967295
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43da      	mvns	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	401a      	ands	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b8:	f04f 31ff 	mov.w	r1, #4294967295
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	43d9      	mvns	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c8:	4313      	orrs	r3, r2
         );
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3724      	adds	r7, #36	; 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7ff ff4c 	bl	8002f7c <__NVIC_SetPriorityGrouping>
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030fa:	f7ff ff63 	bl	8002fc4 <__NVIC_GetPriorityGrouping>
 80030fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	6978      	ldr	r0, [r7, #20]
 8003106:	f7ff ffb3 	bl	8003070 <NVIC_EncodePriority>
 800310a:	4602      	mov	r2, r0
 800310c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003110:	4611      	mov	r1, r2
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ff82 	bl	800301c <__NVIC_SetPriority>
}
 8003118:	bf00      	nop
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff ff56 	bl	8002fe0 <__NVIC_EnableIRQ>
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d005      	beq.n	8003160 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2204      	movs	r2, #4
 8003158:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
 800315e:	e037      	b.n	80031d0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 020e 	bic.w	r2, r2, #14
 800316e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800317e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003194:	f003 021f 	and.w	r2, r3, #31
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	2101      	movs	r1, #1
 800319e:	fa01 f202 	lsl.w	r2, r1, r2
 80031a2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031ac:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00c      	beq.n	80031d0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031c4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80031ce:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d00d      	beq.n	8003222 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2204      	movs	r2, #4
 800320a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
 8003220:	e047      	b.n	80032b2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 020e 	bic.w	r2, r2, #14
 8003230:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0201 	bic.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003250:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f003 021f 	and.w	r2, r3, #31
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	2101      	movs	r1, #1
 8003260:	fa01 f202 	lsl.w	r2, r1, r2
 8003264:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800326e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00c      	beq.n	8003292 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003282:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003286:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003290:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	4798      	blx	r3
    }
  }
  return status;
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032ca:	e15a      	b.n	8003582 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	2101      	movs	r1, #1
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	fa01 f303 	lsl.w	r3, r1, r3
 80032d8:	4013      	ands	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 814c 	beq.w	800357c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d005      	beq.n	80032fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d130      	bne.n	800335e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	2203      	movs	r2, #3
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4013      	ands	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003332:	2201      	movs	r2, #1
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	f003 0201 	and.w	r2, r3, #1
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b03      	cmp	r3, #3
 8003368:	d017      	beq.n	800339a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	2203      	movs	r2, #3
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d123      	bne.n	80033ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	08da      	lsrs	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3208      	adds	r2, #8
 80033ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	220f      	movs	r2, #15
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4013      	ands	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	08da      	lsrs	r2, r3, #3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3208      	adds	r2, #8
 80033e8:	6939      	ldr	r1, [r7, #16]
 80033ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	2203      	movs	r2, #3
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0203 	and.w	r2, r3, #3
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80a6 	beq.w	800357c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003430:	4b5b      	ldr	r3, [pc, #364]	; (80035a0 <HAL_GPIO_Init+0x2e4>)
 8003432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003434:	4a5a      	ldr	r2, [pc, #360]	; (80035a0 <HAL_GPIO_Init+0x2e4>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6613      	str	r3, [r2, #96]	; 0x60
 800343c:	4b58      	ldr	r3, [pc, #352]	; (80035a0 <HAL_GPIO_Init+0x2e4>)
 800343e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003448:	4a56      	ldr	r2, [pc, #344]	; (80035a4 <HAL_GPIO_Init+0x2e8>)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	089b      	lsrs	r3, r3, #2
 800344e:	3302      	adds	r3, #2
 8003450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003454:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	220f      	movs	r2, #15
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003472:	d01f      	beq.n	80034b4 <HAL_GPIO_Init+0x1f8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a4c      	ldr	r2, [pc, #304]	; (80035a8 <HAL_GPIO_Init+0x2ec>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d019      	beq.n	80034b0 <HAL_GPIO_Init+0x1f4>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a4b      	ldr	r2, [pc, #300]	; (80035ac <HAL_GPIO_Init+0x2f0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d013      	beq.n	80034ac <HAL_GPIO_Init+0x1f0>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a4a      	ldr	r2, [pc, #296]	; (80035b0 <HAL_GPIO_Init+0x2f4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00d      	beq.n	80034a8 <HAL_GPIO_Init+0x1ec>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a49      	ldr	r2, [pc, #292]	; (80035b4 <HAL_GPIO_Init+0x2f8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d007      	beq.n	80034a4 <HAL_GPIO_Init+0x1e8>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a48      	ldr	r2, [pc, #288]	; (80035b8 <HAL_GPIO_Init+0x2fc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d101      	bne.n	80034a0 <HAL_GPIO_Init+0x1e4>
 800349c:	2305      	movs	r3, #5
 800349e:	e00a      	b.n	80034b6 <HAL_GPIO_Init+0x1fa>
 80034a0:	2306      	movs	r3, #6
 80034a2:	e008      	b.n	80034b6 <HAL_GPIO_Init+0x1fa>
 80034a4:	2304      	movs	r3, #4
 80034a6:	e006      	b.n	80034b6 <HAL_GPIO_Init+0x1fa>
 80034a8:	2303      	movs	r3, #3
 80034aa:	e004      	b.n	80034b6 <HAL_GPIO_Init+0x1fa>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e002      	b.n	80034b6 <HAL_GPIO_Init+0x1fa>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <HAL_GPIO_Init+0x1fa>
 80034b4:	2300      	movs	r3, #0
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	f002 0203 	and.w	r2, r2, #3
 80034bc:	0092      	lsls	r2, r2, #2
 80034be:	4093      	lsls	r3, r2
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034c6:	4937      	ldr	r1, [pc, #220]	; (80035a4 <HAL_GPIO_Init+0x2e8>)
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	089b      	lsrs	r3, r3, #2
 80034cc:	3302      	adds	r3, #2
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034d4:	4b39      	ldr	r3, [pc, #228]	; (80035bc <HAL_GPIO_Init+0x300>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	43db      	mvns	r3, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4013      	ands	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034f8:	4a30      	ldr	r2, [pc, #192]	; (80035bc <HAL_GPIO_Init+0x300>)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034fe:	4b2f      	ldr	r3, [pc, #188]	; (80035bc <HAL_GPIO_Init+0x300>)
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	43db      	mvns	r3, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003522:	4a26      	ldr	r2, [pc, #152]	; (80035bc <HAL_GPIO_Init+0x300>)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003528:	4b24      	ldr	r3, [pc, #144]	; (80035bc <HAL_GPIO_Init+0x300>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	43db      	mvns	r3, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800354c:	4a1b      	ldr	r2, [pc, #108]	; (80035bc <HAL_GPIO_Init+0x300>)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003552:	4b1a      	ldr	r3, [pc, #104]	; (80035bc <HAL_GPIO_Init+0x300>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	43db      	mvns	r3, r3
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4013      	ands	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003576:	4a11      	ldr	r2, [pc, #68]	; (80035bc <HAL_GPIO_Init+0x300>)
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	3301      	adds	r3, #1
 8003580:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	f47f ae9d 	bne.w	80032cc <HAL_GPIO_Init+0x10>
  }
}
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	371c      	adds	r7, #28
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40010000 	.word	0x40010000
 80035a8:	48000400 	.word	0x48000400
 80035ac:	48000800 	.word	0x48000800
 80035b0:	48000c00 	.word	0x48000c00
 80035b4:	48001000 	.word	0x48001000
 80035b8:	48001400 	.word	0x48001400
 80035bc:	40010400 	.word	0x40010400

080035c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	807b      	strh	r3, [r7, #2]
 80035cc:	4613      	mov	r3, r2
 80035ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035d0:	787b      	ldrb	r3, [r7, #1]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035d6:	887a      	ldrh	r2, [r7, #2]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035dc:	e002      	b.n	80035e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035fa:	4b08      	ldr	r3, [pc, #32]	; (800361c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	4013      	ands	r3, r2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d006      	beq.n	8003614 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003606:	4a05      	ldr	r2, [pc, #20]	; (800361c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800360c:	88fb      	ldrh	r3, [r7, #6]
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f806 	bl	8003620 <HAL_GPIO_EXTI_Callback>
  }
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40010400 	.word	0x40010400

08003620 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d141      	bne.n	80036ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003646:	4b4b      	ldr	r3, [pc, #300]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800364e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003652:	d131      	bne.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003654:	4b47      	ldr	r3, [pc, #284]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800365a:	4a46      	ldr	r2, [pc, #280]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003660:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003664:	4b43      	ldr	r3, [pc, #268]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800366c:	4a41      	ldr	r2, [pc, #260]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003672:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003674:	4b40      	ldr	r3, [pc, #256]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2232      	movs	r2, #50	; 0x32
 800367a:	fb02 f303 	mul.w	r3, r2, r3
 800367e:	4a3f      	ldr	r2, [pc, #252]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003680:	fba2 2303 	umull	r2, r3, r2, r3
 8003684:	0c9b      	lsrs	r3, r3, #18
 8003686:	3301      	adds	r3, #1
 8003688:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800368a:	e002      	b.n	8003692 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3b01      	subs	r3, #1
 8003690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003692:	4b38      	ldr	r3, [pc, #224]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369e:	d102      	bne.n	80036a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f2      	bne.n	800368c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036a6:	4b33      	ldr	r3, [pc, #204]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b2:	d158      	bne.n	8003766 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e057      	b.n	8003768 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036b8:	4b2e      	ldr	r3, [pc, #184]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036be:	4a2d      	ldr	r2, [pc, #180]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036c8:	e04d      	b.n	8003766 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d0:	d141      	bne.n	8003756 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036d2:	4b28      	ldr	r3, [pc, #160]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036de:	d131      	bne.n	8003744 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036e0:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036e6:	4a23      	ldr	r2, [pc, #140]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036f0:	4b20      	ldr	r3, [pc, #128]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036f8:	4a1e      	ldr	r2, [pc, #120]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003700:	4b1d      	ldr	r3, [pc, #116]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2232      	movs	r2, #50	; 0x32
 8003706:	fb02 f303 	mul.w	r3, r2, r3
 800370a:	4a1c      	ldr	r2, [pc, #112]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800370c:	fba2 2303 	umull	r2, r3, r2, r3
 8003710:	0c9b      	lsrs	r3, r3, #18
 8003712:	3301      	adds	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003716:	e002      	b.n	800371e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3b01      	subs	r3, #1
 800371c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372a:	d102      	bne.n	8003732 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f2      	bne.n	8003718 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373e:	d112      	bne.n	8003766 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e011      	b.n	8003768 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800374a:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800374c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003750:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003754:	e007      	b.n	8003766 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800375e:	4a05      	ldr	r2, [pc, #20]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003760:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003764:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	40007000 	.word	0x40007000
 8003778:	20000004 	.word	0x20000004
 800377c:	431bde83 	.word	0x431bde83

08003780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e306      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d075      	beq.n	800388a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800379e:	4b97      	ldr	r3, [pc, #604]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037a8:	4b94      	ldr	r3, [pc, #592]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	2b0c      	cmp	r3, #12
 80037b6:	d102      	bne.n	80037be <HAL_RCC_OscConfig+0x3e>
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d002      	beq.n	80037c4 <HAL_RCC_OscConfig+0x44>
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d10b      	bne.n	80037dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c4:	4b8d      	ldr	r3, [pc, #564]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d05b      	beq.n	8003888 <HAL_RCC_OscConfig+0x108>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d157      	bne.n	8003888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e2e1      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e4:	d106      	bne.n	80037f4 <HAL_RCC_OscConfig+0x74>
 80037e6:	4b85      	ldr	r3, [pc, #532]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a84      	ldr	r2, [pc, #528]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e01d      	b.n	8003830 <HAL_RCC_OscConfig+0xb0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0x98>
 80037fe:	4b7f      	ldr	r3, [pc, #508]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a7e      	ldr	r2, [pc, #504]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4b7c      	ldr	r3, [pc, #496]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a7b      	ldr	r2, [pc, #492]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	e00b      	b.n	8003830 <HAL_RCC_OscConfig+0xb0>
 8003818:	4b78      	ldr	r3, [pc, #480]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a77      	ldr	r2, [pc, #476]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 800381e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b75      	ldr	r3, [pc, #468]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a74      	ldr	r2, [pc, #464]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 800382a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fd ffb8 	bl	80017ac <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003840:	f7fd ffb4 	bl	80017ac <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e2a6      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003852:	4b6a      	ldr	r3, [pc, #424]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0xc0>
 800385e:	e014      	b.n	800388a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003860:	f7fd ffa4 	bl	80017ac <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003868:	f7fd ffa0 	bl	80017ac <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e292      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800387a:	4b60      	ldr	r3, [pc, #384]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0xe8>
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d075      	beq.n	8003982 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003896:	4b59      	ldr	r3, [pc, #356]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038a0:	4b56      	ldr	r3, [pc, #344]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2b0c      	cmp	r3, #12
 80038ae:	d102      	bne.n	80038b6 <HAL_RCC_OscConfig+0x136>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d002      	beq.n	80038bc <HAL_RCC_OscConfig+0x13c>
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d11f      	bne.n	80038fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038bc:	4b4f      	ldr	r3, [pc, #316]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_OscConfig+0x154>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e265      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d4:	4b49      	ldr	r3, [pc, #292]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	061b      	lsls	r3, r3, #24
 80038e2:	4946      	ldr	r1, [pc, #280]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038e8:	4b45      	ldr	r3, [pc, #276]	; (8003a00 <HAL_RCC_OscConfig+0x280>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fd faf1 	bl	8000ed4 <HAL_InitTick>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d043      	beq.n	8003980 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e251      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d023      	beq.n	800394c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003904:	4b3d      	ldr	r3, [pc, #244]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a3c      	ldr	r2, [pc, #240]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 800390a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fd ff4c 	bl	80017ac <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003918:	f7fd ff48 	bl	80017ac <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e23a      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800392a:	4b34      	ldr	r3, [pc, #208]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003936:	4b31      	ldr	r3, [pc, #196]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	061b      	lsls	r3, r3, #24
 8003944:	492d      	ldr	r1, [pc, #180]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003946:	4313      	orrs	r3, r2
 8003948:	604b      	str	r3, [r1, #4]
 800394a:	e01a      	b.n	8003982 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800394c:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a2a      	ldr	r2, [pc, #168]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003952:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fd ff28 	bl	80017ac <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003960:	f7fd ff24 	bl	80017ac <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e216      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003972:	4b22      	ldr	r3, [pc, #136]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x1e0>
 800397e:	e000      	b.n	8003982 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003980:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d041      	beq.n	8003a12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d01c      	beq.n	80039d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003996:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 8003998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399c:	4a17      	ldr	r2, [pc, #92]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a6:	f7fd ff01 	bl	80017ac <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ae:	f7fd fefd 	bl	80017ac <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e1ef      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039c0:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80039c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0ef      	beq.n	80039ae <HAL_RCC_OscConfig+0x22e>
 80039ce:	e020      	b.n	8003a12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d0:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80039d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d6:	4a09      	ldr	r2, [pc, #36]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e0:	f7fd fee4 	bl	80017ac <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039e6:	e00d      	b.n	8003a04 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e8:	f7fd fee0 	bl	80017ac <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d906      	bls.n	8003a04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e1d2      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a04:	4b8c      	ldr	r3, [pc, #560]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1ea      	bne.n	80039e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 80a6 	beq.w	8003b6c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a20:	2300      	movs	r3, #0
 8003a22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a24:	4b84      	ldr	r3, [pc, #528]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_OscConfig+0x2b4>
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <HAL_RCC_OscConfig+0x2b6>
 8003a34:	2300      	movs	r3, #0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00d      	beq.n	8003a56 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3a:	4b7f      	ldr	r3, [pc, #508]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3e:	4a7e      	ldr	r2, [pc, #504]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a44:	6593      	str	r3, [r2, #88]	; 0x58
 8003a46:	4b7c      	ldr	r3, [pc, #496]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a52:	2301      	movs	r3, #1
 8003a54:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a56:	4b79      	ldr	r3, [pc, #484]	; (8003c3c <HAL_RCC_OscConfig+0x4bc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d118      	bne.n	8003a94 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a62:	4b76      	ldr	r3, [pc, #472]	; (8003c3c <HAL_RCC_OscConfig+0x4bc>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a75      	ldr	r2, [pc, #468]	; (8003c3c <HAL_RCC_OscConfig+0x4bc>)
 8003a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a6e:	f7fd fe9d 	bl	80017ac <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a76:	f7fd fe99 	bl	80017ac <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e18b      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a88:	4b6c      	ldr	r3, [pc, #432]	; (8003c3c <HAL_RCC_OscConfig+0x4bc>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d108      	bne.n	8003aae <HAL_RCC_OscConfig+0x32e>
 8003a9c:	4b66      	ldr	r3, [pc, #408]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa2:	4a65      	ldr	r2, [pc, #404]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aac:	e024      	b.n	8003af8 <HAL_RCC_OscConfig+0x378>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b05      	cmp	r3, #5
 8003ab4:	d110      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x358>
 8003ab6:	4b60      	ldr	r3, [pc, #384]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abc:	4a5e      	ldr	r2, [pc, #376]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003abe:	f043 0304 	orr.w	r3, r3, #4
 8003ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac6:	4b5c      	ldr	r3, [pc, #368]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003acc:	4a5a      	ldr	r2, [pc, #360]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad6:	e00f      	b.n	8003af8 <HAL_RCC_OscConfig+0x378>
 8003ad8:	4b57      	ldr	r3, [pc, #348]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ade:	4a56      	ldr	r2, [pc, #344]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003ae0:	f023 0301 	bic.w	r3, r3, #1
 8003ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ae8:	4b53      	ldr	r3, [pc, #332]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aee:	4a52      	ldr	r2, [pc, #328]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003af0:	f023 0304 	bic.w	r3, r3, #4
 8003af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d016      	beq.n	8003b2e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7fd fe54 	bl	80017ac <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b06:	e00a      	b.n	8003b1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fd fe50 	bl	80017ac <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e140      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b1e:	4b46      	ldr	r3, [pc, #280]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0ed      	beq.n	8003b08 <HAL_RCC_OscConfig+0x388>
 8003b2c:	e015      	b.n	8003b5a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2e:	f7fd fe3d 	bl	80017ac <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b34:	e00a      	b.n	8003b4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b36:	f7fd fe39 	bl	80017ac <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e129      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b4c:	4b3a      	ldr	r3, [pc, #232]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1ed      	bne.n	8003b36 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b5a:	7ffb      	ldrb	r3, [r7, #31]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d105      	bne.n	8003b6c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b60:	4b35      	ldr	r3, [pc, #212]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b64:	4a34      	ldr	r2, [pc, #208]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d03c      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01c      	beq.n	8003bba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b80:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b86:	4a2c      	ldr	r2, [pc, #176]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b90:	f7fd fe0c 	bl	80017ac <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b98:	f7fd fe08 	bl	80017ac <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e0fa      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003baa:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003bac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0ef      	beq.n	8003b98 <HAL_RCC_OscConfig+0x418>
 8003bb8:	e01b      	b.n	8003bf2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bba:	4b1f      	ldr	r3, [pc, #124]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003bbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bc0:	4a1d      	ldr	r2, [pc, #116]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bca:	f7fd fdef 	bl	80017ac <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bd2:	f7fd fdeb 	bl	80017ac <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e0dd      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003be4:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1ef      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 80d1 	beq.w	8003d9e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bfc:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b0c      	cmp	r3, #12
 8003c06:	f000 808b 	beq.w	8003d20 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d15e      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <HAL_RCC_OscConfig+0x4b8>)
 8003c18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1e:	f7fd fdc5 	bl	80017ac <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c24:	e00c      	b.n	8003c40 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c26:	f7fd fdc1 	bl	80017ac <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d905      	bls.n	8003c40 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e0b3      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c40:	4b59      	ldr	r3, [pc, #356]	; (8003da8 <HAL_RCC_OscConfig+0x628>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1ec      	bne.n	8003c26 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c4c:	4b56      	ldr	r3, [pc, #344]	; (8003da8 <HAL_RCC_OscConfig+0x628>)
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	4b56      	ldr	r3, [pc, #344]	; (8003dac <HAL_RCC_OscConfig+0x62c>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6a11      	ldr	r1, [r2, #32]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c5c:	3a01      	subs	r2, #1
 8003c5e:	0112      	lsls	r2, r2, #4
 8003c60:	4311      	orrs	r1, r2
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c66:	0212      	lsls	r2, r2, #8
 8003c68:	4311      	orrs	r1, r2
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c6e:	0852      	lsrs	r2, r2, #1
 8003c70:	3a01      	subs	r2, #1
 8003c72:	0552      	lsls	r2, r2, #21
 8003c74:	4311      	orrs	r1, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c7a:	0852      	lsrs	r2, r2, #1
 8003c7c:	3a01      	subs	r2, #1
 8003c7e:	0652      	lsls	r2, r2, #25
 8003c80:	4311      	orrs	r1, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c86:	06d2      	lsls	r2, r2, #27
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	4947      	ldr	r1, [pc, #284]	; (8003da8 <HAL_RCC_OscConfig+0x628>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c90:	4b45      	ldr	r3, [pc, #276]	; (8003da8 <HAL_RCC_OscConfig+0x628>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a44      	ldr	r2, [pc, #272]	; (8003da8 <HAL_RCC_OscConfig+0x628>)
 8003c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c9a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c9c:	4b42      	ldr	r3, [pc, #264]	; (8003da8 <HAL_RCC_OscConfig+0x628>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	4a41      	ldr	r2, [pc, #260]	; (8003da8 <HAL_RCC_OscConfig+0x628>)
 8003ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ca6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fd fd80 	bl	80017ac <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fd fd7c 	bl	80017ac <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e06e      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc2:	4b39      	ldr	r3, [pc, #228]	; (8003da8 <HAL_RCC_OscConfig+0x628>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x530>
 8003cce:	e066      	b.n	8003d9e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd0:	4b35      	ldr	r3, [pc, #212]	; (8003da8 <HAL_RCC_OscConfig+0x628>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a34      	ldr	r2, [pc, #208]	; (8003da8 <HAL_RCC_OscConfig+0x628>)
 8003cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cda:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003cdc:	4b32      	ldr	r3, [pc, #200]	; (8003da8 <HAL_RCC_OscConfig+0x628>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4a31      	ldr	r2, [pc, #196]	; (8003da8 <HAL_RCC_OscConfig+0x628>)
 8003ce2:	f023 0303 	bic.w	r3, r3, #3
 8003ce6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ce8:	4b2f      	ldr	r3, [pc, #188]	; (8003da8 <HAL_RCC_OscConfig+0x628>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4a2e      	ldr	r2, [pc, #184]	; (8003da8 <HAL_RCC_OscConfig+0x628>)
 8003cee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fd fd58 	bl	80017ac <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fd fd54 	bl	80017ac <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e046      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d12:	4b25      	ldr	r3, [pc, #148]	; (8003da8 <HAL_RCC_OscConfig+0x628>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x580>
 8003d1e:	e03e      	b.n	8003d9e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e039      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d2c:	4b1e      	ldr	r3, [pc, #120]	; (8003da8 <HAL_RCC_OscConfig+0x628>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f003 0203 	and.w	r2, r3, #3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d12c      	bne.n	8003d9a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d123      	bne.n	8003d9a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d11b      	bne.n	8003d9a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d113      	bne.n	8003d9a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	085b      	lsrs	r3, r3, #1
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d109      	bne.n	8003d9a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d90:	085b      	lsrs	r3, r3, #1
 8003d92:	3b01      	subs	r3, #1
 8003d94:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d001      	beq.n	8003d9e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3720      	adds	r7, #32
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40021000 	.word	0x40021000
 8003dac:	019f800c 	.word	0x019f800c

08003db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e11e      	b.n	8004006 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b91      	ldr	r3, [pc, #580]	; (8004010 <HAL_RCC_ClockConfig+0x260>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d910      	bls.n	8003df8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b8e      	ldr	r3, [pc, #568]	; (8004010 <HAL_RCC_ClockConfig+0x260>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 020f 	bic.w	r2, r3, #15
 8003dde:	498c      	ldr	r1, [pc, #560]	; (8004010 <HAL_RCC_ClockConfig+0x260>)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b8a      	ldr	r3, [pc, #552]	; (8004010 <HAL_RCC_ClockConfig+0x260>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e106      	b.n	8004006 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d073      	beq.n	8003eec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d129      	bne.n	8003e60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e0c:	4b81      	ldr	r3, [pc, #516]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0f4      	b.n	8004006 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e1c:	f000 f9d0 	bl	80041c0 <RCC_GetSysClockFreqFromPLLSource>
 8003e20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4a7c      	ldr	r2, [pc, #496]	; (8004018 <HAL_RCC_ClockConfig+0x268>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d93f      	bls.n	8003eaa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e2a:	4b7a      	ldr	r3, [pc, #488]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d009      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d033      	beq.n	8003eaa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d12f      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e4a:	4b72      	ldr	r3, [pc, #456]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e52:	4a70      	ldr	r2, [pc, #448]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e5a:	2380      	movs	r3, #128	; 0x80
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	e024      	b.n	8003eaa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d107      	bne.n	8003e78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e68:	4b6a      	ldr	r3, [pc, #424]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d109      	bne.n	8003e88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0c6      	b.n	8004006 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e78:	4b66      	ldr	r3, [pc, #408]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0be      	b.n	8004006 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e88:	f000 f8ce 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8003e8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4a61      	ldr	r2, [pc, #388]	; (8004018 <HAL_RCC_ClockConfig+0x268>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d909      	bls.n	8003eaa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e96:	4b5f      	ldr	r3, [pc, #380]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e9e:	4a5d      	ldr	r2, [pc, #372]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ea6:	2380      	movs	r3, #128	; 0x80
 8003ea8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eaa:	4b5a      	ldr	r3, [pc, #360]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f023 0203 	bic.w	r2, r3, #3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4957      	ldr	r1, [pc, #348]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ebc:	f7fd fc76 	bl	80017ac <HAL_GetTick>
 8003ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec2:	e00a      	b.n	8003eda <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec4:	f7fd fc72 	bl	80017ac <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e095      	b.n	8004006 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eda:	4b4e      	ldr	r3, [pc, #312]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 020c 	and.w	r2, r3, #12
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d1eb      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d023      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f04:	4b43      	ldr	r3, [pc, #268]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	4a42      	ldr	r2, [pc, #264]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003f0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d007      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f1c:	4b3d      	ldr	r3, [pc, #244]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f24:	4a3b      	ldr	r2, [pc, #236]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003f26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f2c:	4b39      	ldr	r3, [pc, #228]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	4936      	ldr	r1, [pc, #216]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b80      	cmp	r3, #128	; 0x80
 8003f44:	d105      	bne.n	8003f52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f46:	4b33      	ldr	r3, [pc, #204]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	4a32      	ldr	r2, [pc, #200]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003f4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f52:	4b2f      	ldr	r3, [pc, #188]	; (8004010 <HAL_RCC_ClockConfig+0x260>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d21d      	bcs.n	8003f9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f60:	4b2b      	ldr	r3, [pc, #172]	; (8004010 <HAL_RCC_ClockConfig+0x260>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f023 020f 	bic.w	r2, r3, #15
 8003f68:	4929      	ldr	r1, [pc, #164]	; (8004010 <HAL_RCC_ClockConfig+0x260>)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f70:	f7fd fc1c 	bl	80017ac <HAL_GetTick>
 8003f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f76:	e00a      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f78:	f7fd fc18 	bl	80017ac <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e03b      	b.n	8004006 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8e:	4b20      	ldr	r3, [pc, #128]	; (8004010 <HAL_RCC_ClockConfig+0x260>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d1ed      	bne.n	8003f78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa8:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4917      	ldr	r1, [pc, #92]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fc6:	4b13      	ldr	r3, [pc, #76]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	490f      	ldr	r1, [pc, #60]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fda:	f000 f825 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <HAL_RCC_ClockConfig+0x264>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	091b      	lsrs	r3, r3, #4
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	490c      	ldr	r1, [pc, #48]	; (800401c <HAL_RCC_ClockConfig+0x26c>)
 8003fec:	5ccb      	ldrb	r3, [r1, r3]
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <HAL_RCC_ClockConfig+0x270>)
 8003ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ffa:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <HAL_RCC_ClockConfig+0x274>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fc ff68 	bl	8000ed4 <HAL_InitTick>
 8004004:	4603      	mov	r3, r0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40022000 	.word	0x40022000
 8004014:	40021000 	.word	0x40021000
 8004018:	04c4b400 	.word	0x04c4b400
 800401c:	0800a334 	.word	0x0800a334
 8004020:	20000004 	.word	0x20000004
 8004024:	20000008 	.word	0x20000008

08004028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800402e:	4b2c      	ldr	r3, [pc, #176]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b04      	cmp	r3, #4
 8004038:	d102      	bne.n	8004040 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800403a:	4b2a      	ldr	r3, [pc, #168]	; (80040e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	e047      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004040:	4b27      	ldr	r3, [pc, #156]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 030c 	and.w	r3, r3, #12
 8004048:	2b08      	cmp	r3, #8
 800404a:	d102      	bne.n	8004052 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800404c:	4b26      	ldr	r3, [pc, #152]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800404e:	613b      	str	r3, [r7, #16]
 8004050:	e03e      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004052:	4b23      	ldr	r3, [pc, #140]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	2b0c      	cmp	r3, #12
 800405c:	d136      	bne.n	80040cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800405e:	4b20      	ldr	r3, [pc, #128]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004068:	4b1d      	ldr	r3, [pc, #116]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	3301      	adds	r3, #1
 8004074:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d10c      	bne.n	8004096 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800407c:	4a1a      	ldr	r2, [pc, #104]	; (80040e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	fbb2 f3f3 	udiv	r3, r2, r3
 8004084:	4a16      	ldr	r2, [pc, #88]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004086:	68d2      	ldr	r2, [r2, #12]
 8004088:	0a12      	lsrs	r2, r2, #8
 800408a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800408e:	fb02 f303 	mul.w	r3, r2, r3
 8004092:	617b      	str	r3, [r7, #20]
      break;
 8004094:	e00c      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004096:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	fbb2 f3f3 	udiv	r3, r2, r3
 800409e:	4a10      	ldr	r2, [pc, #64]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a0:	68d2      	ldr	r2, [r2, #12]
 80040a2:	0a12      	lsrs	r2, r2, #8
 80040a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040a8:	fb02 f303 	mul.w	r3, r2, r3
 80040ac:	617b      	str	r3, [r7, #20]
      break;
 80040ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040b0:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	0e5b      	lsrs	r3, r3, #25
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	3301      	adds	r3, #1
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	e001      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040d0:	693b      	ldr	r3, [r7, #16]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40021000 	.word	0x40021000
 80040e4:	00f42400 	.word	0x00f42400
 80040e8:	016e3600 	.word	0x016e3600

080040ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f0:	4b03      	ldr	r3, [pc, #12]	; (8004100 <HAL_RCC_GetHCLKFreq+0x14>)
 80040f2:	681b      	ldr	r3, [r3, #0]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20000004 	.word	0x20000004

08004104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004108:	f7ff fff0 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 800410c:	4602      	mov	r2, r0
 800410e:	4b06      	ldr	r3, [pc, #24]	; (8004128 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	0a1b      	lsrs	r3, r3, #8
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	4904      	ldr	r1, [pc, #16]	; (800412c <HAL_RCC_GetPCLK1Freq+0x28>)
 800411a:	5ccb      	ldrb	r3, [r1, r3]
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004124:	4618      	mov	r0, r3
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40021000 	.word	0x40021000
 800412c:	0800a344 	.word	0x0800a344

08004130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004134:	f7ff ffda 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 8004138:	4602      	mov	r2, r0
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <HAL_RCC_GetPCLK2Freq+0x24>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	0adb      	lsrs	r3, r3, #11
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	4904      	ldr	r1, [pc, #16]	; (8004158 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004146:	5ccb      	ldrb	r3, [r1, r3]
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004150:	4618      	mov	r0, r3
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40021000 	.word	0x40021000
 8004158:	0800a344 	.word	0x0800a344

0800415c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	220f      	movs	r2, #15
 800416a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800416c:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <HAL_RCC_GetClockConfig+0x5c>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 0203 	and.w	r2, r3, #3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004178:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <HAL_RCC_GetClockConfig+0x5c>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004184:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <HAL_RCC_GetClockConfig+0x5c>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004190:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <HAL_RCC_GetClockConfig+0x5c>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	08db      	lsrs	r3, r3, #3
 8004196:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800419e:	4b07      	ldr	r3, [pc, #28]	; (80041bc <HAL_RCC_GetClockConfig+0x60>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 020f 	and.w	r2, r3, #15
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	601a      	str	r2, [r3, #0]
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40021000 	.word	0x40021000
 80041bc:	40022000 	.word	0x40022000

080041c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041c6:	4b1e      	ldr	r3, [pc, #120]	; (8004240 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041d0:	4b1b      	ldr	r3, [pc, #108]	; (8004240 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	3301      	adds	r3, #1
 80041dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d10c      	bne.n	80041fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041e4:	4a17      	ldr	r2, [pc, #92]	; (8004244 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	4a14      	ldr	r2, [pc, #80]	; (8004240 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041ee:	68d2      	ldr	r2, [r2, #12]
 80041f0:	0a12      	lsrs	r2, r2, #8
 80041f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041f6:	fb02 f303 	mul.w	r3, r2, r3
 80041fa:	617b      	str	r3, [r7, #20]
    break;
 80041fc:	e00c      	b.n	8004218 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041fe:	4a12      	ldr	r2, [pc, #72]	; (8004248 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	fbb2 f3f3 	udiv	r3, r2, r3
 8004206:	4a0e      	ldr	r2, [pc, #56]	; (8004240 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004208:	68d2      	ldr	r2, [r2, #12]
 800420a:	0a12      	lsrs	r2, r2, #8
 800420c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004210:	fb02 f303 	mul.w	r3, r2, r3
 8004214:	617b      	str	r3, [r7, #20]
    break;
 8004216:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004218:	4b09      	ldr	r3, [pc, #36]	; (8004240 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	0e5b      	lsrs	r3, r3, #25
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	3301      	adds	r3, #1
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004230:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004232:	687b      	ldr	r3, [r7, #4]
}
 8004234:	4618      	mov	r0, r3
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	40021000 	.word	0x40021000
 8004244:	016e3600 	.word	0x016e3600
 8004248:	00f42400 	.word	0x00f42400

0800424c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004254:	2300      	movs	r3, #0
 8004256:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004258:	2300      	movs	r3, #0
 800425a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8098 	beq.w	800439a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800426a:	2300      	movs	r3, #0
 800426c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426e:	4b43      	ldr	r3, [pc, #268]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10d      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800427a:	4b40      	ldr	r3, [pc, #256]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800427c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427e:	4a3f      	ldr	r2, [pc, #252]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004284:	6593      	str	r3, [r2, #88]	; 0x58
 8004286:	4b3d      	ldr	r3, [pc, #244]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004292:	2301      	movs	r3, #1
 8004294:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004296:	4b3a      	ldr	r3, [pc, #232]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a39      	ldr	r2, [pc, #228]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800429c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042a2:	f7fd fa83 	bl	80017ac <HAL_GetTick>
 80042a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042a8:	e009      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042aa:	f7fd fa7f 	bl	80017ac <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d902      	bls.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	74fb      	strb	r3, [r7, #19]
        break;
 80042bc:	e005      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042be:	4b30      	ldr	r3, [pc, #192]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0ef      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80042ca:	7cfb      	ldrb	r3, [r7, #19]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d159      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042d0:	4b2a      	ldr	r3, [pc, #168]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01e      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d019      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042ec:	4b23      	ldr	r3, [pc, #140]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042f8:	4b20      	ldr	r3, [pc, #128]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fe:	4a1f      	ldr	r2, [pc, #124]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004308:	4b1c      	ldr	r3, [pc, #112]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	4a1b      	ldr	r2, [pc, #108]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004318:	4a18      	ldr	r2, [pc, #96]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d016      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432a:	f7fd fa3f 	bl	80017ac <HAL_GetTick>
 800432e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004330:	e00b      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004332:	f7fd fa3b 	bl	80017ac <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004340:	4293      	cmp	r3, r2
 8004342:	d902      	bls.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	74fb      	strb	r3, [r7, #19]
            break;
 8004348:	e006      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800434a:	4b0c      	ldr	r3, [pc, #48]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0ec      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004358:	7cfb      	ldrb	r3, [r7, #19]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10b      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800435e:	4b07      	ldr	r3, [pc, #28]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004364:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436c:	4903      	ldr	r1, [pc, #12]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004374:	e008      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004376:	7cfb      	ldrb	r3, [r7, #19]
 8004378:	74bb      	strb	r3, [r7, #18]
 800437a:	e005      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800437c:	40021000 	.word	0x40021000
 8004380:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004384:	7cfb      	ldrb	r3, [r7, #19]
 8004386:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004388:	7c7b      	ldrb	r3, [r7, #17]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d105      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800438e:	4ba7      	ldr	r3, [pc, #668]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004392:	4aa6      	ldr	r2, [pc, #664]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004398:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043a6:	4ba1      	ldr	r3, [pc, #644]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ac:	f023 0203 	bic.w	r2, r3, #3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	499d      	ldr	r1, [pc, #628]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043c8:	4b98      	ldr	r3, [pc, #608]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	f023 020c 	bic.w	r2, r3, #12
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	4995      	ldr	r1, [pc, #596]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043ea:	4b90      	ldr	r3, [pc, #576]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	498c      	ldr	r1, [pc, #560]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800440c:	4b87      	ldr	r3, [pc, #540]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	4984      	ldr	r1, [pc, #528]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0310 	and.w	r3, r3, #16
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800442e:	4b7f      	ldr	r3, [pc, #508]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004434:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	497b      	ldr	r1, [pc, #492]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004450:	4b76      	ldr	r3, [pc, #472]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004456:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	4973      	ldr	r1, [pc, #460]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004472:	4b6e      	ldr	r3, [pc, #440]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004478:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	496a      	ldr	r1, [pc, #424]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004494:	4b65      	ldr	r3, [pc, #404]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	4962      	ldr	r1, [pc, #392]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044b6:	4b5d      	ldr	r3, [pc, #372]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	4959      	ldr	r1, [pc, #356]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044d8:	4b54      	ldr	r3, [pc, #336]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044de:	f023 0203 	bic.w	r2, r3, #3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	4951      	ldr	r1, [pc, #324]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044fa:	4b4c      	ldr	r3, [pc, #304]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004500:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	4948      	ldr	r1, [pc, #288]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004518:	2b00      	cmp	r3, #0
 800451a:	d015      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800451c:	4b43      	ldr	r3, [pc, #268]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004522:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	4940      	ldr	r1, [pc, #256]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800453a:	d105      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800453c:	4b3b      	ldr	r3, [pc, #236]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	4a3a      	ldr	r2, [pc, #232]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004542:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004546:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004550:	2b00      	cmp	r3, #0
 8004552:	d015      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004554:	4b35      	ldr	r3, [pc, #212]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004562:	4932      	ldr	r1, [pc, #200]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004572:	d105      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004574:	4b2d      	ldr	r3, [pc, #180]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4a2c      	ldr	r2, [pc, #176]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800457e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d015      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800458c:	4b27      	ldr	r3, [pc, #156]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004592:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459a:	4924      	ldr	r1, [pc, #144]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045aa:	d105      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045ac:	4b1f      	ldr	r3, [pc, #124]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	4a1e      	ldr	r2, [pc, #120]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d015      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045c4:	4b19      	ldr	r3, [pc, #100]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d2:	4916      	ldr	r1, [pc, #88]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045e2:	d105      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045e4:	4b11      	ldr	r3, [pc, #68]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4a10      	ldr	r2, [pc, #64]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d019      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045fc:	4b0b      	ldr	r3, [pc, #44]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	4908      	ldr	r1, [pc, #32]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800461a:	d109      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800461c:	4b03      	ldr	r3, [pc, #12]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	4a02      	ldr	r2, [pc, #8]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004626:	60d3      	str	r3, [r2, #12]
 8004628:	e002      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800462a:	bf00      	nop
 800462c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d015      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800463c:	4b29      	ldr	r3, [pc, #164]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004642:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	4926      	ldr	r1, [pc, #152]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800465a:	d105      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800465c:	4b21      	ldr	r3, [pc, #132]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	4a20      	ldr	r2, [pc, #128]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004666:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d015      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004674:	4b1b      	ldr	r3, [pc, #108]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004682:	4918      	ldr	r1, [pc, #96]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004692:	d105      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004694:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	4a12      	ldr	r2, [pc, #72]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800469a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800469e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d015      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80046ac:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ba:	490a      	ldr	r1, [pc, #40]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046ca:	d105      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4a04      	ldr	r2, [pc, #16]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80046d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40021000 	.word	0x40021000

080046e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e049      	b.n	800478e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fc feb6 	bl	8001480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3304      	adds	r3, #4
 8004724:	4619      	mov	r1, r3
 8004726:	4610      	mov	r0, r2
 8004728:	f001 f87c 	bl	8005824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d001      	beq.n	80047b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e054      	b.n	800485a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0201 	orr.w	r2, r2, #1
 80047c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a26      	ldr	r2, [pc, #152]	; (8004868 <HAL_TIM_Base_Start_IT+0xd0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d022      	beq.n	8004818 <HAL_TIM_Base_Start_IT+0x80>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047da:	d01d      	beq.n	8004818 <HAL_TIM_Base_Start_IT+0x80>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a22      	ldr	r2, [pc, #136]	; (800486c <HAL_TIM_Base_Start_IT+0xd4>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d018      	beq.n	8004818 <HAL_TIM_Base_Start_IT+0x80>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a21      	ldr	r2, [pc, #132]	; (8004870 <HAL_TIM_Base_Start_IT+0xd8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d013      	beq.n	8004818 <HAL_TIM_Base_Start_IT+0x80>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a1f      	ldr	r2, [pc, #124]	; (8004874 <HAL_TIM_Base_Start_IT+0xdc>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00e      	beq.n	8004818 <HAL_TIM_Base_Start_IT+0x80>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a1e      	ldr	r2, [pc, #120]	; (8004878 <HAL_TIM_Base_Start_IT+0xe0>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d009      	beq.n	8004818 <HAL_TIM_Base_Start_IT+0x80>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a1c      	ldr	r2, [pc, #112]	; (800487c <HAL_TIM_Base_Start_IT+0xe4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d004      	beq.n	8004818 <HAL_TIM_Base_Start_IT+0x80>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a1b      	ldr	r2, [pc, #108]	; (8004880 <HAL_TIM_Base_Start_IT+0xe8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d115      	bne.n	8004844 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	4b19      	ldr	r3, [pc, #100]	; (8004884 <HAL_TIM_Base_Start_IT+0xec>)
 8004820:	4013      	ands	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b06      	cmp	r3, #6
 8004828:	d015      	beq.n	8004856 <HAL_TIM_Base_Start_IT+0xbe>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004830:	d011      	beq.n	8004856 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0201 	orr.w	r2, r2, #1
 8004840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004842:	e008      	b.n	8004856 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0201 	orr.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	e000      	b.n	8004858 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004856:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40012c00 	.word	0x40012c00
 800486c:	40000400 	.word	0x40000400
 8004870:	40000800 	.word	0x40000800
 8004874:	40000c00 	.word	0x40000c00
 8004878:	40013400 	.word	0x40013400
 800487c:	40014000 	.word	0x40014000
 8004880:	40015000 	.word	0x40015000
 8004884:	00010007 	.word	0x00010007

08004888 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e049      	b.n	800492e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f841 	bl	8004936 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3304      	adds	r3, #4
 80048c4:	4619      	mov	r1, r3
 80048c6:	4610      	mov	r0, r2
 80048c8:	f000 ffac 	bl	8005824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d109      	bne.n	8004970 <HAL_TIM_PWM_Start+0x24>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	bf14      	ite	ne
 8004968:	2301      	movne	r3, #1
 800496a:	2300      	moveq	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	e03c      	b.n	80049ea <HAL_TIM_PWM_Start+0x9e>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b04      	cmp	r3, #4
 8004974:	d109      	bne.n	800498a <HAL_TIM_PWM_Start+0x3e>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b01      	cmp	r3, #1
 8004980:	bf14      	ite	ne
 8004982:	2301      	movne	r3, #1
 8004984:	2300      	moveq	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	e02f      	b.n	80049ea <HAL_TIM_PWM_Start+0x9e>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b08      	cmp	r3, #8
 800498e:	d109      	bne.n	80049a4 <HAL_TIM_PWM_Start+0x58>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b01      	cmp	r3, #1
 800499a:	bf14      	ite	ne
 800499c:	2301      	movne	r3, #1
 800499e:	2300      	moveq	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	e022      	b.n	80049ea <HAL_TIM_PWM_Start+0x9e>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b0c      	cmp	r3, #12
 80049a8:	d109      	bne.n	80049be <HAL_TIM_PWM_Start+0x72>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	bf14      	ite	ne
 80049b6:	2301      	movne	r3, #1
 80049b8:	2300      	moveq	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	e015      	b.n	80049ea <HAL_TIM_PWM_Start+0x9e>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b10      	cmp	r3, #16
 80049c2:	d109      	bne.n	80049d8 <HAL_TIM_PWM_Start+0x8c>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	bf14      	ite	ne
 80049d0:	2301      	movne	r3, #1
 80049d2:	2300      	moveq	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	e008      	b.n	80049ea <HAL_TIM_PWM_Start+0x9e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	bf14      	ite	ne
 80049e4:	2301      	movne	r3, #1
 80049e6:	2300      	moveq	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e0a6      	b.n	8004b40 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d104      	bne.n	8004a02 <HAL_TIM_PWM_Start+0xb6>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a00:	e023      	b.n	8004a4a <HAL_TIM_PWM_Start+0xfe>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d104      	bne.n	8004a12 <HAL_TIM_PWM_Start+0xc6>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a10:	e01b      	b.n	8004a4a <HAL_TIM_PWM_Start+0xfe>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d104      	bne.n	8004a22 <HAL_TIM_PWM_Start+0xd6>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a20:	e013      	b.n	8004a4a <HAL_TIM_PWM_Start+0xfe>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b0c      	cmp	r3, #12
 8004a26:	d104      	bne.n	8004a32 <HAL_TIM_PWM_Start+0xe6>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a30:	e00b      	b.n	8004a4a <HAL_TIM_PWM_Start+0xfe>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d104      	bne.n	8004a42 <HAL_TIM_PWM_Start+0xf6>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a40:	e003      	b.n	8004a4a <HAL_TIM_PWM_Start+0xfe>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2202      	movs	r2, #2
 8004a46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	6839      	ldr	r1, [r7, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f001 fc7e 	bl	8006354 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a3a      	ldr	r2, [pc, #232]	; (8004b48 <HAL_TIM_PWM_Start+0x1fc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d018      	beq.n	8004a94 <HAL_TIM_PWM_Start+0x148>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a39      	ldr	r2, [pc, #228]	; (8004b4c <HAL_TIM_PWM_Start+0x200>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d013      	beq.n	8004a94 <HAL_TIM_PWM_Start+0x148>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a37      	ldr	r2, [pc, #220]	; (8004b50 <HAL_TIM_PWM_Start+0x204>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00e      	beq.n	8004a94 <HAL_TIM_PWM_Start+0x148>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a36      	ldr	r2, [pc, #216]	; (8004b54 <HAL_TIM_PWM_Start+0x208>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d009      	beq.n	8004a94 <HAL_TIM_PWM_Start+0x148>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a34      	ldr	r2, [pc, #208]	; (8004b58 <HAL_TIM_PWM_Start+0x20c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <HAL_TIM_PWM_Start+0x148>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a33      	ldr	r2, [pc, #204]	; (8004b5c <HAL_TIM_PWM_Start+0x210>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d101      	bne.n	8004a98 <HAL_TIM_PWM_Start+0x14c>
 8004a94:	2301      	movs	r3, #1
 8004a96:	e000      	b.n	8004a9a <HAL_TIM_PWM_Start+0x14e>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a25      	ldr	r2, [pc, #148]	; (8004b48 <HAL_TIM_PWM_Start+0x1fc>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d022      	beq.n	8004afe <HAL_TIM_PWM_Start+0x1b2>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac0:	d01d      	beq.n	8004afe <HAL_TIM_PWM_Start+0x1b2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a26      	ldr	r2, [pc, #152]	; (8004b60 <HAL_TIM_PWM_Start+0x214>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d018      	beq.n	8004afe <HAL_TIM_PWM_Start+0x1b2>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a24      	ldr	r2, [pc, #144]	; (8004b64 <HAL_TIM_PWM_Start+0x218>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d013      	beq.n	8004afe <HAL_TIM_PWM_Start+0x1b2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a23      	ldr	r2, [pc, #140]	; (8004b68 <HAL_TIM_PWM_Start+0x21c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00e      	beq.n	8004afe <HAL_TIM_PWM_Start+0x1b2>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a19      	ldr	r2, [pc, #100]	; (8004b4c <HAL_TIM_PWM_Start+0x200>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d009      	beq.n	8004afe <HAL_TIM_PWM_Start+0x1b2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a18      	ldr	r2, [pc, #96]	; (8004b50 <HAL_TIM_PWM_Start+0x204>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d004      	beq.n	8004afe <HAL_TIM_PWM_Start+0x1b2>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a18      	ldr	r2, [pc, #96]	; (8004b5c <HAL_TIM_PWM_Start+0x210>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d115      	bne.n	8004b2a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	4b19      	ldr	r3, [pc, #100]	; (8004b6c <HAL_TIM_PWM_Start+0x220>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b06      	cmp	r3, #6
 8004b0e:	d015      	beq.n	8004b3c <HAL_TIM_PWM_Start+0x1f0>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b16:	d011      	beq.n	8004b3c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b28:	e008      	b.n	8004b3c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0201 	orr.w	r2, r2, #1
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	e000      	b.n	8004b3e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40012c00 	.word	0x40012c00
 8004b4c:	40013400 	.word	0x40013400
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40014400 	.word	0x40014400
 8004b58:	40014800 	.word	0x40014800
 8004b5c:	40015000 	.word	0x40015000
 8004b60:	40000400 	.word	0x40000400
 8004b64:	40000800 	.word	0x40000800
 8004b68:	40000c00 	.word	0x40000c00
 8004b6c:	00010007 	.word	0x00010007

08004b70 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e049      	b.n	8004c16 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f841 	bl	8004c1e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3304      	adds	r3, #4
 8004bac:	4619      	mov	r1, r3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	f000 fe38 	bl	8005824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
	...

08004c34 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d104      	bne.n	8004c52 <HAL_TIM_IC_Start_IT+0x1e>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	e023      	b.n	8004c9a <HAL_TIM_IC_Start_IT+0x66>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d104      	bne.n	8004c62 <HAL_TIM_IC_Start_IT+0x2e>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	e01b      	b.n	8004c9a <HAL_TIM_IC_Start_IT+0x66>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d104      	bne.n	8004c72 <HAL_TIM_IC_Start_IT+0x3e>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	e013      	b.n	8004c9a <HAL_TIM_IC_Start_IT+0x66>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b0c      	cmp	r3, #12
 8004c76:	d104      	bne.n	8004c82 <HAL_TIM_IC_Start_IT+0x4e>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	e00b      	b.n	8004c9a <HAL_TIM_IC_Start_IT+0x66>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b10      	cmp	r3, #16
 8004c86:	d104      	bne.n	8004c92 <HAL_TIM_IC_Start_IT+0x5e>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	e003      	b.n	8004c9a <HAL_TIM_IC_Start_IT+0x66>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d104      	bne.n	8004cac <HAL_TIM_IC_Start_IT+0x78>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	e013      	b.n	8004cd4 <HAL_TIM_IC_Start_IT+0xa0>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d104      	bne.n	8004cbc <HAL_TIM_IC_Start_IT+0x88>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	e00b      	b.n	8004cd4 <HAL_TIM_IC_Start_IT+0xa0>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d104      	bne.n	8004ccc <HAL_TIM_IC_Start_IT+0x98>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	e003      	b.n	8004cd4 <HAL_TIM_IC_Start_IT+0xa0>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cd6:	7bbb      	ldrb	r3, [r7, #14]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d102      	bne.n	8004ce2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cdc:	7b7b      	ldrb	r3, [r7, #13]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d001      	beq.n	8004ce6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e0e2      	b.n	8004eac <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d104      	bne.n	8004cf6 <HAL_TIM_IC_Start_IT+0xc2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cf4:	e023      	b.n	8004d3e <HAL_TIM_IC_Start_IT+0x10a>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d104      	bne.n	8004d06 <HAL_TIM_IC_Start_IT+0xd2>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d04:	e01b      	b.n	8004d3e <HAL_TIM_IC_Start_IT+0x10a>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d104      	bne.n	8004d16 <HAL_TIM_IC_Start_IT+0xe2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d14:	e013      	b.n	8004d3e <HAL_TIM_IC_Start_IT+0x10a>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b0c      	cmp	r3, #12
 8004d1a:	d104      	bne.n	8004d26 <HAL_TIM_IC_Start_IT+0xf2>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d24:	e00b      	b.n	8004d3e <HAL_TIM_IC_Start_IT+0x10a>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b10      	cmp	r3, #16
 8004d2a:	d104      	bne.n	8004d36 <HAL_TIM_IC_Start_IT+0x102>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d34:	e003      	b.n	8004d3e <HAL_TIM_IC_Start_IT+0x10a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2202      	movs	r2, #2
 8004d3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <HAL_TIM_IC_Start_IT+0x11a>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d4c:	e013      	b.n	8004d76 <HAL_TIM_IC_Start_IT+0x142>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d104      	bne.n	8004d5e <HAL_TIM_IC_Start_IT+0x12a>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d5c:	e00b      	b.n	8004d76 <HAL_TIM_IC_Start_IT+0x142>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d104      	bne.n	8004d6e <HAL_TIM_IC_Start_IT+0x13a>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d6c:	e003      	b.n	8004d76 <HAL_TIM_IC_Start_IT+0x142>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b0c      	cmp	r3, #12
 8004d7a:	d841      	bhi.n	8004e00 <HAL_TIM_IC_Start_IT+0x1cc>
 8004d7c:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <HAL_TIM_IC_Start_IT+0x150>)
 8004d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d82:	bf00      	nop
 8004d84:	08004db9 	.word	0x08004db9
 8004d88:	08004e01 	.word	0x08004e01
 8004d8c:	08004e01 	.word	0x08004e01
 8004d90:	08004e01 	.word	0x08004e01
 8004d94:	08004dcb 	.word	0x08004dcb
 8004d98:	08004e01 	.word	0x08004e01
 8004d9c:	08004e01 	.word	0x08004e01
 8004da0:	08004e01 	.word	0x08004e01
 8004da4:	08004ddd 	.word	0x08004ddd
 8004da8:	08004e01 	.word	0x08004e01
 8004dac:	08004e01 	.word	0x08004e01
 8004db0:	08004e01 	.word	0x08004e01
 8004db4:	08004def 	.word	0x08004def
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0202 	orr.w	r2, r2, #2
 8004dc6:	60da      	str	r2, [r3, #12]
      break;
 8004dc8:	e01d      	b.n	8004e06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f042 0204 	orr.w	r2, r2, #4
 8004dd8:	60da      	str	r2, [r3, #12]
      break;
 8004dda:	e014      	b.n	8004e06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0208 	orr.w	r2, r2, #8
 8004dea:	60da      	str	r2, [r3, #12]
      break;
 8004dec:	e00b      	b.n	8004e06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0210 	orr.w	r2, r2, #16
 8004dfc:	60da      	str	r2, [r3, #12]
      break;
 8004dfe:	e002      	b.n	8004e06 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
      break;
 8004e04:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d14e      	bne.n	8004eaa <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2201      	movs	r2, #1
 8004e12:	6839      	ldr	r1, [r7, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f001 fa9d 	bl	8006354 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a25      	ldr	r2, [pc, #148]	; (8004eb4 <HAL_TIM_IC_Start_IT+0x280>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d022      	beq.n	8004e6a <HAL_TIM_IC_Start_IT+0x236>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2c:	d01d      	beq.n	8004e6a <HAL_TIM_IC_Start_IT+0x236>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a21      	ldr	r2, [pc, #132]	; (8004eb8 <HAL_TIM_IC_Start_IT+0x284>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d018      	beq.n	8004e6a <HAL_TIM_IC_Start_IT+0x236>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1f      	ldr	r2, [pc, #124]	; (8004ebc <HAL_TIM_IC_Start_IT+0x288>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <HAL_TIM_IC_Start_IT+0x236>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <HAL_TIM_IC_Start_IT+0x28c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00e      	beq.n	8004e6a <HAL_TIM_IC_Start_IT+0x236>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1c      	ldr	r2, [pc, #112]	; (8004ec4 <HAL_TIM_IC_Start_IT+0x290>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d009      	beq.n	8004e6a <HAL_TIM_IC_Start_IT+0x236>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a1b      	ldr	r2, [pc, #108]	; (8004ec8 <HAL_TIM_IC_Start_IT+0x294>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_TIM_IC_Start_IT+0x236>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a19      	ldr	r2, [pc, #100]	; (8004ecc <HAL_TIM_IC_Start_IT+0x298>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d115      	bne.n	8004e96 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	4b17      	ldr	r3, [pc, #92]	; (8004ed0 <HAL_TIM_IC_Start_IT+0x29c>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b06      	cmp	r3, #6
 8004e7a:	d015      	beq.n	8004ea8 <HAL_TIM_IC_Start_IT+0x274>
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e82:	d011      	beq.n	8004ea8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e94:	e008      	b.n	8004ea8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0201 	orr.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	e000      	b.n	8004eaa <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40012c00 	.word	0x40012c00
 8004eb8:	40000400 	.word	0x40000400
 8004ebc:	40000800 	.word	0x40000800
 8004ec0:	40000c00 	.word	0x40000c00
 8004ec4:	40013400 	.word	0x40013400
 8004ec8:	40014000 	.word	0x40014000
 8004ecc:	40015000 	.word	0x40015000
 8004ed0:	00010007 	.word	0x00010007

08004ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d122      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d11b      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0202 	mvn.w	r2, #2
 8004f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fb ff2e 	bl	8000d78 <HAL_TIM_IC_CaptureCallback>
 8004f1c:	e005      	b.n	8004f2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fc62 	bl	80057e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fc69 	bl	80057fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d122      	bne.n	8004f84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d11b      	bne.n	8004f84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0204 	mvn.w	r2, #4
 8004f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2202      	movs	r2, #2
 8004f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fb ff04 	bl	8000d78 <HAL_TIM_IC_CaptureCallback>
 8004f70:	e005      	b.n	8004f7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fc38 	bl	80057e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fc3f 	bl	80057fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d122      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d11b      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0208 	mvn.w	r2, #8
 8004fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2204      	movs	r2, #4
 8004fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fb feda 	bl	8000d78 <HAL_TIM_IC_CaptureCallback>
 8004fc4:	e005      	b.n	8004fd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fc0e 	bl	80057e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fc15 	bl	80057fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b10      	cmp	r3, #16
 8004fe4:	d122      	bne.n	800502c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	2b10      	cmp	r3, #16
 8004ff2:	d11b      	bne.n	800502c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0210 	mvn.w	r2, #16
 8004ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2208      	movs	r2, #8
 8005002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fb feb0 	bl	8000d78 <HAL_TIM_IC_CaptureCallback>
 8005018:	e005      	b.n	8005026 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fbe4 	bl	80057e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fbeb 	bl	80057fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b01      	cmp	r3, #1
 8005038:	d10e      	bne.n	8005058 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b01      	cmp	r3, #1
 8005046:	d107      	bne.n	8005058 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0201 	mvn.w	r2, #1
 8005050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fb ff02 	bl	8000e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005062:	2b80      	cmp	r3, #128	; 0x80
 8005064:	d10e      	bne.n	8005084 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005070:	2b80      	cmp	r3, #128	; 0x80
 8005072:	d107      	bne.n	8005084 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800507c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f001 fba2 	bl	80067c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005092:	d10e      	bne.n	80050b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509e:	2b80      	cmp	r3, #128	; 0x80
 80050a0:	d107      	bne.n	80050b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f001 fb95 	bl	80067dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050bc:	2b40      	cmp	r3, #64	; 0x40
 80050be:	d10e      	bne.n	80050de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ca:	2b40      	cmp	r3, #64	; 0x40
 80050cc:	d107      	bne.n	80050de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fb99 	bl	8005810 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d10e      	bne.n	800510a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b20      	cmp	r3, #32
 80050f8:	d107      	bne.n	800510a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f06f 0220 	mvn.w	r2, #32
 8005102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f001 fb55 	bl	80067b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005118:	d10f      	bne.n	800513a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005128:	d107      	bne.n	800513a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f001 fb5b 	bl	80067f0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005144:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005148:	d10f      	bne.n	800516a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005154:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005158:	d107      	bne.n	800516a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f001 fb4d 	bl	8006804 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005178:	d10f      	bne.n	800519a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005188:	d107      	bne.n	800519a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f001 fb3f 	bl	8006818 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051a8:	d10f      	bne.n	80051ca <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051b8:	d107      	bne.n	80051ca <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80051c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f001 fb31 	bl	800682c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051ca:	bf00      	nop
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b086      	sub	sp, #24
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d101      	bne.n	80051f0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80051ec:	2302      	movs	r3, #2
 80051ee:	e088      	b.n	8005302 <HAL_TIM_IC_ConfigChannel+0x130>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d11b      	bne.n	8005236 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	6819      	ldr	r1, [r3, #0]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f000 fedb 	bl	8005fc8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699a      	ldr	r2, [r3, #24]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 020c 	bic.w	r2, r2, #12
 8005220:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6999      	ldr	r1, [r3, #24]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	619a      	str	r2, [r3, #24]
 8005234:	e060      	b.n	80052f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b04      	cmp	r3, #4
 800523a:	d11c      	bne.n	8005276 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	6819      	ldr	r1, [r3, #0]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f000 ff5f 	bl	800610e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699a      	ldr	r2, [r3, #24]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800525e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6999      	ldr	r1, [r3, #24]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	021a      	lsls	r2, r3, #8
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	619a      	str	r2, [r3, #24]
 8005274:	e040      	b.n	80052f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d11b      	bne.n	80052b4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	6819      	ldr	r1, [r3, #0]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f000 ffac 	bl	80061e8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69da      	ldr	r2, [r3, #28]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 020c 	bic.w	r2, r2, #12
 800529e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69d9      	ldr	r1, [r3, #28]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	61da      	str	r2, [r3, #28]
 80052b2:	e021      	b.n	80052f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b0c      	cmp	r3, #12
 80052b8:	d11c      	bne.n	80052f4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6818      	ldr	r0, [r3, #0]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	6819      	ldr	r1, [r3, #0]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f000 ffc9 	bl	8006260 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69da      	ldr	r2, [r3, #28]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80052dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69d9      	ldr	r1, [r3, #28]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	021a      	lsls	r2, r3, #8
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	61da      	str	r2, [r3, #28]
 80052f2:	e001      	b.n	80052f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005300:	7dfb      	ldrb	r3, [r7, #23]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005322:	2b01      	cmp	r3, #1
 8005324:	d101      	bne.n	800532a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005326:	2302      	movs	r3, #2
 8005328:	e0ff      	b.n	800552a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b14      	cmp	r3, #20
 8005336:	f200 80f0 	bhi.w	800551a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800533a:	a201      	add	r2, pc, #4	; (adr r2, 8005340 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800533c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005340:	08005395 	.word	0x08005395
 8005344:	0800551b 	.word	0x0800551b
 8005348:	0800551b 	.word	0x0800551b
 800534c:	0800551b 	.word	0x0800551b
 8005350:	080053d5 	.word	0x080053d5
 8005354:	0800551b 	.word	0x0800551b
 8005358:	0800551b 	.word	0x0800551b
 800535c:	0800551b 	.word	0x0800551b
 8005360:	08005417 	.word	0x08005417
 8005364:	0800551b 	.word	0x0800551b
 8005368:	0800551b 	.word	0x0800551b
 800536c:	0800551b 	.word	0x0800551b
 8005370:	08005457 	.word	0x08005457
 8005374:	0800551b 	.word	0x0800551b
 8005378:	0800551b 	.word	0x0800551b
 800537c:	0800551b 	.word	0x0800551b
 8005380:	08005499 	.word	0x08005499
 8005384:	0800551b 	.word	0x0800551b
 8005388:	0800551b 	.word	0x0800551b
 800538c:	0800551b 	.word	0x0800551b
 8005390:	080054d9 	.word	0x080054d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68b9      	ldr	r1, [r7, #8]
 800539a:	4618      	mov	r0, r3
 800539c:	f000 faea 	bl	8005974 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0208 	orr.w	r2, r2, #8
 80053ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0204 	bic.w	r2, r2, #4
 80053be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6999      	ldr	r1, [r3, #24]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	619a      	str	r2, [r3, #24]
      break;
 80053d2:	e0a5      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fb64 	bl	8005aa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699a      	ldr	r2, [r3, #24]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699a      	ldr	r2, [r3, #24]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6999      	ldr	r1, [r3, #24]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	021a      	lsls	r2, r3, #8
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	619a      	str	r2, [r3, #24]
      break;
 8005414:	e084      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fbd7 	bl	8005bd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69da      	ldr	r2, [r3, #28]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 0208 	orr.w	r2, r2, #8
 8005430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0204 	bic.w	r2, r2, #4
 8005440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69d9      	ldr	r1, [r3, #28]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	61da      	str	r2, [r3, #28]
      break;
 8005454:	e064      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68b9      	ldr	r1, [r7, #8]
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fc49 	bl	8005cf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69da      	ldr	r2, [r3, #28]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	69da      	ldr	r2, [r3, #28]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	69d9      	ldr	r1, [r3, #28]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	021a      	lsls	r2, r3, #8
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	61da      	str	r2, [r3, #28]
      break;
 8005496:	e043      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fcbc 	bl	8005e1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0208 	orr.w	r2, r2, #8
 80054b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0204 	bic.w	r2, r2, #4
 80054c2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80054d6:	e023      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68b9      	ldr	r1, [r7, #8]
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fd06 	bl	8005ef0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005502:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	021a      	lsls	r2, r3, #8
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005518:	e002      	b.n	8005520 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	75fb      	strb	r3, [r7, #23]
      break;
 800551e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005528:	7dfb      	ldrb	r3, [r7, #23]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop

08005534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <HAL_TIM_ConfigClockSource+0x1c>
 800554c:	2302      	movs	r3, #2
 800554e:	e0f6      	b.n	800573e <HAL_TIM_ConfigClockSource+0x20a>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800556e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800557a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a6f      	ldr	r2, [pc, #444]	; (8005748 <HAL_TIM_ConfigClockSource+0x214>)
 800558a:	4293      	cmp	r3, r2
 800558c:	f000 80c1 	beq.w	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 8005590:	4a6d      	ldr	r2, [pc, #436]	; (8005748 <HAL_TIM_ConfigClockSource+0x214>)
 8005592:	4293      	cmp	r3, r2
 8005594:	f200 80c6 	bhi.w	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 8005598:	4a6c      	ldr	r2, [pc, #432]	; (800574c <HAL_TIM_ConfigClockSource+0x218>)
 800559a:	4293      	cmp	r3, r2
 800559c:	f000 80b9 	beq.w	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 80055a0:	4a6a      	ldr	r2, [pc, #424]	; (800574c <HAL_TIM_ConfigClockSource+0x218>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	f200 80be 	bhi.w	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 80055a8:	4a69      	ldr	r2, [pc, #420]	; (8005750 <HAL_TIM_ConfigClockSource+0x21c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	f000 80b1 	beq.w	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 80055b0:	4a67      	ldr	r2, [pc, #412]	; (8005750 <HAL_TIM_ConfigClockSource+0x21c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	f200 80b6 	bhi.w	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 80055b8:	4a66      	ldr	r2, [pc, #408]	; (8005754 <HAL_TIM_ConfigClockSource+0x220>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	f000 80a9 	beq.w	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 80055c0:	4a64      	ldr	r2, [pc, #400]	; (8005754 <HAL_TIM_ConfigClockSource+0x220>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	f200 80ae 	bhi.w	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 80055c8:	4a63      	ldr	r2, [pc, #396]	; (8005758 <HAL_TIM_ConfigClockSource+0x224>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	f000 80a1 	beq.w	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 80055d0:	4a61      	ldr	r2, [pc, #388]	; (8005758 <HAL_TIM_ConfigClockSource+0x224>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	f200 80a6 	bhi.w	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 80055d8:	4a60      	ldr	r2, [pc, #384]	; (800575c <HAL_TIM_ConfigClockSource+0x228>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	f000 8099 	beq.w	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 80055e0:	4a5e      	ldr	r2, [pc, #376]	; (800575c <HAL_TIM_ConfigClockSource+0x228>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	f200 809e 	bhi.w	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 80055e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80055ec:	f000 8091 	beq.w	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 80055f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80055f4:	f200 8096 	bhi.w	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 80055f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055fc:	f000 8089 	beq.w	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 8005600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005604:	f200 808e 	bhi.w	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 8005608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800560c:	d03e      	beq.n	800568c <HAL_TIM_ConfigClockSource+0x158>
 800560e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005612:	f200 8087 	bhi.w	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 8005616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800561a:	f000 8086 	beq.w	800572a <HAL_TIM_ConfigClockSource+0x1f6>
 800561e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005622:	d87f      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 8005624:	2b70      	cmp	r3, #112	; 0x70
 8005626:	d01a      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x12a>
 8005628:	2b70      	cmp	r3, #112	; 0x70
 800562a:	d87b      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 800562c:	2b60      	cmp	r3, #96	; 0x60
 800562e:	d050      	beq.n	80056d2 <HAL_TIM_ConfigClockSource+0x19e>
 8005630:	2b60      	cmp	r3, #96	; 0x60
 8005632:	d877      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 8005634:	2b50      	cmp	r3, #80	; 0x50
 8005636:	d03c      	beq.n	80056b2 <HAL_TIM_ConfigClockSource+0x17e>
 8005638:	2b50      	cmp	r3, #80	; 0x50
 800563a:	d873      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 800563c:	2b40      	cmp	r3, #64	; 0x40
 800563e:	d058      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0x1be>
 8005640:	2b40      	cmp	r3, #64	; 0x40
 8005642:	d86f      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 8005644:	2b30      	cmp	r3, #48	; 0x30
 8005646:	d064      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 8005648:	2b30      	cmp	r3, #48	; 0x30
 800564a:	d86b      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 800564c:	2b20      	cmp	r3, #32
 800564e:	d060      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 8005650:	2b20      	cmp	r3, #32
 8005652:	d867      	bhi.n	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
 8005654:	2b00      	cmp	r3, #0
 8005656:	d05c      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 8005658:	2b10      	cmp	r3, #16
 800565a:	d05a      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0x1de>
 800565c:	e062      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6818      	ldr	r0, [r3, #0]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6899      	ldr	r1, [r3, #8]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f000 fe51 	bl	8006314 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005680:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	609a      	str	r2, [r3, #8]
      break;
 800568a:	e04f      	b.n	800572c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6818      	ldr	r0, [r3, #0]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	6899      	ldr	r1, [r3, #8]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f000 fe3a 	bl	8006314 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056ae:	609a      	str	r2, [r3, #8]
      break;
 80056b0:	e03c      	b.n	800572c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6818      	ldr	r0, [r3, #0]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	6859      	ldr	r1, [r3, #4]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	461a      	mov	r2, r3
 80056c0:	f000 fcf6 	bl	80060b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2150      	movs	r1, #80	; 0x50
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fe05 	bl	80062da <TIM_ITRx_SetConfig>
      break;
 80056d0:	e02c      	b.n	800572c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6818      	ldr	r0, [r3, #0]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6859      	ldr	r1, [r3, #4]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	461a      	mov	r2, r3
 80056e0:	f000 fd52 	bl	8006188 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2160      	movs	r1, #96	; 0x60
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fdf5 	bl	80062da <TIM_ITRx_SetConfig>
      break;
 80056f0:	e01c      	b.n	800572c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6859      	ldr	r1, [r3, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	461a      	mov	r2, r3
 8005700:	f000 fcd6 	bl	80060b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2140      	movs	r1, #64	; 0x40
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fde5 	bl	80062da <TIM_ITRx_SetConfig>
      break;
 8005710:	e00c      	b.n	800572c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4619      	mov	r1, r3
 800571c:	4610      	mov	r0, r2
 800571e:	f000 fddc 	bl	80062da <TIM_ITRx_SetConfig>
      break;
 8005722:	e003      	b.n	800572c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	73fb      	strb	r3, [r7, #15]
      break;
 8005728:	e000      	b.n	800572c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800572a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800573c:	7bfb      	ldrb	r3, [r7, #15]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	00100070 	.word	0x00100070
 800574c:	00100060 	.word	0x00100060
 8005750:	00100050 	.word	0x00100050
 8005754:	00100040 	.word	0x00100040
 8005758:	00100030 	.word	0x00100030
 800575c:	00100020 	.word	0x00100020

08005760 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b0c      	cmp	r3, #12
 8005772:	d831      	bhi.n	80057d8 <HAL_TIM_ReadCapturedValue+0x78>
 8005774:	a201      	add	r2, pc, #4	; (adr r2, 800577c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577a:	bf00      	nop
 800577c:	080057b1 	.word	0x080057b1
 8005780:	080057d9 	.word	0x080057d9
 8005784:	080057d9 	.word	0x080057d9
 8005788:	080057d9 	.word	0x080057d9
 800578c:	080057bb 	.word	0x080057bb
 8005790:	080057d9 	.word	0x080057d9
 8005794:	080057d9 	.word	0x080057d9
 8005798:	080057d9 	.word	0x080057d9
 800579c:	080057c5 	.word	0x080057c5
 80057a0:	080057d9 	.word	0x080057d9
 80057a4:	080057d9 	.word	0x080057d9
 80057a8:	080057d9 	.word	0x080057d9
 80057ac:	080057cf 	.word	0x080057cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b6:	60fb      	str	r3, [r7, #12]

      break;
 80057b8:	e00f      	b.n	80057da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	60fb      	str	r3, [r7, #12]

      break;
 80057c2:	e00a      	b.n	80057da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ca:	60fb      	str	r3, [r7, #12]

      break;
 80057cc:	e005      	b.n	80057da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	60fb      	str	r3, [r7, #12]

      break;
 80057d6:	e000      	b.n	80057da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80057d8:	bf00      	nop
  }

  return tmpreg;
 80057da:	68fb      	ldr	r3, [r7, #12]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a46      	ldr	r2, [pc, #280]	; (8005950 <TIM_Base_SetConfig+0x12c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d017      	beq.n	800586c <TIM_Base_SetConfig+0x48>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005842:	d013      	beq.n	800586c <TIM_Base_SetConfig+0x48>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a43      	ldr	r2, [pc, #268]	; (8005954 <TIM_Base_SetConfig+0x130>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00f      	beq.n	800586c <TIM_Base_SetConfig+0x48>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a42      	ldr	r2, [pc, #264]	; (8005958 <TIM_Base_SetConfig+0x134>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00b      	beq.n	800586c <TIM_Base_SetConfig+0x48>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a41      	ldr	r2, [pc, #260]	; (800595c <TIM_Base_SetConfig+0x138>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d007      	beq.n	800586c <TIM_Base_SetConfig+0x48>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a40      	ldr	r2, [pc, #256]	; (8005960 <TIM_Base_SetConfig+0x13c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d003      	beq.n	800586c <TIM_Base_SetConfig+0x48>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a3f      	ldr	r2, [pc, #252]	; (8005964 <TIM_Base_SetConfig+0x140>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d108      	bne.n	800587e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a33      	ldr	r2, [pc, #204]	; (8005950 <TIM_Base_SetConfig+0x12c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d023      	beq.n	80058ce <TIM_Base_SetConfig+0xaa>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800588c:	d01f      	beq.n	80058ce <TIM_Base_SetConfig+0xaa>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a30      	ldr	r2, [pc, #192]	; (8005954 <TIM_Base_SetConfig+0x130>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d01b      	beq.n	80058ce <TIM_Base_SetConfig+0xaa>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a2f      	ldr	r2, [pc, #188]	; (8005958 <TIM_Base_SetConfig+0x134>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d017      	beq.n	80058ce <TIM_Base_SetConfig+0xaa>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a2e      	ldr	r2, [pc, #184]	; (800595c <TIM_Base_SetConfig+0x138>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d013      	beq.n	80058ce <TIM_Base_SetConfig+0xaa>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a2d      	ldr	r2, [pc, #180]	; (8005960 <TIM_Base_SetConfig+0x13c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00f      	beq.n	80058ce <TIM_Base_SetConfig+0xaa>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a2d      	ldr	r2, [pc, #180]	; (8005968 <TIM_Base_SetConfig+0x144>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00b      	beq.n	80058ce <TIM_Base_SetConfig+0xaa>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a2c      	ldr	r2, [pc, #176]	; (800596c <TIM_Base_SetConfig+0x148>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d007      	beq.n	80058ce <TIM_Base_SetConfig+0xaa>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a2b      	ldr	r2, [pc, #172]	; (8005970 <TIM_Base_SetConfig+0x14c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d003      	beq.n	80058ce <TIM_Base_SetConfig+0xaa>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a26      	ldr	r2, [pc, #152]	; (8005964 <TIM_Base_SetConfig+0x140>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d108      	bne.n	80058e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a12      	ldr	r2, [pc, #72]	; (8005950 <TIM_Base_SetConfig+0x12c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d013      	beq.n	8005934 <TIM_Base_SetConfig+0x110>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a14      	ldr	r2, [pc, #80]	; (8005960 <TIM_Base_SetConfig+0x13c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00f      	beq.n	8005934 <TIM_Base_SetConfig+0x110>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a14      	ldr	r2, [pc, #80]	; (8005968 <TIM_Base_SetConfig+0x144>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00b      	beq.n	8005934 <TIM_Base_SetConfig+0x110>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a13      	ldr	r2, [pc, #76]	; (800596c <TIM_Base_SetConfig+0x148>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d007      	beq.n	8005934 <TIM_Base_SetConfig+0x110>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a12      	ldr	r2, [pc, #72]	; (8005970 <TIM_Base_SetConfig+0x14c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <TIM_Base_SetConfig+0x110>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a0d      	ldr	r2, [pc, #52]	; (8005964 <TIM_Base_SetConfig+0x140>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d103      	bne.n	800593c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	691a      	ldr	r2, [r3, #16]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	615a      	str	r2, [r3, #20]
}
 8005942:	bf00      	nop
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40012c00 	.word	0x40012c00
 8005954:	40000400 	.word	0x40000400
 8005958:	40000800 	.word	0x40000800
 800595c:	40000c00 	.word	0x40000c00
 8005960:	40013400 	.word	0x40013400
 8005964:	40015000 	.word	0x40015000
 8005968:	40014000 	.word	0x40014000
 800596c:	40014400 	.word	0x40014400
 8005970:	40014800 	.word	0x40014800

08005974 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005974:	b480      	push	{r7}
 8005976:	b087      	sub	sp, #28
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	f023 0201 	bic.w	r2, r3, #1
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0303 	bic.w	r3, r3, #3
 80059ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f023 0302 	bic.w	r3, r3, #2
 80059c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a30      	ldr	r2, [pc, #192]	; (8005a90 <TIM_OC1_SetConfig+0x11c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d013      	beq.n	80059fc <TIM_OC1_SetConfig+0x88>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a2f      	ldr	r2, [pc, #188]	; (8005a94 <TIM_OC1_SetConfig+0x120>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00f      	beq.n	80059fc <TIM_OC1_SetConfig+0x88>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a2e      	ldr	r2, [pc, #184]	; (8005a98 <TIM_OC1_SetConfig+0x124>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00b      	beq.n	80059fc <TIM_OC1_SetConfig+0x88>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a2d      	ldr	r2, [pc, #180]	; (8005a9c <TIM_OC1_SetConfig+0x128>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d007      	beq.n	80059fc <TIM_OC1_SetConfig+0x88>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a2c      	ldr	r2, [pc, #176]	; (8005aa0 <TIM_OC1_SetConfig+0x12c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d003      	beq.n	80059fc <TIM_OC1_SetConfig+0x88>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a2b      	ldr	r2, [pc, #172]	; (8005aa4 <TIM_OC1_SetConfig+0x130>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d10c      	bne.n	8005a16 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f023 0308 	bic.w	r3, r3, #8
 8005a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f023 0304 	bic.w	r3, r3, #4
 8005a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a1d      	ldr	r2, [pc, #116]	; (8005a90 <TIM_OC1_SetConfig+0x11c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d013      	beq.n	8005a46 <TIM_OC1_SetConfig+0xd2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a1c      	ldr	r2, [pc, #112]	; (8005a94 <TIM_OC1_SetConfig+0x120>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00f      	beq.n	8005a46 <TIM_OC1_SetConfig+0xd2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a1b      	ldr	r2, [pc, #108]	; (8005a98 <TIM_OC1_SetConfig+0x124>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00b      	beq.n	8005a46 <TIM_OC1_SetConfig+0xd2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a1a      	ldr	r2, [pc, #104]	; (8005a9c <TIM_OC1_SetConfig+0x128>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d007      	beq.n	8005a46 <TIM_OC1_SetConfig+0xd2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a19      	ldr	r2, [pc, #100]	; (8005aa0 <TIM_OC1_SetConfig+0x12c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d003      	beq.n	8005a46 <TIM_OC1_SetConfig+0xd2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a18      	ldr	r2, [pc, #96]	; (8005aa4 <TIM_OC1_SetConfig+0x130>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d111      	bne.n	8005a6a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	621a      	str	r2, [r3, #32]
}
 8005a84:	bf00      	nop
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	40012c00 	.word	0x40012c00
 8005a94:	40013400 	.word	0x40013400
 8005a98:	40014000 	.word	0x40014000
 8005a9c:	40014400 	.word	0x40014400
 8005aa0:	40014800 	.word	0x40014800
 8005aa4:	40015000 	.word	0x40015000

08005aa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f023 0210 	bic.w	r2, r3, #16
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	021b      	lsls	r3, r3, #8
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	f023 0320 	bic.w	r3, r3, #32
 8005af6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	011b      	lsls	r3, r3, #4
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a2c      	ldr	r2, [pc, #176]	; (8005bb8 <TIM_OC2_SetConfig+0x110>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d007      	beq.n	8005b1c <TIM_OC2_SetConfig+0x74>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a2b      	ldr	r2, [pc, #172]	; (8005bbc <TIM_OC2_SetConfig+0x114>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_OC2_SetConfig+0x74>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a2a      	ldr	r2, [pc, #168]	; (8005bc0 <TIM_OC2_SetConfig+0x118>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d10d      	bne.n	8005b38 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	011b      	lsls	r3, r3, #4
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a1f      	ldr	r2, [pc, #124]	; (8005bb8 <TIM_OC2_SetConfig+0x110>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d013      	beq.n	8005b68 <TIM_OC2_SetConfig+0xc0>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a1e      	ldr	r2, [pc, #120]	; (8005bbc <TIM_OC2_SetConfig+0x114>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d00f      	beq.n	8005b68 <TIM_OC2_SetConfig+0xc0>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a1e      	ldr	r2, [pc, #120]	; (8005bc4 <TIM_OC2_SetConfig+0x11c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00b      	beq.n	8005b68 <TIM_OC2_SetConfig+0xc0>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a1d      	ldr	r2, [pc, #116]	; (8005bc8 <TIM_OC2_SetConfig+0x120>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d007      	beq.n	8005b68 <TIM_OC2_SetConfig+0xc0>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a1c      	ldr	r2, [pc, #112]	; (8005bcc <TIM_OC2_SetConfig+0x124>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d003      	beq.n	8005b68 <TIM_OC2_SetConfig+0xc0>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <TIM_OC2_SetConfig+0x118>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d113      	bne.n	8005b90 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	621a      	str	r2, [r3, #32]
}
 8005baa:	bf00      	nop
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40012c00 	.word	0x40012c00
 8005bbc:	40013400 	.word	0x40013400
 8005bc0:	40015000 	.word	0x40015000
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40014400 	.word	0x40014400
 8005bcc:	40014800 	.word	0x40014800

08005bd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0303 	bic.w	r3, r3, #3
 8005c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a2b      	ldr	r2, [pc, #172]	; (8005cdc <TIM_OC3_SetConfig+0x10c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d007      	beq.n	8005c42 <TIM_OC3_SetConfig+0x72>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a2a      	ldr	r2, [pc, #168]	; (8005ce0 <TIM_OC3_SetConfig+0x110>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d003      	beq.n	8005c42 <TIM_OC3_SetConfig+0x72>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a29      	ldr	r2, [pc, #164]	; (8005ce4 <TIM_OC3_SetConfig+0x114>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d10d      	bne.n	8005c5e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a1e      	ldr	r2, [pc, #120]	; (8005cdc <TIM_OC3_SetConfig+0x10c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d013      	beq.n	8005c8e <TIM_OC3_SetConfig+0xbe>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a1d      	ldr	r2, [pc, #116]	; (8005ce0 <TIM_OC3_SetConfig+0x110>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d00f      	beq.n	8005c8e <TIM_OC3_SetConfig+0xbe>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a1d      	ldr	r2, [pc, #116]	; (8005ce8 <TIM_OC3_SetConfig+0x118>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00b      	beq.n	8005c8e <TIM_OC3_SetConfig+0xbe>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a1c      	ldr	r2, [pc, #112]	; (8005cec <TIM_OC3_SetConfig+0x11c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d007      	beq.n	8005c8e <TIM_OC3_SetConfig+0xbe>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a1b      	ldr	r2, [pc, #108]	; (8005cf0 <TIM_OC3_SetConfig+0x120>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d003      	beq.n	8005c8e <TIM_OC3_SetConfig+0xbe>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a16      	ldr	r2, [pc, #88]	; (8005ce4 <TIM_OC3_SetConfig+0x114>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d113      	bne.n	8005cb6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	621a      	str	r2, [r3, #32]
}
 8005cd0:	bf00      	nop
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	40012c00 	.word	0x40012c00
 8005ce0:	40013400 	.word	0x40013400
 8005ce4:	40015000 	.word	0x40015000
 8005ce8:	40014000 	.word	0x40014000
 8005cec:	40014400 	.word	0x40014400
 8005cf0:	40014800 	.word	0x40014800

08005cf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	021b      	lsls	r3, r3, #8
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	031b      	lsls	r3, r3, #12
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a2c      	ldr	r2, [pc, #176]	; (8005e04 <TIM_OC4_SetConfig+0x110>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d007      	beq.n	8005d68 <TIM_OC4_SetConfig+0x74>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a2b      	ldr	r2, [pc, #172]	; (8005e08 <TIM_OC4_SetConfig+0x114>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d003      	beq.n	8005d68 <TIM_OC4_SetConfig+0x74>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a2a      	ldr	r2, [pc, #168]	; (8005e0c <TIM_OC4_SetConfig+0x118>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d10d      	bne.n	8005d84 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	031b      	lsls	r3, r3, #12
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a1f      	ldr	r2, [pc, #124]	; (8005e04 <TIM_OC4_SetConfig+0x110>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d013      	beq.n	8005db4 <TIM_OC4_SetConfig+0xc0>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a1e      	ldr	r2, [pc, #120]	; (8005e08 <TIM_OC4_SetConfig+0x114>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00f      	beq.n	8005db4 <TIM_OC4_SetConfig+0xc0>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a1e      	ldr	r2, [pc, #120]	; (8005e10 <TIM_OC4_SetConfig+0x11c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00b      	beq.n	8005db4 <TIM_OC4_SetConfig+0xc0>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a1d      	ldr	r2, [pc, #116]	; (8005e14 <TIM_OC4_SetConfig+0x120>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d007      	beq.n	8005db4 <TIM_OC4_SetConfig+0xc0>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a1c      	ldr	r2, [pc, #112]	; (8005e18 <TIM_OC4_SetConfig+0x124>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_OC4_SetConfig+0xc0>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a17      	ldr	r2, [pc, #92]	; (8005e0c <TIM_OC4_SetConfig+0x118>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d113      	bne.n	8005ddc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dc2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	019b      	lsls	r3, r3, #6
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	019b      	lsls	r3, r3, #6
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	621a      	str	r2, [r3, #32]
}
 8005df6:	bf00      	nop
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	40012c00 	.word	0x40012c00
 8005e08:	40013400 	.word	0x40013400
 8005e0c:	40015000 	.word	0x40015000
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40014400 	.word	0x40014400
 8005e18:	40014800 	.word	0x40014800

08005e1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	041b      	lsls	r3, r3, #16
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a19      	ldr	r2, [pc, #100]	; (8005ed8 <TIM_OC5_SetConfig+0xbc>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d013      	beq.n	8005e9e <TIM_OC5_SetConfig+0x82>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a18      	ldr	r2, [pc, #96]	; (8005edc <TIM_OC5_SetConfig+0xc0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00f      	beq.n	8005e9e <TIM_OC5_SetConfig+0x82>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a17      	ldr	r2, [pc, #92]	; (8005ee0 <TIM_OC5_SetConfig+0xc4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00b      	beq.n	8005e9e <TIM_OC5_SetConfig+0x82>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a16      	ldr	r2, [pc, #88]	; (8005ee4 <TIM_OC5_SetConfig+0xc8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d007      	beq.n	8005e9e <TIM_OC5_SetConfig+0x82>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a15      	ldr	r2, [pc, #84]	; (8005ee8 <TIM_OC5_SetConfig+0xcc>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d003      	beq.n	8005e9e <TIM_OC5_SetConfig+0x82>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a14      	ldr	r2, [pc, #80]	; (8005eec <TIM_OC5_SetConfig+0xd0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d109      	bne.n	8005eb2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	021b      	lsls	r3, r3, #8
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	621a      	str	r2, [r3, #32]
}
 8005ecc:	bf00      	nop
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	40012c00 	.word	0x40012c00
 8005edc:	40013400 	.word	0x40013400
 8005ee0:	40014000 	.word	0x40014000
 8005ee4:	40014400 	.word	0x40014400
 8005ee8:	40014800 	.word	0x40014800
 8005eec:	40015000 	.word	0x40015000

08005ef0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	021b      	lsls	r3, r3, #8
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	051b      	lsls	r3, r3, #20
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a1a      	ldr	r2, [pc, #104]	; (8005fb0 <TIM_OC6_SetConfig+0xc0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d013      	beq.n	8005f74 <TIM_OC6_SetConfig+0x84>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a19      	ldr	r2, [pc, #100]	; (8005fb4 <TIM_OC6_SetConfig+0xc4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00f      	beq.n	8005f74 <TIM_OC6_SetConfig+0x84>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a18      	ldr	r2, [pc, #96]	; (8005fb8 <TIM_OC6_SetConfig+0xc8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00b      	beq.n	8005f74 <TIM_OC6_SetConfig+0x84>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a17      	ldr	r2, [pc, #92]	; (8005fbc <TIM_OC6_SetConfig+0xcc>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d007      	beq.n	8005f74 <TIM_OC6_SetConfig+0x84>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a16      	ldr	r2, [pc, #88]	; (8005fc0 <TIM_OC6_SetConfig+0xd0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d003      	beq.n	8005f74 <TIM_OC6_SetConfig+0x84>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a15      	ldr	r2, [pc, #84]	; (8005fc4 <TIM_OC6_SetConfig+0xd4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d109      	bne.n	8005f88 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	029b      	lsls	r3, r3, #10
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	621a      	str	r2, [r3, #32]
}
 8005fa2:	bf00      	nop
 8005fa4:	371c      	adds	r7, #28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40012c00 	.word	0x40012c00
 8005fb4:	40013400 	.word	0x40013400
 8005fb8:	40014000 	.word	0x40014000
 8005fbc:	40014400 	.word	0x40014400
 8005fc0:	40014800 	.word	0x40014800
 8005fc4:	40015000 	.word	0x40015000

08005fc8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	f023 0201 	bic.w	r2, r3, #1
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4a28      	ldr	r2, [pc, #160]	; (8006094 <TIM_TI1_SetConfig+0xcc>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d01b      	beq.n	800602e <TIM_TI1_SetConfig+0x66>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffc:	d017      	beq.n	800602e <TIM_TI1_SetConfig+0x66>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4a25      	ldr	r2, [pc, #148]	; (8006098 <TIM_TI1_SetConfig+0xd0>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d013      	beq.n	800602e <TIM_TI1_SetConfig+0x66>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	4a24      	ldr	r2, [pc, #144]	; (800609c <TIM_TI1_SetConfig+0xd4>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00f      	beq.n	800602e <TIM_TI1_SetConfig+0x66>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4a23      	ldr	r2, [pc, #140]	; (80060a0 <TIM_TI1_SetConfig+0xd8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00b      	beq.n	800602e <TIM_TI1_SetConfig+0x66>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4a22      	ldr	r2, [pc, #136]	; (80060a4 <TIM_TI1_SetConfig+0xdc>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d007      	beq.n	800602e <TIM_TI1_SetConfig+0x66>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4a21      	ldr	r2, [pc, #132]	; (80060a8 <TIM_TI1_SetConfig+0xe0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d003      	beq.n	800602e <TIM_TI1_SetConfig+0x66>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4a20      	ldr	r2, [pc, #128]	; (80060ac <TIM_TI1_SetConfig+0xe4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d101      	bne.n	8006032 <TIM_TI1_SetConfig+0x6a>
 800602e:	2301      	movs	r3, #1
 8006030:	e000      	b.n	8006034 <TIM_TI1_SetConfig+0x6c>
 8006032:	2300      	movs	r3, #0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d008      	beq.n	800604a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f023 0303 	bic.w	r3, r3, #3
 800603e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	e003      	b.n	8006052 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f043 0301 	orr.w	r3, r3, #1
 8006050:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006058:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	011b      	lsls	r3, r3, #4
 800605e:	b2db      	uxtb	r3, r3
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f023 030a 	bic.w	r3, r3, #10
 800606c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f003 030a 	and.w	r3, r3, #10
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	621a      	str	r2, [r3, #32]
}
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40012c00 	.word	0x40012c00
 8006098:	40000400 	.word	0x40000400
 800609c:	40000800 	.word	0x40000800
 80060a0:	40000c00 	.word	0x40000c00
 80060a4:	40013400 	.word	0x40013400
 80060a8:	40014000 	.word	0x40014000
 80060ac:	40015000 	.word	0x40015000

080060b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	f023 0201 	bic.w	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f023 030a 	bic.w	r3, r3, #10
 80060ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	621a      	str	r2, [r3, #32]
}
 8006102:	bf00      	nop
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800610e:	b480      	push	{r7}
 8006110:	b087      	sub	sp, #28
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	607a      	str	r2, [r7, #4]
 800611a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	f023 0210 	bic.w	r2, r3, #16
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800613a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800614c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	031b      	lsls	r3, r3, #12
 8006152:	b29b      	uxth	r3, r3
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	4313      	orrs	r3, r2
 8006158:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006160:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	011b      	lsls	r3, r3, #4
 8006166:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	621a      	str	r2, [r3, #32]
}
 800617c:	bf00      	nop
 800617e:	371c      	adds	r7, #28
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	f023 0210 	bic.w	r2, r3, #16
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	031b      	lsls	r3, r3, #12
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	011b      	lsls	r3, r3, #4
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	621a      	str	r2, [r3, #32]
}
 80061dc:	bf00      	nop
 80061de:	371c      	adds	r7, #28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f023 0303 	bic.w	r3, r3, #3
 8006214:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006224:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	b2db      	uxtb	r3, r3
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	4313      	orrs	r3, r2
 8006230:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006238:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	021b      	lsls	r3, r3, #8
 800623e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	4313      	orrs	r3, r2
 8006246:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	621a      	str	r2, [r3, #32]
}
 8006254:	bf00      	nop
 8006256:	371c      	adds	r7, #28
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800628c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	021b      	lsls	r3, r3, #8
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800629e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	031b      	lsls	r3, r3, #12
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80062b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	031b      	lsls	r3, r3, #12
 80062b8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	621a      	str	r2, [r3, #32]
}
 80062ce:	bf00      	nop
 80062d0:	371c      	adds	r7, #28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
 80062e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80062f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	f043 0307 	orr.w	r3, r3, #7
 8006300:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	609a      	str	r2, [r3, #8]
}
 8006308:	bf00      	nop
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800632e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	021a      	lsls	r2, r3, #8
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	431a      	orrs	r2, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	4313      	orrs	r3, r2
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	4313      	orrs	r3, r2
 8006340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	609a      	str	r2, [r3, #8]
}
 8006348:	bf00      	nop
 800634a:	371c      	adds	r7, #28
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f003 031f 	and.w	r3, r3, #31
 8006366:	2201      	movs	r2, #1
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a1a      	ldr	r2, [r3, #32]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	43db      	mvns	r3, r3
 8006376:	401a      	ands	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6a1a      	ldr	r2, [r3, #32]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f003 031f 	and.w	r3, r3, #31
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	fa01 f303 	lsl.w	r3, r1, r3
 800638c:	431a      	orrs	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	621a      	str	r2, [r3, #32]
}
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
	...

080063a0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d109      	bne.n	80063c4 <HAL_TIMEx_PWMN_Start+0x24>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	bf14      	ite	ne
 80063bc:	2301      	movne	r3, #1
 80063be:	2300      	moveq	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	e022      	b.n	800640a <HAL_TIMEx_PWMN_Start+0x6a>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d109      	bne.n	80063de <HAL_TIMEx_PWMN_Start+0x3e>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	bf14      	ite	ne
 80063d6:	2301      	movne	r3, #1
 80063d8:	2300      	moveq	r3, #0
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	e015      	b.n	800640a <HAL_TIMEx_PWMN_Start+0x6a>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d109      	bne.n	80063f8 <HAL_TIMEx_PWMN_Start+0x58>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	bf14      	ite	ne
 80063f0:	2301      	movne	r3, #1
 80063f2:	2300      	moveq	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	e008      	b.n	800640a <HAL_TIMEx_PWMN_Start+0x6a>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b01      	cmp	r3, #1
 8006402:	bf14      	ite	ne
 8006404:	2301      	movne	r3, #1
 8006406:	2300      	moveq	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e073      	b.n	80064fa <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <HAL_TIMEx_PWMN_Start+0x82>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006420:	e013      	b.n	800644a <HAL_TIMEx_PWMN_Start+0xaa>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b04      	cmp	r3, #4
 8006426:	d104      	bne.n	8006432 <HAL_TIMEx_PWMN_Start+0x92>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006430:	e00b      	b.n	800644a <HAL_TIMEx_PWMN_Start+0xaa>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b08      	cmp	r3, #8
 8006436:	d104      	bne.n	8006442 <HAL_TIMEx_PWMN_Start+0xa2>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006440:	e003      	b.n	800644a <HAL_TIMEx_PWMN_Start+0xaa>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2202      	movs	r2, #2
 8006446:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2204      	movs	r2, #4
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	4618      	mov	r0, r3
 8006454:	f000 f9f4 	bl	8006840 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006466:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a25      	ldr	r2, [pc, #148]	; (8006504 <HAL_TIMEx_PWMN_Start+0x164>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d022      	beq.n	80064b8 <HAL_TIMEx_PWMN_Start+0x118>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800647a:	d01d      	beq.n	80064b8 <HAL_TIMEx_PWMN_Start+0x118>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a21      	ldr	r2, [pc, #132]	; (8006508 <HAL_TIMEx_PWMN_Start+0x168>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d018      	beq.n	80064b8 <HAL_TIMEx_PWMN_Start+0x118>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a20      	ldr	r2, [pc, #128]	; (800650c <HAL_TIMEx_PWMN_Start+0x16c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d013      	beq.n	80064b8 <HAL_TIMEx_PWMN_Start+0x118>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a1e      	ldr	r2, [pc, #120]	; (8006510 <HAL_TIMEx_PWMN_Start+0x170>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d00e      	beq.n	80064b8 <HAL_TIMEx_PWMN_Start+0x118>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a1d      	ldr	r2, [pc, #116]	; (8006514 <HAL_TIMEx_PWMN_Start+0x174>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d009      	beq.n	80064b8 <HAL_TIMEx_PWMN_Start+0x118>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a1b      	ldr	r2, [pc, #108]	; (8006518 <HAL_TIMEx_PWMN_Start+0x178>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d004      	beq.n	80064b8 <HAL_TIMEx_PWMN_Start+0x118>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1a      	ldr	r2, [pc, #104]	; (800651c <HAL_TIMEx_PWMN_Start+0x17c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d115      	bne.n	80064e4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	4b18      	ldr	r3, [pc, #96]	; (8006520 <HAL_TIMEx_PWMN_Start+0x180>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b06      	cmp	r3, #6
 80064c8:	d015      	beq.n	80064f6 <HAL_TIMEx_PWMN_Start+0x156>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d0:	d011      	beq.n	80064f6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0201 	orr.w	r2, r2, #1
 80064e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e2:	e008      	b.n	80064f6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0201 	orr.w	r2, r2, #1
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	e000      	b.n	80064f8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	40012c00 	.word	0x40012c00
 8006508:	40000400 	.word	0x40000400
 800650c:	40000800 	.word	0x40000800
 8006510:	40000c00 	.word	0x40000c00
 8006514:	40013400 	.word	0x40013400
 8006518:	40014000 	.word	0x40014000
 800651c:	40015000 	.word	0x40015000
 8006520:	00010007 	.word	0x00010007

08006524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006534:	2b01      	cmp	r3, #1
 8006536:	d101      	bne.n	800653c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006538:	2302      	movs	r3, #2
 800653a:	e074      	b.n	8006626 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a34      	ldr	r2, [pc, #208]	; (8006634 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d009      	beq.n	800657a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a33      	ldr	r2, [pc, #204]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d004      	beq.n	800657a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a31      	ldr	r2, [pc, #196]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d108      	bne.n	800658c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006580:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	4313      	orrs	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a21      	ldr	r2, [pc, #132]	; (8006634 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d022      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065bc:	d01d      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1f      	ldr	r2, [pc, #124]	; (8006640 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d018      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1d      	ldr	r2, [pc, #116]	; (8006644 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d013      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a1c      	ldr	r2, [pc, #112]	; (8006648 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00e      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a15      	ldr	r2, [pc, #84]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d009      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a18      	ldr	r2, [pc, #96]	; (800664c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d004      	beq.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a11      	ldr	r2, [pc, #68]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d10c      	bne.n	8006614 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	4313      	orrs	r3, r2
 800660a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	40012c00 	.word	0x40012c00
 8006638:	40013400 	.word	0x40013400
 800663c:	40015000 	.word	0x40015000
 8006640:	40000400 	.word	0x40000400
 8006644:	40000800 	.word	0x40000800
 8006648:	40000c00 	.word	0x40000c00
 800664c:	40014000 	.word	0x40014000

08006650 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006664:	2b01      	cmp	r3, #1
 8006666:	d101      	bne.n	800666c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006668:	2302      	movs	r3, #2
 800666a:	e096      	b.n	800679a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	4313      	orrs	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	041b      	lsls	r3, r3, #16
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a2f      	ldr	r2, [pc, #188]	; (80067a8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d009      	beq.n	8006704 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a2d      	ldr	r2, [pc, #180]	; (80067ac <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d004      	beq.n	8006704 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a2c      	ldr	r2, [pc, #176]	; (80067b0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d106      	bne.n	8006712 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	4313      	orrs	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a24      	ldr	r2, [pc, #144]	; (80067a8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d009      	beq.n	8006730 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a22      	ldr	r2, [pc, #136]	; (80067ac <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d004      	beq.n	8006730 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a21      	ldr	r2, [pc, #132]	; (80067b0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d12b      	bne.n	8006788 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673a:	051b      	lsls	r3, r3, #20
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a11      	ldr	r2, [pc, #68]	; (80067a8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d009      	beq.n	800677a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a10      	ldr	r2, [pc, #64]	; (80067ac <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d004      	beq.n	800677a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a0e      	ldr	r2, [pc, #56]	; (80067b0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d106      	bne.n	8006788 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006784:	4313      	orrs	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	40012c00 	.word	0x40012c00
 80067ac:	40013400 	.word	0x40013400
 80067b0:	40015000 	.word	0x40015000

080067b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006840:	b480      	push	{r7}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f003 031f 	and.w	r3, r3, #31
 8006852:	2204      	movs	r2, #4
 8006854:	fa02 f303 	lsl.w	r3, r2, r3
 8006858:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a1a      	ldr	r2, [r3, #32]
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	43db      	mvns	r3, r3
 8006862:	401a      	ands	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a1a      	ldr	r2, [r3, #32]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f003 031f 	and.w	r3, r3, #31
 8006872:	6879      	ldr	r1, [r7, #4]
 8006874:	fa01 f303 	lsl.w	r3, r1, r3
 8006878:	431a      	orrs	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	621a      	str	r2, [r3, #32]
}
 800687e:	bf00      	nop
 8006880:	371c      	adds	r7, #28
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b082      	sub	sp, #8
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e042      	b.n	8006922 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d106      	bne.n	80068b4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7fa fec8 	bl	8001644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2224      	movs	r2, #36	; 0x24
 80068b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f022 0201 	bic.w	r2, r2, #1
 80068ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fc51 	bl	8007174 <UART_SetConfig>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d101      	bne.n	80068dc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e022      	b.n	8006922 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 ff41 	bl	800776c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006908:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f042 0201 	orr.w	r2, r2, #1
 8006918:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 ffc8 	bl	80078b0 <UART_CheckIdleState>
 8006920:	4603      	mov	r3, r0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b08a      	sub	sp, #40	; 0x28
 800692e:	af02      	add	r7, sp, #8
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	603b      	str	r3, [r7, #0]
 8006936:	4613      	mov	r3, r2
 8006938:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006940:	2b20      	cmp	r3, #32
 8006942:	f040 8083 	bne.w	8006a4c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <HAL_UART_Transmit+0x28>
 800694c:	88fb      	ldrh	r3, [r7, #6]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e07b      	b.n	8006a4e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800695c:	2b01      	cmp	r3, #1
 800695e:	d101      	bne.n	8006964 <HAL_UART_Transmit+0x3a>
 8006960:	2302      	movs	r3, #2
 8006962:	e074      	b.n	8006a4e <HAL_UART_Transmit+0x124>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2221      	movs	r2, #33	; 0x21
 8006978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800697c:	f7fa ff16 	bl	80017ac <HAL_GetTick>
 8006980:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	88fa      	ldrh	r2, [r7, #6]
 8006986:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	88fa      	ldrh	r2, [r7, #6]
 800698e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800699a:	d108      	bne.n	80069ae <HAL_UART_Transmit+0x84>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d104      	bne.n	80069ae <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80069a4:	2300      	movs	r3, #0
 80069a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	61bb      	str	r3, [r7, #24]
 80069ac:	e003      	b.n	80069b6 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069b2:	2300      	movs	r3, #0
 80069b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80069be:	e02c      	b.n	8006a1a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	2200      	movs	r2, #0
 80069c8:	2180      	movs	r1, #128	; 0x80
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 ffbb 	bl	8007946 <UART_WaitOnFlagUntilTimeout>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e039      	b.n	8006a4e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10b      	bne.n	80069f8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	461a      	mov	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	3302      	adds	r3, #2
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	e007      	b.n	8006a08 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	3301      	adds	r3, #1
 8006a06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	3b01      	subs	r3, #1
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1cc      	bne.n	80069c0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2140      	movs	r1, #64	; 0x40
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 ff88 	bl	8007946 <UART_WaitOnFlagUntilTimeout>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e006      	b.n	8006a4e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	e000      	b.n	8006a4e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006a4c:	2302      	movs	r3, #2
  }
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3720      	adds	r7, #32
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
	...

08006a58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08a      	sub	sp, #40	; 0x28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	4613      	mov	r3, r2
 8006a64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a6c:	2b20      	cmp	r3, #32
 8006a6e:	d142      	bne.n	8006af6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <HAL_UART_Receive_IT+0x24>
 8006a76:	88fb      	ldrh	r3, [r7, #6]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e03b      	b.n	8006af8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d101      	bne.n	8006a8e <HAL_UART_Receive_IT+0x36>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	e034      	b.n	8006af8 <HAL_UART_Receive_IT+0xa0>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a17      	ldr	r2, [pc, #92]	; (8006b00 <HAL_UART_Receive_IT+0xa8>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d01f      	beq.n	8006ae6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d018      	beq.n	8006ae6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	623b      	str	r3, [r7, #32]
 8006ad4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	69f9      	ldr	r1, [r7, #28]
 8006ad8:	6a3a      	ldr	r2, [r7, #32]
 8006ada:	e841 2300 	strex	r3, r2, [r1]
 8006ade:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e6      	bne.n	8006ab4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ae6:	88fb      	ldrh	r3, [r7, #6]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	68b9      	ldr	r1, [r7, #8]
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 fff3 	bl	8007ad8 <UART_Start_Receive_IT>
 8006af2:	4603      	mov	r3, r0
 8006af4:	e000      	b.n	8006af8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006af6:	2302      	movs	r3, #2
  }
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3728      	adds	r7, #40	; 0x28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40008000 	.word	0x40008000

08006b04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b0ba      	sub	sp, #232	; 0xe8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b32:	4013      	ands	r3, r2
 8006b34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d11b      	bne.n	8006b78 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b44:	f003 0320 	and.w	r3, r3, #32
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d015      	beq.n	8006b78 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b50:	f003 0320 	and.w	r3, r3, #32
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d105      	bne.n	8006b64 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d009      	beq.n	8006b78 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 82d6 	beq.w	800711a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	4798      	blx	r3
      }
      return;
 8006b76:	e2d0      	b.n	800711a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 811f 	beq.w	8006dc0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006b82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006b86:	4b8b      	ldr	r3, [pc, #556]	; (8006db4 <HAL_UART_IRQHandler+0x2b0>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d106      	bne.n	8006b9c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006b8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b92:	4b89      	ldr	r3, [pc, #548]	; (8006db8 <HAL_UART_IRQHandler+0x2b4>)
 8006b94:	4013      	ands	r3, r2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f000 8112 	beq.w	8006dc0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d011      	beq.n	8006bcc <HAL_UART_IRQHandler+0xc8>
 8006ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00b      	beq.n	8006bcc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bc2:	f043 0201 	orr.w	r2, r3, #1
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d011      	beq.n	8006bfc <HAL_UART_IRQHandler+0xf8>
 8006bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00b      	beq.n	8006bfc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2202      	movs	r2, #2
 8006bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bf2:	f043 0204 	orr.w	r2, r3, #4
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d011      	beq.n	8006c2c <HAL_UART_IRQHandler+0x128>
 8006c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00b      	beq.n	8006c2c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2204      	movs	r2, #4
 8006c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c22:	f043 0202 	orr.w	r2, r3, #2
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d017      	beq.n	8006c68 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c3c:	f003 0320 	and.w	r3, r3, #32
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d105      	bne.n	8006c50 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006c44:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006c48:	4b5a      	ldr	r3, [pc, #360]	; (8006db4 <HAL_UART_IRQHandler+0x2b0>)
 8006c4a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00b      	beq.n	8006c68 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2208      	movs	r2, #8
 8006c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c5e:	f043 0208 	orr.w	r2, r3, #8
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d012      	beq.n	8006c9a <HAL_UART_IRQHandler+0x196>
 8006c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00c      	beq.n	8006c9a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c90:	f043 0220 	orr.w	r2, r3, #32
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 823c 	beq.w	800711e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006caa:	f003 0320 	and.w	r3, r3, #32
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d013      	beq.n	8006cda <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb6:	f003 0320 	and.w	r3, r3, #32
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d105      	bne.n	8006cca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d007      	beq.n	8006cda <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cee:	2b40      	cmp	r3, #64	; 0x40
 8006cf0:	d005      	beq.n	8006cfe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006cf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cf6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d04f      	beq.n	8006d9e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 f814 	bl	8007d2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0e:	2b40      	cmp	r3, #64	; 0x40
 8006d10:	d141      	bne.n	8006d96 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3308      	adds	r3, #8
 8006d18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d20:	e853 3f00 	ldrex	r3, [r3]
 8006d24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3308      	adds	r3, #8
 8006d3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d4e:	e841 2300 	strex	r3, r2, [r1]
 8006d52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1d9      	bne.n	8006d12 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d013      	beq.n	8006d8e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d6a:	4a14      	ldr	r2, [pc, #80]	; (8006dbc <HAL_UART_IRQHandler+0x2b8>)
 8006d6c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fc fa3b 	bl	80031ee <HAL_DMA_Abort_IT>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d017      	beq.n	8006dae <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006d88:	4610      	mov	r0, r2
 8006d8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d8c:	e00f      	b.n	8006dae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f9da 	bl	8007148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d94:	e00b      	b.n	8006dae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f9d6 	bl	8007148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d9c:	e007      	b.n	8006dae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f9d2 	bl	8007148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006dac:	e1b7      	b.n	800711e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dae:	bf00      	nop
    return;
 8006db0:	e1b5      	b.n	800711e <HAL_UART_IRQHandler+0x61a>
 8006db2:	bf00      	nop
 8006db4:	10000001 	.word	0x10000001
 8006db8:	04000120 	.word	0x04000120
 8006dbc:	08007df9 	.word	0x08007df9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	f040 814a 	bne.w	800705e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dce:	f003 0310 	and.w	r3, r3, #16
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 8143 	beq.w	800705e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ddc:	f003 0310 	and.w	r3, r3, #16
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 813c 	beq.w	800705e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2210      	movs	r2, #16
 8006dec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df8:	2b40      	cmp	r3, #64	; 0x40
 8006dfa:	f040 80b5 	bne.w	8006f68 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 8187 	beq.w	8007122 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	f080 817f 	bcs.w	8007122 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0320 	and.w	r3, r3, #32
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f040 8086 	bne.w	8006f4c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e6e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1da      	bne.n	8006e40 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3308      	adds	r3, #8
 8006e90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e94:	e853 3f00 	ldrex	r3, [r3]
 8006e98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e9c:	f023 0301 	bic.w	r3, r3, #1
 8006ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3308      	adds	r3, #8
 8006eaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006eae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006eb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1e1      	bne.n	8006e8a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3308      	adds	r3, #8
 8006ecc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ed0:	e853 3f00 	ldrex	r3, [r3]
 8006ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006edc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006eea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006eec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ef0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ef2:	e841 2300 	strex	r3, r2, [r1]
 8006ef6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1e3      	bne.n	8006ec6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f1c:	f023 0310 	bic.w	r3, r3, #16
 8006f20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f30:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f36:	e841 2300 	strex	r3, r2, [r1]
 8006f3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e4      	bne.n	8006f0c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fc f8f8 	bl	800313c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f8fb 	bl	800715c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f66:	e0dc      	b.n	8007122 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 80ce 	beq.w	8007126 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006f8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 80c9 	beq.w	8007126 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9c:	e853 3f00 	ldrex	r3, [r3]
 8006fa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8006fb8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fbe:	e841 2300 	strex	r3, r2, [r1]
 8006fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1e4      	bne.n	8006f94 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3308      	adds	r3, #8
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	623b      	str	r3, [r7, #32]
   return(result);
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fe0:	f023 0301 	bic.w	r3, r3, #1
 8006fe4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3308      	adds	r3, #8
 8006fee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ff2:	633a      	str	r2, [r7, #48]	; 0x30
 8006ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e1      	bne.n	8006fca <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2220      	movs	r2, #32
 800700a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	60fb      	str	r3, [r7, #12]
   return(result);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 0310 	bic.w	r3, r3, #16
 800702e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800703c:	61fb      	str	r3, [r7, #28]
 800703e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007040:	69b9      	ldr	r1, [r7, #24]
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	e841 2300 	strex	r3, r2, [r1]
 8007048:	617b      	str	r3, [r7, #20]
   return(result);
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1e4      	bne.n	800701a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f880 	bl	800715c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800705c:	e063      	b.n	8007126 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800705e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00e      	beq.n	8007088 <HAL_UART_IRQHandler+0x584>
 800706a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800706e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d008      	beq.n	8007088 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800707e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 fb57 	bl	8008734 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007086:	e051      	b.n	800712c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800708c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007090:	2b00      	cmp	r3, #0
 8007092:	d014      	beq.n	80070be <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800709c:	2b00      	cmp	r3, #0
 800709e:	d105      	bne.n	80070ac <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80070a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d008      	beq.n	80070be <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d03a      	beq.n	800712a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	4798      	blx	r3
    }
    return;
 80070bc:	e035      	b.n	800712a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d009      	beq.n	80070de <HAL_UART_IRQHandler+0x5da>
 80070ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fea4 	bl	8007e24 <UART_EndTransmit_IT>
    return;
 80070dc:	e026      	b.n	800712c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80070de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d009      	beq.n	80070fe <HAL_UART_IRQHandler+0x5fa>
 80070ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f001 fb30 	bl	800875c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070fc:	e016      	b.n	800712c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80070fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007102:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d010      	beq.n	800712c <HAL_UART_IRQHandler+0x628>
 800710a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800710e:	2b00      	cmp	r3, #0
 8007110:	da0c      	bge.n	800712c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 fb18 	bl	8008748 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007118:	e008      	b.n	800712c <HAL_UART_IRQHandler+0x628>
      return;
 800711a:	bf00      	nop
 800711c:	e006      	b.n	800712c <HAL_UART_IRQHandler+0x628>
    return;
 800711e:	bf00      	nop
 8007120:	e004      	b.n	800712c <HAL_UART_IRQHandler+0x628>
      return;
 8007122:	bf00      	nop
 8007124:	e002      	b.n	800712c <HAL_UART_IRQHandler+0x628>
      return;
 8007126:	bf00      	nop
 8007128:	e000      	b.n	800712c <HAL_UART_IRQHandler+0x628>
    return;
 800712a:	bf00      	nop
  }
}
 800712c:	37e8      	adds	r7, #232	; 0xe8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop

08007134 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	460b      	mov	r3, r1
 8007166:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007178:	b08c      	sub	sp, #48	; 0x30
 800717a:	af00      	add	r7, sp, #0
 800717c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	431a      	orrs	r2, r3
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	431a      	orrs	r2, r3
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	69db      	ldr	r3, [r3, #28]
 8007198:	4313      	orrs	r3, r2
 800719a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	4baa      	ldr	r3, [pc, #680]	; (800744c <UART_SetConfig+0x2d8>)
 80071a4:	4013      	ands	r3, r2
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	6812      	ldr	r2, [r2, #0]
 80071aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071ac:	430b      	orrs	r3, r1
 80071ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a9f      	ldr	r2, [pc, #636]	; (8007450 <UART_SetConfig+0x2dc>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d004      	beq.n	80071e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071dc:	4313      	orrs	r3, r2
 80071de:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80071ea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	6812      	ldr	r2, [r2, #0]
 80071f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071f4:	430b      	orrs	r3, r1
 80071f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fe:	f023 010f 	bic.w	r1, r3, #15
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a90      	ldr	r2, [pc, #576]	; (8007454 <UART_SetConfig+0x2e0>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d125      	bne.n	8007264 <UART_SetConfig+0xf0>
 8007218:	4b8f      	ldr	r3, [pc, #572]	; (8007458 <UART_SetConfig+0x2e4>)
 800721a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	2b03      	cmp	r3, #3
 8007224:	d81a      	bhi.n	800725c <UART_SetConfig+0xe8>
 8007226:	a201      	add	r2, pc, #4	; (adr r2, 800722c <UART_SetConfig+0xb8>)
 8007228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722c:	0800723d 	.word	0x0800723d
 8007230:	0800724d 	.word	0x0800724d
 8007234:	08007245 	.word	0x08007245
 8007238:	08007255 	.word	0x08007255
 800723c:	2301      	movs	r3, #1
 800723e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007242:	e116      	b.n	8007472 <UART_SetConfig+0x2fe>
 8007244:	2302      	movs	r3, #2
 8007246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800724a:	e112      	b.n	8007472 <UART_SetConfig+0x2fe>
 800724c:	2304      	movs	r3, #4
 800724e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007252:	e10e      	b.n	8007472 <UART_SetConfig+0x2fe>
 8007254:	2308      	movs	r3, #8
 8007256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800725a:	e10a      	b.n	8007472 <UART_SetConfig+0x2fe>
 800725c:	2310      	movs	r3, #16
 800725e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007262:	e106      	b.n	8007472 <UART_SetConfig+0x2fe>
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a7c      	ldr	r2, [pc, #496]	; (800745c <UART_SetConfig+0x2e8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d138      	bne.n	80072e0 <UART_SetConfig+0x16c>
 800726e:	4b7a      	ldr	r3, [pc, #488]	; (8007458 <UART_SetConfig+0x2e4>)
 8007270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007274:	f003 030c 	and.w	r3, r3, #12
 8007278:	2b0c      	cmp	r3, #12
 800727a:	d82d      	bhi.n	80072d8 <UART_SetConfig+0x164>
 800727c:	a201      	add	r2, pc, #4	; (adr r2, 8007284 <UART_SetConfig+0x110>)
 800727e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007282:	bf00      	nop
 8007284:	080072b9 	.word	0x080072b9
 8007288:	080072d9 	.word	0x080072d9
 800728c:	080072d9 	.word	0x080072d9
 8007290:	080072d9 	.word	0x080072d9
 8007294:	080072c9 	.word	0x080072c9
 8007298:	080072d9 	.word	0x080072d9
 800729c:	080072d9 	.word	0x080072d9
 80072a0:	080072d9 	.word	0x080072d9
 80072a4:	080072c1 	.word	0x080072c1
 80072a8:	080072d9 	.word	0x080072d9
 80072ac:	080072d9 	.word	0x080072d9
 80072b0:	080072d9 	.word	0x080072d9
 80072b4:	080072d1 	.word	0x080072d1
 80072b8:	2300      	movs	r3, #0
 80072ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072be:	e0d8      	b.n	8007472 <UART_SetConfig+0x2fe>
 80072c0:	2302      	movs	r3, #2
 80072c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072c6:	e0d4      	b.n	8007472 <UART_SetConfig+0x2fe>
 80072c8:	2304      	movs	r3, #4
 80072ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ce:	e0d0      	b.n	8007472 <UART_SetConfig+0x2fe>
 80072d0:	2308      	movs	r3, #8
 80072d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072d6:	e0cc      	b.n	8007472 <UART_SetConfig+0x2fe>
 80072d8:	2310      	movs	r3, #16
 80072da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072de:	e0c8      	b.n	8007472 <UART_SetConfig+0x2fe>
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a5e      	ldr	r2, [pc, #376]	; (8007460 <UART_SetConfig+0x2ec>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d125      	bne.n	8007336 <UART_SetConfig+0x1c2>
 80072ea:	4b5b      	ldr	r3, [pc, #364]	; (8007458 <UART_SetConfig+0x2e4>)
 80072ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80072f4:	2b30      	cmp	r3, #48	; 0x30
 80072f6:	d016      	beq.n	8007326 <UART_SetConfig+0x1b2>
 80072f8:	2b30      	cmp	r3, #48	; 0x30
 80072fa:	d818      	bhi.n	800732e <UART_SetConfig+0x1ba>
 80072fc:	2b20      	cmp	r3, #32
 80072fe:	d00a      	beq.n	8007316 <UART_SetConfig+0x1a2>
 8007300:	2b20      	cmp	r3, #32
 8007302:	d814      	bhi.n	800732e <UART_SetConfig+0x1ba>
 8007304:	2b00      	cmp	r3, #0
 8007306:	d002      	beq.n	800730e <UART_SetConfig+0x19a>
 8007308:	2b10      	cmp	r3, #16
 800730a:	d008      	beq.n	800731e <UART_SetConfig+0x1aa>
 800730c:	e00f      	b.n	800732e <UART_SetConfig+0x1ba>
 800730e:	2300      	movs	r3, #0
 8007310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007314:	e0ad      	b.n	8007472 <UART_SetConfig+0x2fe>
 8007316:	2302      	movs	r3, #2
 8007318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800731c:	e0a9      	b.n	8007472 <UART_SetConfig+0x2fe>
 800731e:	2304      	movs	r3, #4
 8007320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007324:	e0a5      	b.n	8007472 <UART_SetConfig+0x2fe>
 8007326:	2308      	movs	r3, #8
 8007328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800732c:	e0a1      	b.n	8007472 <UART_SetConfig+0x2fe>
 800732e:	2310      	movs	r3, #16
 8007330:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007334:	e09d      	b.n	8007472 <UART_SetConfig+0x2fe>
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a4a      	ldr	r2, [pc, #296]	; (8007464 <UART_SetConfig+0x2f0>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d125      	bne.n	800738c <UART_SetConfig+0x218>
 8007340:	4b45      	ldr	r3, [pc, #276]	; (8007458 <UART_SetConfig+0x2e4>)
 8007342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007346:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800734a:	2bc0      	cmp	r3, #192	; 0xc0
 800734c:	d016      	beq.n	800737c <UART_SetConfig+0x208>
 800734e:	2bc0      	cmp	r3, #192	; 0xc0
 8007350:	d818      	bhi.n	8007384 <UART_SetConfig+0x210>
 8007352:	2b80      	cmp	r3, #128	; 0x80
 8007354:	d00a      	beq.n	800736c <UART_SetConfig+0x1f8>
 8007356:	2b80      	cmp	r3, #128	; 0x80
 8007358:	d814      	bhi.n	8007384 <UART_SetConfig+0x210>
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <UART_SetConfig+0x1f0>
 800735e:	2b40      	cmp	r3, #64	; 0x40
 8007360:	d008      	beq.n	8007374 <UART_SetConfig+0x200>
 8007362:	e00f      	b.n	8007384 <UART_SetConfig+0x210>
 8007364:	2300      	movs	r3, #0
 8007366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800736a:	e082      	b.n	8007472 <UART_SetConfig+0x2fe>
 800736c:	2302      	movs	r3, #2
 800736e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007372:	e07e      	b.n	8007472 <UART_SetConfig+0x2fe>
 8007374:	2304      	movs	r3, #4
 8007376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800737a:	e07a      	b.n	8007472 <UART_SetConfig+0x2fe>
 800737c:	2308      	movs	r3, #8
 800737e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007382:	e076      	b.n	8007472 <UART_SetConfig+0x2fe>
 8007384:	2310      	movs	r3, #16
 8007386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800738a:	e072      	b.n	8007472 <UART_SetConfig+0x2fe>
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a35      	ldr	r2, [pc, #212]	; (8007468 <UART_SetConfig+0x2f4>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d12a      	bne.n	80073ec <UART_SetConfig+0x278>
 8007396:	4b30      	ldr	r3, [pc, #192]	; (8007458 <UART_SetConfig+0x2e4>)
 8007398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800739c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073a4:	d01a      	beq.n	80073dc <UART_SetConfig+0x268>
 80073a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073aa:	d81b      	bhi.n	80073e4 <UART_SetConfig+0x270>
 80073ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073b0:	d00c      	beq.n	80073cc <UART_SetConfig+0x258>
 80073b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073b6:	d815      	bhi.n	80073e4 <UART_SetConfig+0x270>
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <UART_SetConfig+0x250>
 80073bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073c0:	d008      	beq.n	80073d4 <UART_SetConfig+0x260>
 80073c2:	e00f      	b.n	80073e4 <UART_SetConfig+0x270>
 80073c4:	2300      	movs	r3, #0
 80073c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ca:	e052      	b.n	8007472 <UART_SetConfig+0x2fe>
 80073cc:	2302      	movs	r3, #2
 80073ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073d2:	e04e      	b.n	8007472 <UART_SetConfig+0x2fe>
 80073d4:	2304      	movs	r3, #4
 80073d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073da:	e04a      	b.n	8007472 <UART_SetConfig+0x2fe>
 80073dc:	2308      	movs	r3, #8
 80073de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073e2:	e046      	b.n	8007472 <UART_SetConfig+0x2fe>
 80073e4:	2310      	movs	r3, #16
 80073e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ea:	e042      	b.n	8007472 <UART_SetConfig+0x2fe>
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a17      	ldr	r2, [pc, #92]	; (8007450 <UART_SetConfig+0x2dc>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d13a      	bne.n	800746c <UART_SetConfig+0x2f8>
 80073f6:	4b18      	ldr	r3, [pc, #96]	; (8007458 <UART_SetConfig+0x2e4>)
 80073f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007400:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007404:	d01a      	beq.n	800743c <UART_SetConfig+0x2c8>
 8007406:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800740a:	d81b      	bhi.n	8007444 <UART_SetConfig+0x2d0>
 800740c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007410:	d00c      	beq.n	800742c <UART_SetConfig+0x2b8>
 8007412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007416:	d815      	bhi.n	8007444 <UART_SetConfig+0x2d0>
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <UART_SetConfig+0x2b0>
 800741c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007420:	d008      	beq.n	8007434 <UART_SetConfig+0x2c0>
 8007422:	e00f      	b.n	8007444 <UART_SetConfig+0x2d0>
 8007424:	2300      	movs	r3, #0
 8007426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800742a:	e022      	b.n	8007472 <UART_SetConfig+0x2fe>
 800742c:	2302      	movs	r3, #2
 800742e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007432:	e01e      	b.n	8007472 <UART_SetConfig+0x2fe>
 8007434:	2304      	movs	r3, #4
 8007436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800743a:	e01a      	b.n	8007472 <UART_SetConfig+0x2fe>
 800743c:	2308      	movs	r3, #8
 800743e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007442:	e016      	b.n	8007472 <UART_SetConfig+0x2fe>
 8007444:	2310      	movs	r3, #16
 8007446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800744a:	e012      	b.n	8007472 <UART_SetConfig+0x2fe>
 800744c:	cfff69f3 	.word	0xcfff69f3
 8007450:	40008000 	.word	0x40008000
 8007454:	40013800 	.word	0x40013800
 8007458:	40021000 	.word	0x40021000
 800745c:	40004400 	.word	0x40004400
 8007460:	40004800 	.word	0x40004800
 8007464:	40004c00 	.word	0x40004c00
 8007468:	40005000 	.word	0x40005000
 800746c:	2310      	movs	r3, #16
 800746e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4aae      	ldr	r2, [pc, #696]	; (8007730 <UART_SetConfig+0x5bc>)
 8007478:	4293      	cmp	r3, r2
 800747a:	f040 8097 	bne.w	80075ac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800747e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007482:	2b08      	cmp	r3, #8
 8007484:	d823      	bhi.n	80074ce <UART_SetConfig+0x35a>
 8007486:	a201      	add	r2, pc, #4	; (adr r2, 800748c <UART_SetConfig+0x318>)
 8007488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748c:	080074b1 	.word	0x080074b1
 8007490:	080074cf 	.word	0x080074cf
 8007494:	080074b9 	.word	0x080074b9
 8007498:	080074cf 	.word	0x080074cf
 800749c:	080074bf 	.word	0x080074bf
 80074a0:	080074cf 	.word	0x080074cf
 80074a4:	080074cf 	.word	0x080074cf
 80074a8:	080074cf 	.word	0x080074cf
 80074ac:	080074c7 	.word	0x080074c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074b0:	f7fc fe28 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
 80074b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074b6:	e010      	b.n	80074da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074b8:	4b9e      	ldr	r3, [pc, #632]	; (8007734 <UART_SetConfig+0x5c0>)
 80074ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074bc:	e00d      	b.n	80074da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074be:	f7fc fdb3 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 80074c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074c4:	e009      	b.n	80074da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074cc:	e005      	b.n	80074da <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80074d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 8130 	beq.w	8007742 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	4a94      	ldr	r2, [pc, #592]	; (8007738 <UART_SetConfig+0x5c4>)
 80074e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074ec:	461a      	mov	r2, r3
 80074ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80074f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	4613      	mov	r3, r2
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	4413      	add	r3, r2
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	429a      	cmp	r2, r3
 8007504:	d305      	bcc.n	8007512 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800750c:	69ba      	ldr	r2, [r7, #24]
 800750e:	429a      	cmp	r2, r3
 8007510:	d903      	bls.n	800751a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007518:	e113      	b.n	8007742 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	2200      	movs	r2, #0
 800751e:	60bb      	str	r3, [r7, #8]
 8007520:	60fa      	str	r2, [r7, #12]
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	4a84      	ldr	r2, [pc, #528]	; (8007738 <UART_SetConfig+0x5c4>)
 8007528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800752c:	b29b      	uxth	r3, r3
 800752e:	2200      	movs	r2, #0
 8007530:	603b      	str	r3, [r7, #0]
 8007532:	607a      	str	r2, [r7, #4]
 8007534:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007538:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800753c:	f7f8 fed0 	bl	80002e0 <__aeabi_uldivmod>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	4610      	mov	r0, r2
 8007546:	4619      	mov	r1, r3
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	020b      	lsls	r3, r1, #8
 8007552:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007556:	0202      	lsls	r2, r0, #8
 8007558:	6979      	ldr	r1, [r7, #20]
 800755a:	6849      	ldr	r1, [r1, #4]
 800755c:	0849      	lsrs	r1, r1, #1
 800755e:	2000      	movs	r0, #0
 8007560:	460c      	mov	r4, r1
 8007562:	4605      	mov	r5, r0
 8007564:	eb12 0804 	adds.w	r8, r2, r4
 8007568:	eb43 0905 	adc.w	r9, r3, r5
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	469a      	mov	sl, r3
 8007574:	4693      	mov	fp, r2
 8007576:	4652      	mov	r2, sl
 8007578:	465b      	mov	r3, fp
 800757a:	4640      	mov	r0, r8
 800757c:	4649      	mov	r1, r9
 800757e:	f7f8 feaf 	bl	80002e0 <__aeabi_uldivmod>
 8007582:	4602      	mov	r2, r0
 8007584:	460b      	mov	r3, r1
 8007586:	4613      	mov	r3, r2
 8007588:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007590:	d308      	bcc.n	80075a4 <UART_SetConfig+0x430>
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007598:	d204      	bcs.n	80075a4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6a3a      	ldr	r2, [r7, #32]
 80075a0:	60da      	str	r2, [r3, #12]
 80075a2:	e0ce      	b.n	8007742 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80075aa:	e0ca      	b.n	8007742 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075b4:	d166      	bne.n	8007684 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80075b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075ba:	2b08      	cmp	r3, #8
 80075bc:	d827      	bhi.n	800760e <UART_SetConfig+0x49a>
 80075be:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <UART_SetConfig+0x450>)
 80075c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c4:	080075e9 	.word	0x080075e9
 80075c8:	080075f1 	.word	0x080075f1
 80075cc:	080075f9 	.word	0x080075f9
 80075d0:	0800760f 	.word	0x0800760f
 80075d4:	080075ff 	.word	0x080075ff
 80075d8:	0800760f 	.word	0x0800760f
 80075dc:	0800760f 	.word	0x0800760f
 80075e0:	0800760f 	.word	0x0800760f
 80075e4:	08007607 	.word	0x08007607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075e8:	f7fc fd8c 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
 80075ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075ee:	e014      	b.n	800761a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075f0:	f7fc fd9e 	bl	8004130 <HAL_RCC_GetPCLK2Freq>
 80075f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075f6:	e010      	b.n	800761a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075f8:	4b4e      	ldr	r3, [pc, #312]	; (8007734 <UART_SetConfig+0x5c0>)
 80075fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075fc:	e00d      	b.n	800761a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075fe:	f7fc fd13 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8007602:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007604:	e009      	b.n	800761a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800760a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800760c:	e005      	b.n	800761a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 8090 	beq.w	8007742 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	4a44      	ldr	r2, [pc, #272]	; (8007738 <UART_SetConfig+0x5c4>)
 8007628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800762c:	461a      	mov	r2, r3
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	fbb3 f3f2 	udiv	r3, r3, r2
 8007634:	005a      	lsls	r2, r3, #1
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	085b      	lsrs	r3, r3, #1
 800763c:	441a      	add	r2, r3
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	fbb2 f3f3 	udiv	r3, r2, r3
 8007646:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	2b0f      	cmp	r3, #15
 800764c:	d916      	bls.n	800767c <UART_SetConfig+0x508>
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007654:	d212      	bcs.n	800767c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	b29b      	uxth	r3, r3
 800765a:	f023 030f 	bic.w	r3, r3, #15
 800765e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	085b      	lsrs	r3, r3, #1
 8007664:	b29b      	uxth	r3, r3
 8007666:	f003 0307 	and.w	r3, r3, #7
 800766a:	b29a      	uxth	r2, r3
 800766c:	8bfb      	ldrh	r3, [r7, #30]
 800766e:	4313      	orrs	r3, r2
 8007670:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	8bfa      	ldrh	r2, [r7, #30]
 8007678:	60da      	str	r2, [r3, #12]
 800767a:	e062      	b.n	8007742 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007682:	e05e      	b.n	8007742 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007684:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007688:	2b08      	cmp	r3, #8
 800768a:	d828      	bhi.n	80076de <UART_SetConfig+0x56a>
 800768c:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <UART_SetConfig+0x520>)
 800768e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007692:	bf00      	nop
 8007694:	080076b9 	.word	0x080076b9
 8007698:	080076c1 	.word	0x080076c1
 800769c:	080076c9 	.word	0x080076c9
 80076a0:	080076df 	.word	0x080076df
 80076a4:	080076cf 	.word	0x080076cf
 80076a8:	080076df 	.word	0x080076df
 80076ac:	080076df 	.word	0x080076df
 80076b0:	080076df 	.word	0x080076df
 80076b4:	080076d7 	.word	0x080076d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076b8:	f7fc fd24 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
 80076bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076be:	e014      	b.n	80076ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076c0:	f7fc fd36 	bl	8004130 <HAL_RCC_GetPCLK2Freq>
 80076c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076c6:	e010      	b.n	80076ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076c8:	4b1a      	ldr	r3, [pc, #104]	; (8007734 <UART_SetConfig+0x5c0>)
 80076ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076cc:	e00d      	b.n	80076ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ce:	f7fc fcab 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 80076d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076d4:	e009      	b.n	80076ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076dc:	e005      	b.n	80076ea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80076de:	2300      	movs	r3, #0
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80076e8:	bf00      	nop
    }

    if (pclk != 0U)
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d028      	beq.n	8007742 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f4:	4a10      	ldr	r2, [pc, #64]	; (8007738 <UART_SetConfig+0x5c4>)
 80076f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076fa:	461a      	mov	r2, r3
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	085b      	lsrs	r3, r3, #1
 8007708:	441a      	add	r2, r3
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007712:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	2b0f      	cmp	r3, #15
 8007718:	d910      	bls.n	800773c <UART_SetConfig+0x5c8>
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007720:	d20c      	bcs.n	800773c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	b29a      	uxth	r2, r3
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	60da      	str	r2, [r3, #12]
 800772c:	e009      	b.n	8007742 <UART_SetConfig+0x5ce>
 800772e:	bf00      	nop
 8007730:	40008000 	.word	0x40008000
 8007734:	00f42400 	.word	0x00f42400
 8007738:	0800a34c 	.word	0x0800a34c
      }
      else
      {
        ret = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2201      	movs	r2, #1
 8007746:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2201      	movs	r2, #1
 800774e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	2200      	movs	r2, #0
 8007756:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	2200      	movs	r2, #0
 800775c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800775e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007762:	4618      	mov	r0, r3
 8007764:	3730      	adds	r7, #48	; 0x30
 8007766:	46bd      	mov	sp, r7
 8007768:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800776c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00a      	beq.n	8007796 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	430a      	orrs	r2, r1
 8007794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00a      	beq.n	80077b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00a      	beq.n	80077da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077de:	f003 0308 	and.w	r3, r3, #8
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007800:	f003 0310 	and.w	r3, r3, #16
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00a      	beq.n	800781e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007822:	f003 0320 	and.w	r3, r3, #32
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00a      	beq.n	8007840 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	430a      	orrs	r2, r1
 800783e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007848:	2b00      	cmp	r3, #0
 800784a:	d01a      	beq.n	8007882 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	430a      	orrs	r2, r1
 8007860:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800786a:	d10a      	bne.n	8007882 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	430a      	orrs	r2, r1
 8007880:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	430a      	orrs	r2, r1
 80078a2:	605a      	str	r2, [r3, #4]
  }
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078c0:	f7f9 ff74 	bl	80017ac <HAL_GetTick>
 80078c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0308 	and.w	r3, r3, #8
 80078d0:	2b08      	cmp	r3, #8
 80078d2:	d10e      	bne.n	80078f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f82f 	bl	8007946 <UART_WaitOnFlagUntilTimeout>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e025      	b.n	800793e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0304 	and.w	r3, r3, #4
 80078fc:	2b04      	cmp	r3, #4
 80078fe:	d10e      	bne.n	800791e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007900:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f819 	bl	8007946 <UART_WaitOnFlagUntilTimeout>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e00f      	b.n	800793e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2220      	movs	r2, #32
 8007922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2220      	movs	r2, #32
 800792a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b09c      	sub	sp, #112	; 0x70
 800794a:	af00      	add	r7, sp, #0
 800794c:	60f8      	str	r0, [r7, #12]
 800794e:	60b9      	str	r1, [r7, #8]
 8007950:	603b      	str	r3, [r7, #0]
 8007952:	4613      	mov	r3, r2
 8007954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007956:	e0a9      	b.n	8007aac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800795a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795e:	f000 80a5 	beq.w	8007aac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007962:	f7f9 ff23 	bl	80017ac <HAL_GetTick>
 8007966:	4602      	mov	r2, r0
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800796e:	429a      	cmp	r2, r3
 8007970:	d302      	bcc.n	8007978 <UART_WaitOnFlagUntilTimeout+0x32>
 8007972:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007974:	2b00      	cmp	r3, #0
 8007976:	d140      	bne.n	80079fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007980:	e853 3f00 	ldrex	r3, [r3]
 8007984:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007988:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800798c:	667b      	str	r3, [r7, #100]	; 0x64
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007996:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007998:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800799c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800799e:	e841 2300 	strex	r3, r2, [r1]
 80079a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80079a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1e6      	bne.n	8007978 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	3308      	adds	r3, #8
 80079b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b4:	e853 3f00 	ldrex	r3, [r3]
 80079b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079bc:	f023 0301 	bic.w	r3, r3, #1
 80079c0:	663b      	str	r3, [r7, #96]	; 0x60
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3308      	adds	r3, #8
 80079c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80079cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e5      	bne.n	80079aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2220      	movs	r2, #32
 80079e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e069      	b.n	8007ace <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0304 	and.w	r3, r3, #4
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d051      	beq.n	8007aac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	69db      	ldr	r3, [r3, #28]
 8007a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a16:	d149      	bne.n	8007aac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a20:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2a:	e853 3f00 	ldrex	r3, [r3]
 8007a2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a40:	637b      	str	r3, [r7, #52]	; 0x34
 8007a42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a48:	e841 2300 	strex	r3, r2, [r1]
 8007a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1e6      	bne.n	8007a22 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3308      	adds	r3, #8
 8007a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	e853 3f00 	ldrex	r3, [r3]
 8007a62:	613b      	str	r3, [r7, #16]
   return(result);
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f023 0301 	bic.w	r3, r3, #1
 8007a6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3308      	adds	r3, #8
 8007a72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a74:	623a      	str	r2, [r7, #32]
 8007a76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a78:	69f9      	ldr	r1, [r7, #28]
 8007a7a:	6a3a      	ldr	r2, [r7, #32]
 8007a7c:	e841 2300 	strex	r3, r2, [r1]
 8007a80:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1e5      	bne.n	8007a54 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2220      	movs	r2, #32
 8007a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2220      	movs	r2, #32
 8007a94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e010      	b.n	8007ace <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	69da      	ldr	r2, [r3, #28]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	bf0c      	ite	eq
 8007abc:	2301      	moveq	r3, #1
 8007abe:	2300      	movne	r3, #0
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	79fb      	ldrb	r3, [r7, #7]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	f43f af46 	beq.w	8007958 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3770      	adds	r7, #112	; 0x70
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
	...

08007ad8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b0a3      	sub	sp, #140	; 0x8c
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	88fa      	ldrh	r2, [r7, #6]
 8007af0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	88fa      	ldrh	r2, [r7, #6]
 8007af8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b0a:	d10e      	bne.n	8007b2a <UART_Start_Receive_IT+0x52>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d105      	bne.n	8007b20 <UART_Start_Receive_IT+0x48>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007b1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b1e:	e02d      	b.n	8007b7c <UART_Start_Receive_IT+0xa4>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	22ff      	movs	r2, #255	; 0xff
 8007b24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b28:	e028      	b.n	8007b7c <UART_Start_Receive_IT+0xa4>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10d      	bne.n	8007b4e <UART_Start_Receive_IT+0x76>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d104      	bne.n	8007b44 <UART_Start_Receive_IT+0x6c>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	22ff      	movs	r2, #255	; 0xff
 8007b3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b42:	e01b      	b.n	8007b7c <UART_Start_Receive_IT+0xa4>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	227f      	movs	r2, #127	; 0x7f
 8007b48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b4c:	e016      	b.n	8007b7c <UART_Start_Receive_IT+0xa4>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b56:	d10d      	bne.n	8007b74 <UART_Start_Receive_IT+0x9c>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d104      	bne.n	8007b6a <UART_Start_Receive_IT+0x92>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	227f      	movs	r2, #127	; 0x7f
 8007b64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b68:	e008      	b.n	8007b7c <UART_Start_Receive_IT+0xa4>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	223f      	movs	r2, #63	; 0x3f
 8007b6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b72:	e003      	b.n	8007b7c <UART_Start_Receive_IT+0xa4>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2222      	movs	r2, #34	; 0x22
 8007b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3308      	adds	r3, #8
 8007b92:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b96:	e853 3f00 	ldrex	r3, [r3]
 8007b9a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007b9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b9e:	f043 0301 	orr.w	r3, r3, #1
 8007ba2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	3308      	adds	r3, #8
 8007bac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007bb0:	673a      	str	r2, [r7, #112]	; 0x70
 8007bb2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007bb6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007bb8:	e841 2300 	strex	r3, r2, [r1]
 8007bbc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007bbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e3      	bne.n	8007b8c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bcc:	d153      	bne.n	8007c76 <UART_Start_Receive_IT+0x19e>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007bd4:	88fa      	ldrh	r2, [r7, #6]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d34d      	bcc.n	8007c76 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007be2:	d107      	bne.n	8007bf4 <UART_Start_Receive_IT+0x11c>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d103      	bne.n	8007bf4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4a4b      	ldr	r2, [pc, #300]	; (8007d1c <UART_Start_Receive_IT+0x244>)
 8007bf0:	671a      	str	r2, [r3, #112]	; 0x70
 8007bf2:	e002      	b.n	8007bfa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4a4a      	ldr	r2, [pc, #296]	; (8007d20 <UART_Start_Receive_IT+0x248>)
 8007bf8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d01a      	beq.n	8007c40 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c12:	e853 3f00 	ldrex	r3, [r3]
 8007c16:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	461a      	mov	r2, r3
 8007c28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c2e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c34:	e841 2300 	strex	r3, r2, [r1]
 8007c38:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e4      	bne.n	8007c0a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3308      	adds	r3, #8
 8007c46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c4a:	e853 3f00 	ldrex	r3, [r3]
 8007c4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007c60:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c68:	e841 2300 	strex	r3, r2, [r1]
 8007c6c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e5      	bne.n	8007c40 <UART_Start_Receive_IT+0x168>
 8007c74:	e04a      	b.n	8007d0c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c7e:	d107      	bne.n	8007c90 <UART_Start_Receive_IT+0x1b8>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d103      	bne.n	8007c90 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4a26      	ldr	r2, [pc, #152]	; (8007d24 <UART_Start_Receive_IT+0x24c>)
 8007c8c:	671a      	str	r2, [r3, #112]	; 0x70
 8007c8e:	e002      	b.n	8007c96 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4a25      	ldr	r2, [pc, #148]	; (8007d28 <UART_Start_Receive_IT+0x250>)
 8007c94:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d019      	beq.n	8007cda <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	e853 3f00 	ldrex	r3, [r3]
 8007cb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007cba:	677b      	str	r3, [r7, #116]	; 0x74
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8007cc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ccc:	e841 2300 	strex	r3, r2, [r1]
 8007cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e6      	bne.n	8007ca6 <UART_Start_Receive_IT+0x1ce>
 8007cd8:	e018      	b.n	8007d0c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	e853 3f00 	ldrex	r3, [r3]
 8007ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f043 0320 	orr.w	r3, r3, #32
 8007cee:	67bb      	str	r3, [r7, #120]	; 0x78
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cf8:	623b      	str	r3, [r7, #32]
 8007cfa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfc:	69f9      	ldr	r1, [r7, #28]
 8007cfe:	6a3a      	ldr	r2, [r7, #32]
 8007d00:	e841 2300 	strex	r3, r2, [r1]
 8007d04:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1e6      	bne.n	8007cda <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	378c      	adds	r7, #140	; 0x8c
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	08008435 	.word	0x08008435
 8007d20:	0800813d 	.word	0x0800813d
 8007d24:	08007fdb 	.word	0x08007fdb
 8007d28:	08007e7b 	.word	0x08007e7b

08007d2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b095      	sub	sp, #84	; 0x54
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3c:	e853 3f00 	ldrex	r3, [r3]
 8007d40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d52:	643b      	str	r3, [r7, #64]	; 0x40
 8007d54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d5a:	e841 2300 	strex	r3, r2, [r1]
 8007d5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1e6      	bne.n	8007d34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	e853 3f00 	ldrex	r3, [r3]
 8007d74:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d7c:	f023 0301 	bic.w	r3, r3, #1
 8007d80:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3308      	adds	r3, #8
 8007d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d92:	e841 2300 	strex	r3, r2, [r1]
 8007d96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1e3      	bne.n	8007d66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d118      	bne.n	8007dd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	f023 0310 	bic.w	r3, r3, #16
 8007dba:	647b      	str	r3, [r7, #68]	; 0x44
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dc4:	61bb      	str	r3, [r7, #24]
 8007dc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	6979      	ldr	r1, [r7, #20]
 8007dca:	69ba      	ldr	r2, [r7, #24]
 8007dcc:	e841 2300 	strex	r3, r2, [r1]
 8007dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e6      	bne.n	8007da6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007dec:	bf00      	nop
 8007dee:	3754      	adds	r7, #84	; 0x54
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f7ff f996 	bl	8007148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e1c:	bf00      	nop
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	e853 3f00 	ldrex	r3, [r3]
 8007e38:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e40:	61fb      	str	r3, [r7, #28]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	461a      	mov	r2, r3
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	61bb      	str	r3, [r7, #24]
 8007e4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	6979      	ldr	r1, [r7, #20]
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	613b      	str	r3, [r7, #16]
   return(result);
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1e6      	bne.n	8007e2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2220      	movs	r2, #32
 8007e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7ff f961 	bl	8007134 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e72:	bf00      	nop
 8007e74:	3720      	adds	r7, #32
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b096      	sub	sp, #88	; 0x58
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007e88:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e92:	2b22      	cmp	r3, #34	; 0x22
 8007e94:	f040 8095 	bne.w	8007fc2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ea2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007ea6:	b2d9      	uxtb	r1, r3
 8007ea8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb2:	400a      	ands	r2, r1
 8007eb4:	b2d2      	uxtb	r2, r2
 8007eb6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ebc:	1c5a      	adds	r2, r3, #1
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d178      	bne.n	8007fd2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee8:	e853 3f00 	ldrex	r3, [r3]
 8007eec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ef4:	653b      	str	r3, [r7, #80]	; 0x50
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	461a      	mov	r2, r3
 8007efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007efe:	647b      	str	r3, [r7, #68]	; 0x44
 8007f00:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f06:	e841 2300 	strex	r3, r2, [r1]
 8007f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1e6      	bne.n	8007ee0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	3308      	adds	r3, #8
 8007f18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	e853 3f00 	ldrex	r3, [r3]
 8007f20:	623b      	str	r3, [r7, #32]
   return(result);
 8007f22:	6a3b      	ldr	r3, [r7, #32]
 8007f24:	f023 0301 	bic.w	r3, r3, #1
 8007f28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3308      	adds	r3, #8
 8007f30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f32:	633a      	str	r2, [r7, #48]	; 0x30
 8007f34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f3a:	e841 2300 	strex	r3, r2, [r1]
 8007f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1e5      	bne.n	8007f12 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d12e      	bne.n	8007fba <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	e853 3f00 	ldrex	r3, [r3]
 8007f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 0310 	bic.w	r3, r3, #16
 8007f76:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f80:	61fb      	str	r3, [r7, #28]
 8007f82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f84:	69b9      	ldr	r1, [r7, #24]
 8007f86:	69fa      	ldr	r2, [r7, #28]
 8007f88:	e841 2300 	strex	r3, r2, [r1]
 8007f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1e6      	bne.n	8007f62 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	f003 0310 	and.w	r3, r3, #16
 8007f9e:	2b10      	cmp	r3, #16
 8007fa0:	d103      	bne.n	8007faa <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2210      	movs	r2, #16
 8007fa8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7ff f8d2 	bl	800715c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fb8:	e00b      	b.n	8007fd2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7f8 feb2 	bl	8000d24 <HAL_UART_RxCpltCallback>
}
 8007fc0:	e007      	b.n	8007fd2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	699a      	ldr	r2, [r3, #24]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f042 0208 	orr.w	r2, r2, #8
 8007fd0:	619a      	str	r2, [r3, #24]
}
 8007fd2:	bf00      	nop
 8007fd4:	3758      	adds	r7, #88	; 0x58
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b096      	sub	sp, #88	; 0x58
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007fe8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff2:	2b22      	cmp	r3, #34	; 0x22
 8007ff4:	f040 8095 	bne.w	8008122 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008006:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008008:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800800c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008010:	4013      	ands	r3, r2
 8008012:	b29a      	uxth	r2, r3
 8008014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008016:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800801c:	1c9a      	adds	r2, r3, #2
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008028:	b29b      	uxth	r3, r3
 800802a:	3b01      	subs	r3, #1
 800802c:	b29a      	uxth	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800803a:	b29b      	uxth	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	d178      	bne.n	8008132 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008048:	e853 3f00 	ldrex	r3, [r3]
 800804c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008054:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	461a      	mov	r2, r3
 800805c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800805e:	643b      	str	r3, [r7, #64]	; 0x40
 8008060:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008062:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008064:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008066:	e841 2300 	strex	r3, r2, [r1]
 800806a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800806c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1e6      	bne.n	8008040 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3308      	adds	r3, #8
 8008078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	6a3b      	ldr	r3, [r7, #32]
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	61fb      	str	r3, [r7, #28]
   return(result);
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	f023 0301 	bic.w	r3, r3, #1
 8008088:	64bb      	str	r3, [r7, #72]	; 0x48
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3308      	adds	r3, #8
 8008090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008092:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008094:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008096:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800809a:	e841 2300 	strex	r3, r2, [r1]
 800809e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1e5      	bne.n	8008072 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2220      	movs	r2, #32
 80080aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d12e      	bne.n	800811a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	e853 3f00 	ldrex	r3, [r3]
 80080ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f023 0310 	bic.w	r3, r3, #16
 80080d6:	647b      	str	r3, [r7, #68]	; 0x44
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	461a      	mov	r2, r3
 80080de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080e0:	61bb      	str	r3, [r7, #24]
 80080e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e4:	6979      	ldr	r1, [r7, #20]
 80080e6:	69ba      	ldr	r2, [r7, #24]
 80080e8:	e841 2300 	strex	r3, r2, [r1]
 80080ec:	613b      	str	r3, [r7, #16]
   return(result);
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1e6      	bne.n	80080c2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	f003 0310 	and.w	r3, r3, #16
 80080fe:	2b10      	cmp	r3, #16
 8008100:	d103      	bne.n	800810a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2210      	movs	r2, #16
 8008108:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7ff f822 	bl	800715c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008118:	e00b      	b.n	8008132 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7f8 fe02 	bl	8000d24 <HAL_UART_RxCpltCallback>
}
 8008120:	e007      	b.n	8008132 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	699a      	ldr	r2, [r3, #24]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f042 0208 	orr.w	r2, r2, #8
 8008130:	619a      	str	r2, [r3, #24]
}
 8008132:	bf00      	nop
 8008134:	3758      	adds	r7, #88	; 0x58
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b0a6      	sub	sp, #152	; 0x98
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800814a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	69db      	ldr	r3, [r3, #28]
 8008154:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008172:	2b22      	cmp	r3, #34	; 0x22
 8008174:	f040 814f 	bne.w	8008416 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800817e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008182:	e0f6      	b.n	8008372 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800818e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008192:	b2d9      	uxtb	r1, r3
 8008194:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008198:	b2da      	uxtb	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800819e:	400a      	ands	r2, r1
 80081a0:	b2d2      	uxtb	r2, r2
 80081a2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081a8:	1c5a      	adds	r2, r3, #1
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	3b01      	subs	r3, #1
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80081ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80081ce:	f003 0307 	and.w	r3, r3, #7
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d053      	beq.n	800827e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d011      	beq.n	8008206 <UART_RxISR_8BIT_FIFOEN+0xca>
 80081e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00b      	beq.n	8008206 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2201      	movs	r2, #1
 80081f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081fc:	f043 0201 	orr.w	r2, r3, #1
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008206:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800820a:	f003 0302 	and.w	r3, r3, #2
 800820e:	2b00      	cmp	r3, #0
 8008210:	d011      	beq.n	8008236 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008212:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00b      	beq.n	8008236 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2202      	movs	r2, #2
 8008224:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800822c:	f043 0204 	orr.w	r2, r3, #4
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008236:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800823a:	f003 0304 	and.w	r3, r3, #4
 800823e:	2b00      	cmp	r3, #0
 8008240:	d011      	beq.n	8008266 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008242:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00b      	beq.n	8008266 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2204      	movs	r2, #4
 8008254:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800825c:	f043 0202 	orr.w	r2, r3, #2
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800826c:	2b00      	cmp	r3, #0
 800826e:	d006      	beq.n	800827e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7fe ff69 	bl	8007148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008284:	b29b      	uxth	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d173      	bne.n	8008372 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800829a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800829e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80082ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80082ae:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80082b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082b4:	e841 2300 	strex	r3, r2, [r1]
 80082b8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80082ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e4      	bne.n	800828a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3308      	adds	r3, #8
 80082c6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ca:	e853 3f00 	ldrex	r3, [r3]
 80082ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80082d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082d6:	f023 0301 	bic.w	r3, r3, #1
 80082da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	3308      	adds	r3, #8
 80082e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80082e4:	657a      	str	r2, [r7, #84]	; 0x54
 80082e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80082ec:	e841 2300 	strex	r3, r2, [r1]
 80082f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80082f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1e3      	bne.n	80082c0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2220      	movs	r2, #32
 80082fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800830a:	2b01      	cmp	r3, #1
 800830c:	d12e      	bne.n	800836c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831c:	e853 3f00 	ldrex	r3, [r3]
 8008320:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008324:	f023 0310 	bic.w	r3, r3, #16
 8008328:	67bb      	str	r3, [r7, #120]	; 0x78
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	461a      	mov	r2, r3
 8008330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008332:	643b      	str	r3, [r7, #64]	; 0x40
 8008334:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008336:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008338:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800833a:	e841 2300 	strex	r3, r2, [r1]
 800833e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1e6      	bne.n	8008314 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	f003 0310 	and.w	r3, r3, #16
 8008350:	2b10      	cmp	r3, #16
 8008352:	d103      	bne.n	800835c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2210      	movs	r2, #16
 800835a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7fe fef9 	bl	800715c <HAL_UARTEx_RxEventCallback>
 800836a:	e002      	b.n	8008372 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7f8 fcd9 	bl	8000d24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008372:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008376:	2b00      	cmp	r3, #0
 8008378:	d006      	beq.n	8008388 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800837a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800837e:	f003 0320 	and.w	r3, r3, #32
 8008382:	2b00      	cmp	r3, #0
 8008384:	f47f aefe 	bne.w	8008184 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800838e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008392:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008396:	2b00      	cmp	r3, #0
 8008398:	d045      	beq.n	8008426 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80083a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d23e      	bcs.n	8008426 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3308      	adds	r3, #8
 80083ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	e853 3f00 	ldrex	r3, [r3]
 80083b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083be:	673b      	str	r3, [r7, #112]	; 0x70
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3308      	adds	r3, #8
 80083c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80083c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083d0:	e841 2300 	strex	r3, r2, [r1]
 80083d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1e5      	bne.n	80083a8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a14      	ldr	r2, [pc, #80]	; (8008430 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80083e0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	e853 3f00 	ldrex	r3, [r3]
 80083ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	f043 0320 	orr.w	r3, r3, #32
 80083f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	461a      	mov	r2, r3
 80083fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008400:	61bb      	str	r3, [r7, #24]
 8008402:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008404:	6979      	ldr	r1, [r7, #20]
 8008406:	69ba      	ldr	r2, [r7, #24]
 8008408:	e841 2300 	strex	r3, r2, [r1]
 800840c:	613b      	str	r3, [r7, #16]
   return(result);
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1e6      	bne.n	80083e2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008414:	e007      	b.n	8008426 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	699a      	ldr	r2, [r3, #24]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f042 0208 	orr.w	r2, r2, #8
 8008424:	619a      	str	r2, [r3, #24]
}
 8008426:	bf00      	nop
 8008428:	3798      	adds	r7, #152	; 0x98
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	08007e7b 	.word	0x08007e7b

08008434 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b0a8      	sub	sp, #160	; 0xa0
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008442:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	69db      	ldr	r3, [r3, #28]
 800844c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800846a:	2b22      	cmp	r3, #34	; 0x22
 800846c:	f040 8153 	bne.w	8008716 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008476:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800847a:	e0fa      	b.n	8008672 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008482:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800848a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800848e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008492:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008496:	4013      	ands	r3, r2
 8008498:	b29a      	uxth	r2, r3
 800849a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800849e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a4:	1c9a      	adds	r2, r3, #2
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	3b01      	subs	r3, #1
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80084c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084ca:	f003 0307 	and.w	r3, r3, #7
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d053      	beq.n	800857a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d011      	beq.n	8008502 <UART_RxISR_16BIT_FIFOEN+0xce>
 80084de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80084e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00b      	beq.n	8008502 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2201      	movs	r2, #1
 80084f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084f8:	f043 0201 	orr.w	r2, r3, #1
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008502:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d011      	beq.n	8008532 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800850e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00b      	beq.n	8008532 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2202      	movs	r2, #2
 8008520:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008528:	f043 0204 	orr.w	r2, r3, #4
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008532:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008536:	f003 0304 	and.w	r3, r3, #4
 800853a:	2b00      	cmp	r3, #0
 800853c:	d011      	beq.n	8008562 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800853e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00b      	beq.n	8008562 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2204      	movs	r2, #4
 8008550:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008558:	f043 0202 	orr.w	r2, r3, #2
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008568:	2b00      	cmp	r3, #0
 800856a:	d006      	beq.n	800857a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7fe fdeb 	bl	8007148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008580:	b29b      	uxth	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d175      	bne.n	8008672 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800858e:	e853 3f00 	ldrex	r3, [r3]
 8008592:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008596:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800859a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	461a      	mov	r2, r3
 80085a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085aa:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80085ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80085b0:	e841 2300 	strex	r3, r2, [r1]
 80085b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80085b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1e4      	bne.n	8008586 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	3308      	adds	r3, #8
 80085c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085c6:	e853 3f00 	ldrex	r3, [r3]
 80085ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085d2:	f023 0301 	bic.w	r3, r3, #1
 80085d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3308      	adds	r3, #8
 80085e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80085e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085ec:	e841 2300 	strex	r3, r2, [r1]
 80085f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1e1      	bne.n	80085bc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2220      	movs	r2, #32
 80085fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800860a:	2b01      	cmp	r3, #1
 800860c:	d12e      	bne.n	800866c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861c:	e853 3f00 	ldrex	r3, [r3]
 8008620:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008624:	f023 0310 	bic.w	r3, r3, #16
 8008628:	67fb      	str	r3, [r7, #124]	; 0x7c
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	461a      	mov	r2, r3
 8008630:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008632:	647b      	str	r3, [r7, #68]	; 0x44
 8008634:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008636:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008638:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800863a:	e841 2300 	strex	r3, r2, [r1]
 800863e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1e6      	bne.n	8008614 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	f003 0310 	and.w	r3, r3, #16
 8008650:	2b10      	cmp	r3, #16
 8008652:	d103      	bne.n	800865c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2210      	movs	r2, #16
 800865a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7fe fd79 	bl	800715c <HAL_UARTEx_RxEventCallback>
 800866a:	e002      	b.n	8008672 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7f8 fb59 	bl	8000d24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008672:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008676:	2b00      	cmp	r3, #0
 8008678:	d006      	beq.n	8008688 <UART_RxISR_16BIT_FIFOEN+0x254>
 800867a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800867e:	f003 0320 	and.w	r3, r3, #32
 8008682:	2b00      	cmp	r3, #0
 8008684:	f47f aefa 	bne.w	800847c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800868e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008692:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008696:	2b00      	cmp	r3, #0
 8008698:	d045      	beq.n	8008726 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80086a0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d23e      	bcs.n	8008726 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3308      	adds	r3, #8
 80086ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	e853 3f00 	ldrex	r3, [r3]
 80086b6:	623b      	str	r3, [r7, #32]
   return(result);
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086be:	677b      	str	r3, [r7, #116]	; 0x74
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	3308      	adds	r3, #8
 80086c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80086c8:	633a      	str	r2, [r7, #48]	; 0x30
 80086ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086d0:	e841 2300 	strex	r3, r2, [r1]
 80086d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1e5      	bne.n	80086a8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a14      	ldr	r2, [pc, #80]	; (8008730 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80086e0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	e853 3f00 	ldrex	r3, [r3]
 80086ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f043 0320 	orr.w	r3, r3, #32
 80086f6:	673b      	str	r3, [r7, #112]	; 0x70
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	461a      	mov	r2, r3
 80086fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008700:	61fb      	str	r3, [r7, #28]
 8008702:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008704:	69b9      	ldr	r1, [r7, #24]
 8008706:	69fa      	ldr	r2, [r7, #28]
 8008708:	e841 2300 	strex	r3, r2, [r1]
 800870c:	617b      	str	r3, [r7, #20]
   return(result);
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e6      	bne.n	80086e2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008714:	e007      	b.n	8008726 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	699a      	ldr	r2, [r3, #24]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f042 0208 	orr.w	r2, r2, #8
 8008724:	619a      	str	r2, [r3, #24]
}
 8008726:	bf00      	nop
 8008728:	37a0      	adds	r7, #160	; 0xa0
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	08007fdb 	.word	0x08007fdb

08008734 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800877e:	2b01      	cmp	r3, #1
 8008780:	d101      	bne.n	8008786 <HAL_UARTEx_DisableFifoMode+0x16>
 8008782:	2302      	movs	r3, #2
 8008784:	e027      	b.n	80087d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2224      	movs	r2, #36	; 0x24
 8008792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f022 0201 	bic.w	r2, r2, #1
 80087ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80087b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2220      	movs	r2, #32
 80087c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b084      	sub	sp, #16
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d101      	bne.n	80087fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80087f6:	2302      	movs	r3, #2
 80087f8:	e02d      	b.n	8008856 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2224      	movs	r2, #36	; 0x24
 8008806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f022 0201 	bic.w	r2, r2, #1
 8008820:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	430a      	orrs	r2, r1
 8008834:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f850 	bl	80088dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2220      	movs	r2, #32
 8008848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800886e:	2b01      	cmp	r3, #1
 8008870:	d101      	bne.n	8008876 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008872:	2302      	movs	r3, #2
 8008874:	e02d      	b.n	80088d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2224      	movs	r2, #36	; 0x24
 8008882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f022 0201 	bic.w	r2, r2, #1
 800889c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	430a      	orrs	r2, r1
 80088b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f812 	bl	80088dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2220      	movs	r2, #32
 80088c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d108      	bne.n	80088fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80088fc:	e031      	b.n	8008962 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80088fe:	2308      	movs	r3, #8
 8008900:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008902:	2308      	movs	r3, #8
 8008904:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	0e5b      	lsrs	r3, r3, #25
 800890e:	b2db      	uxtb	r3, r3
 8008910:	f003 0307 	and.w	r3, r3, #7
 8008914:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	0f5b      	lsrs	r3, r3, #29
 800891e:	b2db      	uxtb	r3, r3
 8008920:	f003 0307 	and.w	r3, r3, #7
 8008924:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008926:	7bbb      	ldrb	r3, [r7, #14]
 8008928:	7b3a      	ldrb	r2, [r7, #12]
 800892a:	4911      	ldr	r1, [pc, #68]	; (8008970 <UARTEx_SetNbDataToProcess+0x94>)
 800892c:	5c8a      	ldrb	r2, [r1, r2]
 800892e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008932:	7b3a      	ldrb	r2, [r7, #12]
 8008934:	490f      	ldr	r1, [pc, #60]	; (8008974 <UARTEx_SetNbDataToProcess+0x98>)
 8008936:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008938:	fb93 f3f2 	sdiv	r3, r3, r2
 800893c:	b29a      	uxth	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008944:	7bfb      	ldrb	r3, [r7, #15]
 8008946:	7b7a      	ldrb	r2, [r7, #13]
 8008948:	4909      	ldr	r1, [pc, #36]	; (8008970 <UARTEx_SetNbDataToProcess+0x94>)
 800894a:	5c8a      	ldrb	r2, [r1, r2]
 800894c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008950:	7b7a      	ldrb	r2, [r7, #13]
 8008952:	4908      	ldr	r1, [pc, #32]	; (8008974 <UARTEx_SetNbDataToProcess+0x98>)
 8008954:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008956:	fb93 f3f2 	sdiv	r3, r3, r2
 800895a:	b29a      	uxth	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008962:	bf00      	nop
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	0800a364 	.word	0x0800a364
 8008974:	0800a36c 	.word	0x0800a36c

08008978 <atoi>:
 8008978:	220a      	movs	r2, #10
 800897a:	2100      	movs	r1, #0
 800897c:	f000 b930 	b.w	8008be0 <strtol>

08008980 <__errno>:
 8008980:	4b01      	ldr	r3, [pc, #4]	; (8008988 <__errno+0x8>)
 8008982:	6818      	ldr	r0, [r3, #0]
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	20000010 	.word	0x20000010

0800898c <__libc_init_array>:
 800898c:	b570      	push	{r4, r5, r6, lr}
 800898e:	4d0d      	ldr	r5, [pc, #52]	; (80089c4 <__libc_init_array+0x38>)
 8008990:	4c0d      	ldr	r4, [pc, #52]	; (80089c8 <__libc_init_array+0x3c>)
 8008992:	1b64      	subs	r4, r4, r5
 8008994:	10a4      	asrs	r4, r4, #2
 8008996:	2600      	movs	r6, #0
 8008998:	42a6      	cmp	r6, r4
 800899a:	d109      	bne.n	80089b0 <__libc_init_array+0x24>
 800899c:	4d0b      	ldr	r5, [pc, #44]	; (80089cc <__libc_init_array+0x40>)
 800899e:	4c0c      	ldr	r4, [pc, #48]	; (80089d0 <__libc_init_array+0x44>)
 80089a0:	f001 fade 	bl	8009f60 <_init>
 80089a4:	1b64      	subs	r4, r4, r5
 80089a6:	10a4      	asrs	r4, r4, #2
 80089a8:	2600      	movs	r6, #0
 80089aa:	42a6      	cmp	r6, r4
 80089ac:	d105      	bne.n	80089ba <__libc_init_array+0x2e>
 80089ae:	bd70      	pop	{r4, r5, r6, pc}
 80089b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80089b4:	4798      	blx	r3
 80089b6:	3601      	adds	r6, #1
 80089b8:	e7ee      	b.n	8008998 <__libc_init_array+0xc>
 80089ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80089be:	4798      	blx	r3
 80089c0:	3601      	adds	r6, #1
 80089c2:	e7f2      	b.n	80089aa <__libc_init_array+0x1e>
 80089c4:	0800a5c4 	.word	0x0800a5c4
 80089c8:	0800a5c4 	.word	0x0800a5c4
 80089cc:	0800a5c4 	.word	0x0800a5c4
 80089d0:	0800a5c8 	.word	0x0800a5c8

080089d4 <memset>:
 80089d4:	4402      	add	r2, r0
 80089d6:	4603      	mov	r3, r0
 80089d8:	4293      	cmp	r3, r2
 80089da:	d100      	bne.n	80089de <memset+0xa>
 80089dc:	4770      	bx	lr
 80089de:	f803 1b01 	strb.w	r1, [r3], #1
 80089e2:	e7f9      	b.n	80089d8 <memset+0x4>

080089e4 <siprintf>:
 80089e4:	b40e      	push	{r1, r2, r3}
 80089e6:	b500      	push	{lr}
 80089e8:	b09c      	sub	sp, #112	; 0x70
 80089ea:	ab1d      	add	r3, sp, #116	; 0x74
 80089ec:	9002      	str	r0, [sp, #8]
 80089ee:	9006      	str	r0, [sp, #24]
 80089f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089f4:	4809      	ldr	r0, [pc, #36]	; (8008a1c <siprintf+0x38>)
 80089f6:	9107      	str	r1, [sp, #28]
 80089f8:	9104      	str	r1, [sp, #16]
 80089fa:	4909      	ldr	r1, [pc, #36]	; (8008a20 <siprintf+0x3c>)
 80089fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a00:	9105      	str	r1, [sp, #20]
 8008a02:	6800      	ldr	r0, [r0, #0]
 8008a04:	9301      	str	r3, [sp, #4]
 8008a06:	a902      	add	r1, sp, #8
 8008a08:	f000 fa68 	bl	8008edc <_svfiprintf_r>
 8008a0c:	9b02      	ldr	r3, [sp, #8]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	701a      	strb	r2, [r3, #0]
 8008a12:	b01c      	add	sp, #112	; 0x70
 8008a14:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a18:	b003      	add	sp, #12
 8008a1a:	4770      	bx	lr
 8008a1c:	20000010 	.word	0x20000010
 8008a20:	ffff0208 	.word	0xffff0208

08008a24 <strtok>:
 8008a24:	4b16      	ldr	r3, [pc, #88]	; (8008a80 <strtok+0x5c>)
 8008a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a28:	681e      	ldr	r6, [r3, #0]
 8008a2a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	b9fc      	cbnz	r4, 8008a70 <strtok+0x4c>
 8008a30:	2050      	movs	r0, #80	; 0x50
 8008a32:	9101      	str	r1, [sp, #4]
 8008a34:	f000 f90e 	bl	8008c54 <malloc>
 8008a38:	9901      	ldr	r1, [sp, #4]
 8008a3a:	65b0      	str	r0, [r6, #88]	; 0x58
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	b920      	cbnz	r0, 8008a4a <strtok+0x26>
 8008a40:	4b10      	ldr	r3, [pc, #64]	; (8008a84 <strtok+0x60>)
 8008a42:	4811      	ldr	r0, [pc, #68]	; (8008a88 <strtok+0x64>)
 8008a44:	2157      	movs	r1, #87	; 0x57
 8008a46:	f000 f8d5 	bl	8008bf4 <__assert_func>
 8008a4a:	e9c0 4400 	strd	r4, r4, [r0]
 8008a4e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008a52:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008a56:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008a5a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008a5e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008a62:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008a66:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008a6a:	6184      	str	r4, [r0, #24]
 8008a6c:	7704      	strb	r4, [r0, #28]
 8008a6e:	6244      	str	r4, [r0, #36]	; 0x24
 8008a70:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8008a72:	2301      	movs	r3, #1
 8008a74:	4628      	mov	r0, r5
 8008a76:	b002      	add	sp, #8
 8008a78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a7c:	f000 b806 	b.w	8008a8c <__strtok_r>
 8008a80:	20000010 	.word	0x20000010
 8008a84:	0800a378 	.word	0x0800a378
 8008a88:	0800a38f 	.word	0x0800a38f

08008a8c <__strtok_r>:
 8008a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a8e:	b908      	cbnz	r0, 8008a94 <__strtok_r+0x8>
 8008a90:	6810      	ldr	r0, [r2, #0]
 8008a92:	b188      	cbz	r0, 8008ab8 <__strtok_r+0x2c>
 8008a94:	4604      	mov	r4, r0
 8008a96:	4620      	mov	r0, r4
 8008a98:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008a9c:	460f      	mov	r7, r1
 8008a9e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008aa2:	b91e      	cbnz	r6, 8008aac <__strtok_r+0x20>
 8008aa4:	b965      	cbnz	r5, 8008ac0 <__strtok_r+0x34>
 8008aa6:	6015      	str	r5, [r2, #0]
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	e005      	b.n	8008ab8 <__strtok_r+0x2c>
 8008aac:	42b5      	cmp	r5, r6
 8008aae:	d1f6      	bne.n	8008a9e <__strtok_r+0x12>
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1f0      	bne.n	8008a96 <__strtok_r+0xa>
 8008ab4:	6014      	str	r4, [r2, #0]
 8008ab6:	7003      	strb	r3, [r0, #0]
 8008ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aba:	461c      	mov	r4, r3
 8008abc:	e00c      	b.n	8008ad8 <__strtok_r+0x4c>
 8008abe:	b915      	cbnz	r5, 8008ac6 <__strtok_r+0x3a>
 8008ac0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ac4:	460e      	mov	r6, r1
 8008ac6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008aca:	42ab      	cmp	r3, r5
 8008acc:	d1f7      	bne.n	8008abe <__strtok_r+0x32>
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d0f3      	beq.n	8008aba <__strtok_r+0x2e>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008ad8:	6014      	str	r4, [r2, #0]
 8008ada:	e7ed      	b.n	8008ab8 <__strtok_r+0x2c>

08008adc <_strtol_l.constprop.0>:
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae2:	d001      	beq.n	8008ae8 <_strtol_l.constprop.0+0xc>
 8008ae4:	2b24      	cmp	r3, #36	; 0x24
 8008ae6:	d906      	bls.n	8008af6 <_strtol_l.constprop.0+0x1a>
 8008ae8:	f7ff ff4a 	bl	8008980 <__errno>
 8008aec:	2316      	movs	r3, #22
 8008aee:	6003      	str	r3, [r0, #0]
 8008af0:	2000      	movs	r0, #0
 8008af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008bdc <_strtol_l.constprop.0+0x100>
 8008afa:	460d      	mov	r5, r1
 8008afc:	462e      	mov	r6, r5
 8008afe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b02:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008b06:	f017 0708 	ands.w	r7, r7, #8
 8008b0a:	d1f7      	bne.n	8008afc <_strtol_l.constprop.0+0x20>
 8008b0c:	2c2d      	cmp	r4, #45	; 0x2d
 8008b0e:	d132      	bne.n	8008b76 <_strtol_l.constprop.0+0x9a>
 8008b10:	782c      	ldrb	r4, [r5, #0]
 8008b12:	2701      	movs	r7, #1
 8008b14:	1cb5      	adds	r5, r6, #2
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d05b      	beq.n	8008bd2 <_strtol_l.constprop.0+0xf6>
 8008b1a:	2b10      	cmp	r3, #16
 8008b1c:	d109      	bne.n	8008b32 <_strtol_l.constprop.0+0x56>
 8008b1e:	2c30      	cmp	r4, #48	; 0x30
 8008b20:	d107      	bne.n	8008b32 <_strtol_l.constprop.0+0x56>
 8008b22:	782c      	ldrb	r4, [r5, #0]
 8008b24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008b28:	2c58      	cmp	r4, #88	; 0x58
 8008b2a:	d14d      	bne.n	8008bc8 <_strtol_l.constprop.0+0xec>
 8008b2c:	786c      	ldrb	r4, [r5, #1]
 8008b2e:	2310      	movs	r3, #16
 8008b30:	3502      	adds	r5, #2
 8008b32:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008b36:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b3a:	f04f 0c00 	mov.w	ip, #0
 8008b3e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008b42:	4666      	mov	r6, ip
 8008b44:	fb03 8a19 	mls	sl, r3, r9, r8
 8008b48:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008b4c:	f1be 0f09 	cmp.w	lr, #9
 8008b50:	d816      	bhi.n	8008b80 <_strtol_l.constprop.0+0xa4>
 8008b52:	4674      	mov	r4, lr
 8008b54:	42a3      	cmp	r3, r4
 8008b56:	dd24      	ble.n	8008ba2 <_strtol_l.constprop.0+0xc6>
 8008b58:	f1bc 0f00 	cmp.w	ip, #0
 8008b5c:	db1e      	blt.n	8008b9c <_strtol_l.constprop.0+0xc0>
 8008b5e:	45b1      	cmp	r9, r6
 8008b60:	d31c      	bcc.n	8008b9c <_strtol_l.constprop.0+0xc0>
 8008b62:	d101      	bne.n	8008b68 <_strtol_l.constprop.0+0x8c>
 8008b64:	45a2      	cmp	sl, r4
 8008b66:	db19      	blt.n	8008b9c <_strtol_l.constprop.0+0xc0>
 8008b68:	fb06 4603 	mla	r6, r6, r3, r4
 8008b6c:	f04f 0c01 	mov.w	ip, #1
 8008b70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b74:	e7e8      	b.n	8008b48 <_strtol_l.constprop.0+0x6c>
 8008b76:	2c2b      	cmp	r4, #43	; 0x2b
 8008b78:	bf04      	itt	eq
 8008b7a:	782c      	ldrbeq	r4, [r5, #0]
 8008b7c:	1cb5      	addeq	r5, r6, #2
 8008b7e:	e7ca      	b.n	8008b16 <_strtol_l.constprop.0+0x3a>
 8008b80:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008b84:	f1be 0f19 	cmp.w	lr, #25
 8008b88:	d801      	bhi.n	8008b8e <_strtol_l.constprop.0+0xb2>
 8008b8a:	3c37      	subs	r4, #55	; 0x37
 8008b8c:	e7e2      	b.n	8008b54 <_strtol_l.constprop.0+0x78>
 8008b8e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008b92:	f1be 0f19 	cmp.w	lr, #25
 8008b96:	d804      	bhi.n	8008ba2 <_strtol_l.constprop.0+0xc6>
 8008b98:	3c57      	subs	r4, #87	; 0x57
 8008b9a:	e7db      	b.n	8008b54 <_strtol_l.constprop.0+0x78>
 8008b9c:	f04f 3cff 	mov.w	ip, #4294967295
 8008ba0:	e7e6      	b.n	8008b70 <_strtol_l.constprop.0+0x94>
 8008ba2:	f1bc 0f00 	cmp.w	ip, #0
 8008ba6:	da05      	bge.n	8008bb4 <_strtol_l.constprop.0+0xd8>
 8008ba8:	2322      	movs	r3, #34	; 0x22
 8008baa:	6003      	str	r3, [r0, #0]
 8008bac:	4646      	mov	r6, r8
 8008bae:	b942      	cbnz	r2, 8008bc2 <_strtol_l.constprop.0+0xe6>
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	e79e      	b.n	8008af2 <_strtol_l.constprop.0+0x16>
 8008bb4:	b107      	cbz	r7, 8008bb8 <_strtol_l.constprop.0+0xdc>
 8008bb6:	4276      	negs	r6, r6
 8008bb8:	2a00      	cmp	r2, #0
 8008bba:	d0f9      	beq.n	8008bb0 <_strtol_l.constprop.0+0xd4>
 8008bbc:	f1bc 0f00 	cmp.w	ip, #0
 8008bc0:	d000      	beq.n	8008bc4 <_strtol_l.constprop.0+0xe8>
 8008bc2:	1e69      	subs	r1, r5, #1
 8008bc4:	6011      	str	r1, [r2, #0]
 8008bc6:	e7f3      	b.n	8008bb0 <_strtol_l.constprop.0+0xd4>
 8008bc8:	2430      	movs	r4, #48	; 0x30
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1b1      	bne.n	8008b32 <_strtol_l.constprop.0+0x56>
 8008bce:	2308      	movs	r3, #8
 8008bd0:	e7af      	b.n	8008b32 <_strtol_l.constprop.0+0x56>
 8008bd2:	2c30      	cmp	r4, #48	; 0x30
 8008bd4:	d0a5      	beq.n	8008b22 <_strtol_l.constprop.0+0x46>
 8008bd6:	230a      	movs	r3, #10
 8008bd8:	e7ab      	b.n	8008b32 <_strtol_l.constprop.0+0x56>
 8008bda:	bf00      	nop
 8008bdc:	0800a429 	.word	0x0800a429

08008be0 <strtol>:
 8008be0:	4613      	mov	r3, r2
 8008be2:	460a      	mov	r2, r1
 8008be4:	4601      	mov	r1, r0
 8008be6:	4802      	ldr	r0, [pc, #8]	; (8008bf0 <strtol+0x10>)
 8008be8:	6800      	ldr	r0, [r0, #0]
 8008bea:	f7ff bf77 	b.w	8008adc <_strtol_l.constprop.0>
 8008bee:	bf00      	nop
 8008bf0:	20000010 	.word	0x20000010

08008bf4 <__assert_func>:
 8008bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bf6:	4614      	mov	r4, r2
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	4b09      	ldr	r3, [pc, #36]	; (8008c20 <__assert_func+0x2c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4605      	mov	r5, r0
 8008c00:	68d8      	ldr	r0, [r3, #12]
 8008c02:	b14c      	cbz	r4, 8008c18 <__assert_func+0x24>
 8008c04:	4b07      	ldr	r3, [pc, #28]	; (8008c24 <__assert_func+0x30>)
 8008c06:	9100      	str	r1, [sp, #0]
 8008c08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c0c:	4906      	ldr	r1, [pc, #24]	; (8008c28 <__assert_func+0x34>)
 8008c0e:	462b      	mov	r3, r5
 8008c10:	f000 f80e 	bl	8008c30 <fiprintf>
 8008c14:	f000 fe20 	bl	8009858 <abort>
 8008c18:	4b04      	ldr	r3, [pc, #16]	; (8008c2c <__assert_func+0x38>)
 8008c1a:	461c      	mov	r4, r3
 8008c1c:	e7f3      	b.n	8008c06 <__assert_func+0x12>
 8008c1e:	bf00      	nop
 8008c20:	20000010 	.word	0x20000010
 8008c24:	0800a3ec 	.word	0x0800a3ec
 8008c28:	0800a3f9 	.word	0x0800a3f9
 8008c2c:	0800a427 	.word	0x0800a427

08008c30 <fiprintf>:
 8008c30:	b40e      	push	{r1, r2, r3}
 8008c32:	b503      	push	{r0, r1, lr}
 8008c34:	4601      	mov	r1, r0
 8008c36:	ab03      	add	r3, sp, #12
 8008c38:	4805      	ldr	r0, [pc, #20]	; (8008c50 <fiprintf+0x20>)
 8008c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c3e:	6800      	ldr	r0, [r0, #0]
 8008c40:	9301      	str	r3, [sp, #4]
 8008c42:	f000 fa75 	bl	8009130 <_vfiprintf_r>
 8008c46:	b002      	add	sp, #8
 8008c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c4c:	b003      	add	sp, #12
 8008c4e:	4770      	bx	lr
 8008c50:	20000010 	.word	0x20000010

08008c54 <malloc>:
 8008c54:	4b02      	ldr	r3, [pc, #8]	; (8008c60 <malloc+0xc>)
 8008c56:	4601      	mov	r1, r0
 8008c58:	6818      	ldr	r0, [r3, #0]
 8008c5a:	f000 b86f 	b.w	8008d3c <_malloc_r>
 8008c5e:	bf00      	nop
 8008c60:	20000010 	.word	0x20000010

08008c64 <_free_r>:
 8008c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c66:	2900      	cmp	r1, #0
 8008c68:	d044      	beq.n	8008cf4 <_free_r+0x90>
 8008c6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c6e:	9001      	str	r0, [sp, #4]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f1a1 0404 	sub.w	r4, r1, #4
 8008c76:	bfb8      	it	lt
 8008c78:	18e4      	addlt	r4, r4, r3
 8008c7a:	f001 f83d 	bl	8009cf8 <__malloc_lock>
 8008c7e:	4a1e      	ldr	r2, [pc, #120]	; (8008cf8 <_free_r+0x94>)
 8008c80:	9801      	ldr	r0, [sp, #4]
 8008c82:	6813      	ldr	r3, [r2, #0]
 8008c84:	b933      	cbnz	r3, 8008c94 <_free_r+0x30>
 8008c86:	6063      	str	r3, [r4, #4]
 8008c88:	6014      	str	r4, [r2, #0]
 8008c8a:	b003      	add	sp, #12
 8008c8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c90:	f001 b838 	b.w	8009d04 <__malloc_unlock>
 8008c94:	42a3      	cmp	r3, r4
 8008c96:	d908      	bls.n	8008caa <_free_r+0x46>
 8008c98:	6825      	ldr	r5, [r4, #0]
 8008c9a:	1961      	adds	r1, r4, r5
 8008c9c:	428b      	cmp	r3, r1
 8008c9e:	bf01      	itttt	eq
 8008ca0:	6819      	ldreq	r1, [r3, #0]
 8008ca2:	685b      	ldreq	r3, [r3, #4]
 8008ca4:	1949      	addeq	r1, r1, r5
 8008ca6:	6021      	streq	r1, [r4, #0]
 8008ca8:	e7ed      	b.n	8008c86 <_free_r+0x22>
 8008caa:	461a      	mov	r2, r3
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	b10b      	cbz	r3, 8008cb4 <_free_r+0x50>
 8008cb0:	42a3      	cmp	r3, r4
 8008cb2:	d9fa      	bls.n	8008caa <_free_r+0x46>
 8008cb4:	6811      	ldr	r1, [r2, #0]
 8008cb6:	1855      	adds	r5, r2, r1
 8008cb8:	42a5      	cmp	r5, r4
 8008cba:	d10b      	bne.n	8008cd4 <_free_r+0x70>
 8008cbc:	6824      	ldr	r4, [r4, #0]
 8008cbe:	4421      	add	r1, r4
 8008cc0:	1854      	adds	r4, r2, r1
 8008cc2:	42a3      	cmp	r3, r4
 8008cc4:	6011      	str	r1, [r2, #0]
 8008cc6:	d1e0      	bne.n	8008c8a <_free_r+0x26>
 8008cc8:	681c      	ldr	r4, [r3, #0]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	6053      	str	r3, [r2, #4]
 8008cce:	4421      	add	r1, r4
 8008cd0:	6011      	str	r1, [r2, #0]
 8008cd2:	e7da      	b.n	8008c8a <_free_r+0x26>
 8008cd4:	d902      	bls.n	8008cdc <_free_r+0x78>
 8008cd6:	230c      	movs	r3, #12
 8008cd8:	6003      	str	r3, [r0, #0]
 8008cda:	e7d6      	b.n	8008c8a <_free_r+0x26>
 8008cdc:	6825      	ldr	r5, [r4, #0]
 8008cde:	1961      	adds	r1, r4, r5
 8008ce0:	428b      	cmp	r3, r1
 8008ce2:	bf04      	itt	eq
 8008ce4:	6819      	ldreq	r1, [r3, #0]
 8008ce6:	685b      	ldreq	r3, [r3, #4]
 8008ce8:	6063      	str	r3, [r4, #4]
 8008cea:	bf04      	itt	eq
 8008cec:	1949      	addeq	r1, r1, r5
 8008cee:	6021      	streq	r1, [r4, #0]
 8008cf0:	6054      	str	r4, [r2, #4]
 8008cf2:	e7ca      	b.n	8008c8a <_free_r+0x26>
 8008cf4:	b003      	add	sp, #12
 8008cf6:	bd30      	pop	{r4, r5, pc}
 8008cf8:	200002d8 	.word	0x200002d8

08008cfc <sbrk_aligned>:
 8008cfc:	b570      	push	{r4, r5, r6, lr}
 8008cfe:	4e0e      	ldr	r6, [pc, #56]	; (8008d38 <sbrk_aligned+0x3c>)
 8008d00:	460c      	mov	r4, r1
 8008d02:	6831      	ldr	r1, [r6, #0]
 8008d04:	4605      	mov	r5, r0
 8008d06:	b911      	cbnz	r1, 8008d0e <sbrk_aligned+0x12>
 8008d08:	f000 fcd6 	bl	80096b8 <_sbrk_r>
 8008d0c:	6030      	str	r0, [r6, #0]
 8008d0e:	4621      	mov	r1, r4
 8008d10:	4628      	mov	r0, r5
 8008d12:	f000 fcd1 	bl	80096b8 <_sbrk_r>
 8008d16:	1c43      	adds	r3, r0, #1
 8008d18:	d00a      	beq.n	8008d30 <sbrk_aligned+0x34>
 8008d1a:	1cc4      	adds	r4, r0, #3
 8008d1c:	f024 0403 	bic.w	r4, r4, #3
 8008d20:	42a0      	cmp	r0, r4
 8008d22:	d007      	beq.n	8008d34 <sbrk_aligned+0x38>
 8008d24:	1a21      	subs	r1, r4, r0
 8008d26:	4628      	mov	r0, r5
 8008d28:	f000 fcc6 	bl	80096b8 <_sbrk_r>
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	d101      	bne.n	8008d34 <sbrk_aligned+0x38>
 8008d30:	f04f 34ff 	mov.w	r4, #4294967295
 8008d34:	4620      	mov	r0, r4
 8008d36:	bd70      	pop	{r4, r5, r6, pc}
 8008d38:	200002dc 	.word	0x200002dc

08008d3c <_malloc_r>:
 8008d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d40:	1ccd      	adds	r5, r1, #3
 8008d42:	f025 0503 	bic.w	r5, r5, #3
 8008d46:	3508      	adds	r5, #8
 8008d48:	2d0c      	cmp	r5, #12
 8008d4a:	bf38      	it	cc
 8008d4c:	250c      	movcc	r5, #12
 8008d4e:	2d00      	cmp	r5, #0
 8008d50:	4607      	mov	r7, r0
 8008d52:	db01      	blt.n	8008d58 <_malloc_r+0x1c>
 8008d54:	42a9      	cmp	r1, r5
 8008d56:	d905      	bls.n	8008d64 <_malloc_r+0x28>
 8008d58:	230c      	movs	r3, #12
 8008d5a:	603b      	str	r3, [r7, #0]
 8008d5c:	2600      	movs	r6, #0
 8008d5e:	4630      	mov	r0, r6
 8008d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d64:	4e2e      	ldr	r6, [pc, #184]	; (8008e20 <_malloc_r+0xe4>)
 8008d66:	f000 ffc7 	bl	8009cf8 <__malloc_lock>
 8008d6a:	6833      	ldr	r3, [r6, #0]
 8008d6c:	461c      	mov	r4, r3
 8008d6e:	bb34      	cbnz	r4, 8008dbe <_malloc_r+0x82>
 8008d70:	4629      	mov	r1, r5
 8008d72:	4638      	mov	r0, r7
 8008d74:	f7ff ffc2 	bl	8008cfc <sbrk_aligned>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	d14d      	bne.n	8008e1a <_malloc_r+0xde>
 8008d7e:	6834      	ldr	r4, [r6, #0]
 8008d80:	4626      	mov	r6, r4
 8008d82:	2e00      	cmp	r6, #0
 8008d84:	d140      	bne.n	8008e08 <_malloc_r+0xcc>
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	4631      	mov	r1, r6
 8008d8a:	4638      	mov	r0, r7
 8008d8c:	eb04 0803 	add.w	r8, r4, r3
 8008d90:	f000 fc92 	bl	80096b8 <_sbrk_r>
 8008d94:	4580      	cmp	r8, r0
 8008d96:	d13a      	bne.n	8008e0e <_malloc_r+0xd2>
 8008d98:	6821      	ldr	r1, [r4, #0]
 8008d9a:	3503      	adds	r5, #3
 8008d9c:	1a6d      	subs	r5, r5, r1
 8008d9e:	f025 0503 	bic.w	r5, r5, #3
 8008da2:	3508      	adds	r5, #8
 8008da4:	2d0c      	cmp	r5, #12
 8008da6:	bf38      	it	cc
 8008da8:	250c      	movcc	r5, #12
 8008daa:	4629      	mov	r1, r5
 8008dac:	4638      	mov	r0, r7
 8008dae:	f7ff ffa5 	bl	8008cfc <sbrk_aligned>
 8008db2:	3001      	adds	r0, #1
 8008db4:	d02b      	beq.n	8008e0e <_malloc_r+0xd2>
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	442b      	add	r3, r5
 8008dba:	6023      	str	r3, [r4, #0]
 8008dbc:	e00e      	b.n	8008ddc <_malloc_r+0xa0>
 8008dbe:	6822      	ldr	r2, [r4, #0]
 8008dc0:	1b52      	subs	r2, r2, r5
 8008dc2:	d41e      	bmi.n	8008e02 <_malloc_r+0xc6>
 8008dc4:	2a0b      	cmp	r2, #11
 8008dc6:	d916      	bls.n	8008df6 <_malloc_r+0xba>
 8008dc8:	1961      	adds	r1, r4, r5
 8008dca:	42a3      	cmp	r3, r4
 8008dcc:	6025      	str	r5, [r4, #0]
 8008dce:	bf18      	it	ne
 8008dd0:	6059      	strne	r1, [r3, #4]
 8008dd2:	6863      	ldr	r3, [r4, #4]
 8008dd4:	bf08      	it	eq
 8008dd6:	6031      	streq	r1, [r6, #0]
 8008dd8:	5162      	str	r2, [r4, r5]
 8008dda:	604b      	str	r3, [r1, #4]
 8008ddc:	4638      	mov	r0, r7
 8008dde:	f104 060b 	add.w	r6, r4, #11
 8008de2:	f000 ff8f 	bl	8009d04 <__malloc_unlock>
 8008de6:	f026 0607 	bic.w	r6, r6, #7
 8008dea:	1d23      	adds	r3, r4, #4
 8008dec:	1af2      	subs	r2, r6, r3
 8008dee:	d0b6      	beq.n	8008d5e <_malloc_r+0x22>
 8008df0:	1b9b      	subs	r3, r3, r6
 8008df2:	50a3      	str	r3, [r4, r2]
 8008df4:	e7b3      	b.n	8008d5e <_malloc_r+0x22>
 8008df6:	6862      	ldr	r2, [r4, #4]
 8008df8:	42a3      	cmp	r3, r4
 8008dfa:	bf0c      	ite	eq
 8008dfc:	6032      	streq	r2, [r6, #0]
 8008dfe:	605a      	strne	r2, [r3, #4]
 8008e00:	e7ec      	b.n	8008ddc <_malloc_r+0xa0>
 8008e02:	4623      	mov	r3, r4
 8008e04:	6864      	ldr	r4, [r4, #4]
 8008e06:	e7b2      	b.n	8008d6e <_malloc_r+0x32>
 8008e08:	4634      	mov	r4, r6
 8008e0a:	6876      	ldr	r6, [r6, #4]
 8008e0c:	e7b9      	b.n	8008d82 <_malloc_r+0x46>
 8008e0e:	230c      	movs	r3, #12
 8008e10:	603b      	str	r3, [r7, #0]
 8008e12:	4638      	mov	r0, r7
 8008e14:	f000 ff76 	bl	8009d04 <__malloc_unlock>
 8008e18:	e7a1      	b.n	8008d5e <_malloc_r+0x22>
 8008e1a:	6025      	str	r5, [r4, #0]
 8008e1c:	e7de      	b.n	8008ddc <_malloc_r+0xa0>
 8008e1e:	bf00      	nop
 8008e20:	200002d8 	.word	0x200002d8

08008e24 <__ssputs_r>:
 8008e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e28:	688e      	ldr	r6, [r1, #8]
 8008e2a:	429e      	cmp	r6, r3
 8008e2c:	4682      	mov	sl, r0
 8008e2e:	460c      	mov	r4, r1
 8008e30:	4690      	mov	r8, r2
 8008e32:	461f      	mov	r7, r3
 8008e34:	d838      	bhi.n	8008ea8 <__ssputs_r+0x84>
 8008e36:	898a      	ldrh	r2, [r1, #12]
 8008e38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e3c:	d032      	beq.n	8008ea4 <__ssputs_r+0x80>
 8008e3e:	6825      	ldr	r5, [r4, #0]
 8008e40:	6909      	ldr	r1, [r1, #16]
 8008e42:	eba5 0901 	sub.w	r9, r5, r1
 8008e46:	6965      	ldr	r5, [r4, #20]
 8008e48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e50:	3301      	adds	r3, #1
 8008e52:	444b      	add	r3, r9
 8008e54:	106d      	asrs	r5, r5, #1
 8008e56:	429d      	cmp	r5, r3
 8008e58:	bf38      	it	cc
 8008e5a:	461d      	movcc	r5, r3
 8008e5c:	0553      	lsls	r3, r2, #21
 8008e5e:	d531      	bpl.n	8008ec4 <__ssputs_r+0xa0>
 8008e60:	4629      	mov	r1, r5
 8008e62:	f7ff ff6b 	bl	8008d3c <_malloc_r>
 8008e66:	4606      	mov	r6, r0
 8008e68:	b950      	cbnz	r0, 8008e80 <__ssputs_r+0x5c>
 8008e6a:	230c      	movs	r3, #12
 8008e6c:	f8ca 3000 	str.w	r3, [sl]
 8008e70:	89a3      	ldrh	r3, [r4, #12]
 8008e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e76:	81a3      	strh	r3, [r4, #12]
 8008e78:	f04f 30ff 	mov.w	r0, #4294967295
 8008e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e80:	6921      	ldr	r1, [r4, #16]
 8008e82:	464a      	mov	r2, r9
 8008e84:	f000 ff10 	bl	8009ca8 <memcpy>
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e92:	81a3      	strh	r3, [r4, #12]
 8008e94:	6126      	str	r6, [r4, #16]
 8008e96:	6165      	str	r5, [r4, #20]
 8008e98:	444e      	add	r6, r9
 8008e9a:	eba5 0509 	sub.w	r5, r5, r9
 8008e9e:	6026      	str	r6, [r4, #0]
 8008ea0:	60a5      	str	r5, [r4, #8]
 8008ea2:	463e      	mov	r6, r7
 8008ea4:	42be      	cmp	r6, r7
 8008ea6:	d900      	bls.n	8008eaa <__ssputs_r+0x86>
 8008ea8:	463e      	mov	r6, r7
 8008eaa:	6820      	ldr	r0, [r4, #0]
 8008eac:	4632      	mov	r2, r6
 8008eae:	4641      	mov	r1, r8
 8008eb0:	f000 ff08 	bl	8009cc4 <memmove>
 8008eb4:	68a3      	ldr	r3, [r4, #8]
 8008eb6:	1b9b      	subs	r3, r3, r6
 8008eb8:	60a3      	str	r3, [r4, #8]
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	4433      	add	r3, r6
 8008ebe:	6023      	str	r3, [r4, #0]
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	e7db      	b.n	8008e7c <__ssputs_r+0x58>
 8008ec4:	462a      	mov	r2, r5
 8008ec6:	f000 ff23 	bl	8009d10 <_realloc_r>
 8008eca:	4606      	mov	r6, r0
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d1e1      	bne.n	8008e94 <__ssputs_r+0x70>
 8008ed0:	6921      	ldr	r1, [r4, #16]
 8008ed2:	4650      	mov	r0, sl
 8008ed4:	f7ff fec6 	bl	8008c64 <_free_r>
 8008ed8:	e7c7      	b.n	8008e6a <__ssputs_r+0x46>
	...

08008edc <_svfiprintf_r>:
 8008edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee0:	4698      	mov	r8, r3
 8008ee2:	898b      	ldrh	r3, [r1, #12]
 8008ee4:	061b      	lsls	r3, r3, #24
 8008ee6:	b09d      	sub	sp, #116	; 0x74
 8008ee8:	4607      	mov	r7, r0
 8008eea:	460d      	mov	r5, r1
 8008eec:	4614      	mov	r4, r2
 8008eee:	d50e      	bpl.n	8008f0e <_svfiprintf_r+0x32>
 8008ef0:	690b      	ldr	r3, [r1, #16]
 8008ef2:	b963      	cbnz	r3, 8008f0e <_svfiprintf_r+0x32>
 8008ef4:	2140      	movs	r1, #64	; 0x40
 8008ef6:	f7ff ff21 	bl	8008d3c <_malloc_r>
 8008efa:	6028      	str	r0, [r5, #0]
 8008efc:	6128      	str	r0, [r5, #16]
 8008efe:	b920      	cbnz	r0, 8008f0a <_svfiprintf_r+0x2e>
 8008f00:	230c      	movs	r3, #12
 8008f02:	603b      	str	r3, [r7, #0]
 8008f04:	f04f 30ff 	mov.w	r0, #4294967295
 8008f08:	e0d1      	b.n	80090ae <_svfiprintf_r+0x1d2>
 8008f0a:	2340      	movs	r3, #64	; 0x40
 8008f0c:	616b      	str	r3, [r5, #20]
 8008f0e:	2300      	movs	r3, #0
 8008f10:	9309      	str	r3, [sp, #36]	; 0x24
 8008f12:	2320      	movs	r3, #32
 8008f14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f18:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f1c:	2330      	movs	r3, #48	; 0x30
 8008f1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80090c8 <_svfiprintf_r+0x1ec>
 8008f22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f26:	f04f 0901 	mov.w	r9, #1
 8008f2a:	4623      	mov	r3, r4
 8008f2c:	469a      	mov	sl, r3
 8008f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f32:	b10a      	cbz	r2, 8008f38 <_svfiprintf_r+0x5c>
 8008f34:	2a25      	cmp	r2, #37	; 0x25
 8008f36:	d1f9      	bne.n	8008f2c <_svfiprintf_r+0x50>
 8008f38:	ebba 0b04 	subs.w	fp, sl, r4
 8008f3c:	d00b      	beq.n	8008f56 <_svfiprintf_r+0x7a>
 8008f3e:	465b      	mov	r3, fp
 8008f40:	4622      	mov	r2, r4
 8008f42:	4629      	mov	r1, r5
 8008f44:	4638      	mov	r0, r7
 8008f46:	f7ff ff6d 	bl	8008e24 <__ssputs_r>
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	f000 80aa 	beq.w	80090a4 <_svfiprintf_r+0x1c8>
 8008f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f52:	445a      	add	r2, fp
 8008f54:	9209      	str	r2, [sp, #36]	; 0x24
 8008f56:	f89a 3000 	ldrb.w	r3, [sl]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f000 80a2 	beq.w	80090a4 <_svfiprintf_r+0x1c8>
 8008f60:	2300      	movs	r3, #0
 8008f62:	f04f 32ff 	mov.w	r2, #4294967295
 8008f66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f6a:	f10a 0a01 	add.w	sl, sl, #1
 8008f6e:	9304      	str	r3, [sp, #16]
 8008f70:	9307      	str	r3, [sp, #28]
 8008f72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f76:	931a      	str	r3, [sp, #104]	; 0x68
 8008f78:	4654      	mov	r4, sl
 8008f7a:	2205      	movs	r2, #5
 8008f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f80:	4851      	ldr	r0, [pc, #324]	; (80090c8 <_svfiprintf_r+0x1ec>)
 8008f82:	f7f7 f95d 	bl	8000240 <memchr>
 8008f86:	9a04      	ldr	r2, [sp, #16]
 8008f88:	b9d8      	cbnz	r0, 8008fc2 <_svfiprintf_r+0xe6>
 8008f8a:	06d0      	lsls	r0, r2, #27
 8008f8c:	bf44      	itt	mi
 8008f8e:	2320      	movmi	r3, #32
 8008f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f94:	0711      	lsls	r1, r2, #28
 8008f96:	bf44      	itt	mi
 8008f98:	232b      	movmi	r3, #43	; 0x2b
 8008f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8008fa4:	d015      	beq.n	8008fd2 <_svfiprintf_r+0xf6>
 8008fa6:	9a07      	ldr	r2, [sp, #28]
 8008fa8:	4654      	mov	r4, sl
 8008faa:	2000      	movs	r0, #0
 8008fac:	f04f 0c0a 	mov.w	ip, #10
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fb6:	3b30      	subs	r3, #48	; 0x30
 8008fb8:	2b09      	cmp	r3, #9
 8008fba:	d94e      	bls.n	800905a <_svfiprintf_r+0x17e>
 8008fbc:	b1b0      	cbz	r0, 8008fec <_svfiprintf_r+0x110>
 8008fbe:	9207      	str	r2, [sp, #28]
 8008fc0:	e014      	b.n	8008fec <_svfiprintf_r+0x110>
 8008fc2:	eba0 0308 	sub.w	r3, r0, r8
 8008fc6:	fa09 f303 	lsl.w	r3, r9, r3
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	9304      	str	r3, [sp, #16]
 8008fce:	46a2      	mov	sl, r4
 8008fd0:	e7d2      	b.n	8008f78 <_svfiprintf_r+0x9c>
 8008fd2:	9b03      	ldr	r3, [sp, #12]
 8008fd4:	1d19      	adds	r1, r3, #4
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	9103      	str	r1, [sp, #12]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	bfbb      	ittet	lt
 8008fde:	425b      	neglt	r3, r3
 8008fe0:	f042 0202 	orrlt.w	r2, r2, #2
 8008fe4:	9307      	strge	r3, [sp, #28]
 8008fe6:	9307      	strlt	r3, [sp, #28]
 8008fe8:	bfb8      	it	lt
 8008fea:	9204      	strlt	r2, [sp, #16]
 8008fec:	7823      	ldrb	r3, [r4, #0]
 8008fee:	2b2e      	cmp	r3, #46	; 0x2e
 8008ff0:	d10c      	bne.n	800900c <_svfiprintf_r+0x130>
 8008ff2:	7863      	ldrb	r3, [r4, #1]
 8008ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ff6:	d135      	bne.n	8009064 <_svfiprintf_r+0x188>
 8008ff8:	9b03      	ldr	r3, [sp, #12]
 8008ffa:	1d1a      	adds	r2, r3, #4
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	9203      	str	r2, [sp, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	bfb8      	it	lt
 8009004:	f04f 33ff 	movlt.w	r3, #4294967295
 8009008:	3402      	adds	r4, #2
 800900a:	9305      	str	r3, [sp, #20]
 800900c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80090d8 <_svfiprintf_r+0x1fc>
 8009010:	7821      	ldrb	r1, [r4, #0]
 8009012:	2203      	movs	r2, #3
 8009014:	4650      	mov	r0, sl
 8009016:	f7f7 f913 	bl	8000240 <memchr>
 800901a:	b140      	cbz	r0, 800902e <_svfiprintf_r+0x152>
 800901c:	2340      	movs	r3, #64	; 0x40
 800901e:	eba0 000a 	sub.w	r0, r0, sl
 8009022:	fa03 f000 	lsl.w	r0, r3, r0
 8009026:	9b04      	ldr	r3, [sp, #16]
 8009028:	4303      	orrs	r3, r0
 800902a:	3401      	adds	r4, #1
 800902c:	9304      	str	r3, [sp, #16]
 800902e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009032:	4826      	ldr	r0, [pc, #152]	; (80090cc <_svfiprintf_r+0x1f0>)
 8009034:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009038:	2206      	movs	r2, #6
 800903a:	f7f7 f901 	bl	8000240 <memchr>
 800903e:	2800      	cmp	r0, #0
 8009040:	d038      	beq.n	80090b4 <_svfiprintf_r+0x1d8>
 8009042:	4b23      	ldr	r3, [pc, #140]	; (80090d0 <_svfiprintf_r+0x1f4>)
 8009044:	bb1b      	cbnz	r3, 800908e <_svfiprintf_r+0x1b2>
 8009046:	9b03      	ldr	r3, [sp, #12]
 8009048:	3307      	adds	r3, #7
 800904a:	f023 0307 	bic.w	r3, r3, #7
 800904e:	3308      	adds	r3, #8
 8009050:	9303      	str	r3, [sp, #12]
 8009052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009054:	4433      	add	r3, r6
 8009056:	9309      	str	r3, [sp, #36]	; 0x24
 8009058:	e767      	b.n	8008f2a <_svfiprintf_r+0x4e>
 800905a:	fb0c 3202 	mla	r2, ip, r2, r3
 800905e:	460c      	mov	r4, r1
 8009060:	2001      	movs	r0, #1
 8009062:	e7a5      	b.n	8008fb0 <_svfiprintf_r+0xd4>
 8009064:	2300      	movs	r3, #0
 8009066:	3401      	adds	r4, #1
 8009068:	9305      	str	r3, [sp, #20]
 800906a:	4619      	mov	r1, r3
 800906c:	f04f 0c0a 	mov.w	ip, #10
 8009070:	4620      	mov	r0, r4
 8009072:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009076:	3a30      	subs	r2, #48	; 0x30
 8009078:	2a09      	cmp	r2, #9
 800907a:	d903      	bls.n	8009084 <_svfiprintf_r+0x1a8>
 800907c:	2b00      	cmp	r3, #0
 800907e:	d0c5      	beq.n	800900c <_svfiprintf_r+0x130>
 8009080:	9105      	str	r1, [sp, #20]
 8009082:	e7c3      	b.n	800900c <_svfiprintf_r+0x130>
 8009084:	fb0c 2101 	mla	r1, ip, r1, r2
 8009088:	4604      	mov	r4, r0
 800908a:	2301      	movs	r3, #1
 800908c:	e7f0      	b.n	8009070 <_svfiprintf_r+0x194>
 800908e:	ab03      	add	r3, sp, #12
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	462a      	mov	r2, r5
 8009094:	4b0f      	ldr	r3, [pc, #60]	; (80090d4 <_svfiprintf_r+0x1f8>)
 8009096:	a904      	add	r1, sp, #16
 8009098:	4638      	mov	r0, r7
 800909a:	f3af 8000 	nop.w
 800909e:	1c42      	adds	r2, r0, #1
 80090a0:	4606      	mov	r6, r0
 80090a2:	d1d6      	bne.n	8009052 <_svfiprintf_r+0x176>
 80090a4:	89ab      	ldrh	r3, [r5, #12]
 80090a6:	065b      	lsls	r3, r3, #25
 80090a8:	f53f af2c 	bmi.w	8008f04 <_svfiprintf_r+0x28>
 80090ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090ae:	b01d      	add	sp, #116	; 0x74
 80090b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b4:	ab03      	add	r3, sp, #12
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	462a      	mov	r2, r5
 80090ba:	4b06      	ldr	r3, [pc, #24]	; (80090d4 <_svfiprintf_r+0x1f8>)
 80090bc:	a904      	add	r1, sp, #16
 80090be:	4638      	mov	r0, r7
 80090c0:	f000 f9d4 	bl	800946c <_printf_i>
 80090c4:	e7eb      	b.n	800909e <_svfiprintf_r+0x1c2>
 80090c6:	bf00      	nop
 80090c8:	0800a529 	.word	0x0800a529
 80090cc:	0800a533 	.word	0x0800a533
 80090d0:	00000000 	.word	0x00000000
 80090d4:	08008e25 	.word	0x08008e25
 80090d8:	0800a52f 	.word	0x0800a52f

080090dc <__sfputc_r>:
 80090dc:	6893      	ldr	r3, [r2, #8]
 80090de:	3b01      	subs	r3, #1
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	b410      	push	{r4}
 80090e4:	6093      	str	r3, [r2, #8]
 80090e6:	da08      	bge.n	80090fa <__sfputc_r+0x1e>
 80090e8:	6994      	ldr	r4, [r2, #24]
 80090ea:	42a3      	cmp	r3, r4
 80090ec:	db01      	blt.n	80090f2 <__sfputc_r+0x16>
 80090ee:	290a      	cmp	r1, #10
 80090f0:	d103      	bne.n	80090fa <__sfputc_r+0x1e>
 80090f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090f6:	f000 baef 	b.w	80096d8 <__swbuf_r>
 80090fa:	6813      	ldr	r3, [r2, #0]
 80090fc:	1c58      	adds	r0, r3, #1
 80090fe:	6010      	str	r0, [r2, #0]
 8009100:	7019      	strb	r1, [r3, #0]
 8009102:	4608      	mov	r0, r1
 8009104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009108:	4770      	bx	lr

0800910a <__sfputs_r>:
 800910a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910c:	4606      	mov	r6, r0
 800910e:	460f      	mov	r7, r1
 8009110:	4614      	mov	r4, r2
 8009112:	18d5      	adds	r5, r2, r3
 8009114:	42ac      	cmp	r4, r5
 8009116:	d101      	bne.n	800911c <__sfputs_r+0x12>
 8009118:	2000      	movs	r0, #0
 800911a:	e007      	b.n	800912c <__sfputs_r+0x22>
 800911c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009120:	463a      	mov	r2, r7
 8009122:	4630      	mov	r0, r6
 8009124:	f7ff ffda 	bl	80090dc <__sfputc_r>
 8009128:	1c43      	adds	r3, r0, #1
 800912a:	d1f3      	bne.n	8009114 <__sfputs_r+0xa>
 800912c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009130 <_vfiprintf_r>:
 8009130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009134:	460d      	mov	r5, r1
 8009136:	b09d      	sub	sp, #116	; 0x74
 8009138:	4614      	mov	r4, r2
 800913a:	4698      	mov	r8, r3
 800913c:	4606      	mov	r6, r0
 800913e:	b118      	cbz	r0, 8009148 <_vfiprintf_r+0x18>
 8009140:	6983      	ldr	r3, [r0, #24]
 8009142:	b90b      	cbnz	r3, 8009148 <_vfiprintf_r+0x18>
 8009144:	f000 fcaa 	bl	8009a9c <__sinit>
 8009148:	4b89      	ldr	r3, [pc, #548]	; (8009370 <_vfiprintf_r+0x240>)
 800914a:	429d      	cmp	r5, r3
 800914c:	d11b      	bne.n	8009186 <_vfiprintf_r+0x56>
 800914e:	6875      	ldr	r5, [r6, #4]
 8009150:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009152:	07d9      	lsls	r1, r3, #31
 8009154:	d405      	bmi.n	8009162 <_vfiprintf_r+0x32>
 8009156:	89ab      	ldrh	r3, [r5, #12]
 8009158:	059a      	lsls	r2, r3, #22
 800915a:	d402      	bmi.n	8009162 <_vfiprintf_r+0x32>
 800915c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800915e:	f000 fd3b 	bl	8009bd8 <__retarget_lock_acquire_recursive>
 8009162:	89ab      	ldrh	r3, [r5, #12]
 8009164:	071b      	lsls	r3, r3, #28
 8009166:	d501      	bpl.n	800916c <_vfiprintf_r+0x3c>
 8009168:	692b      	ldr	r3, [r5, #16]
 800916a:	b9eb      	cbnz	r3, 80091a8 <_vfiprintf_r+0x78>
 800916c:	4629      	mov	r1, r5
 800916e:	4630      	mov	r0, r6
 8009170:	f000 fb04 	bl	800977c <__swsetup_r>
 8009174:	b1c0      	cbz	r0, 80091a8 <_vfiprintf_r+0x78>
 8009176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009178:	07dc      	lsls	r4, r3, #31
 800917a:	d50e      	bpl.n	800919a <_vfiprintf_r+0x6a>
 800917c:	f04f 30ff 	mov.w	r0, #4294967295
 8009180:	b01d      	add	sp, #116	; 0x74
 8009182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009186:	4b7b      	ldr	r3, [pc, #492]	; (8009374 <_vfiprintf_r+0x244>)
 8009188:	429d      	cmp	r5, r3
 800918a:	d101      	bne.n	8009190 <_vfiprintf_r+0x60>
 800918c:	68b5      	ldr	r5, [r6, #8]
 800918e:	e7df      	b.n	8009150 <_vfiprintf_r+0x20>
 8009190:	4b79      	ldr	r3, [pc, #484]	; (8009378 <_vfiprintf_r+0x248>)
 8009192:	429d      	cmp	r5, r3
 8009194:	bf08      	it	eq
 8009196:	68f5      	ldreq	r5, [r6, #12]
 8009198:	e7da      	b.n	8009150 <_vfiprintf_r+0x20>
 800919a:	89ab      	ldrh	r3, [r5, #12]
 800919c:	0598      	lsls	r0, r3, #22
 800919e:	d4ed      	bmi.n	800917c <_vfiprintf_r+0x4c>
 80091a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091a2:	f000 fd1a 	bl	8009bda <__retarget_lock_release_recursive>
 80091a6:	e7e9      	b.n	800917c <_vfiprintf_r+0x4c>
 80091a8:	2300      	movs	r3, #0
 80091aa:	9309      	str	r3, [sp, #36]	; 0x24
 80091ac:	2320      	movs	r3, #32
 80091ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80091b6:	2330      	movs	r3, #48	; 0x30
 80091b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800937c <_vfiprintf_r+0x24c>
 80091bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091c0:	f04f 0901 	mov.w	r9, #1
 80091c4:	4623      	mov	r3, r4
 80091c6:	469a      	mov	sl, r3
 80091c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091cc:	b10a      	cbz	r2, 80091d2 <_vfiprintf_r+0xa2>
 80091ce:	2a25      	cmp	r2, #37	; 0x25
 80091d0:	d1f9      	bne.n	80091c6 <_vfiprintf_r+0x96>
 80091d2:	ebba 0b04 	subs.w	fp, sl, r4
 80091d6:	d00b      	beq.n	80091f0 <_vfiprintf_r+0xc0>
 80091d8:	465b      	mov	r3, fp
 80091da:	4622      	mov	r2, r4
 80091dc:	4629      	mov	r1, r5
 80091de:	4630      	mov	r0, r6
 80091e0:	f7ff ff93 	bl	800910a <__sfputs_r>
 80091e4:	3001      	adds	r0, #1
 80091e6:	f000 80aa 	beq.w	800933e <_vfiprintf_r+0x20e>
 80091ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091ec:	445a      	add	r2, fp
 80091ee:	9209      	str	r2, [sp, #36]	; 0x24
 80091f0:	f89a 3000 	ldrb.w	r3, [sl]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 80a2 	beq.w	800933e <_vfiprintf_r+0x20e>
 80091fa:	2300      	movs	r3, #0
 80091fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009204:	f10a 0a01 	add.w	sl, sl, #1
 8009208:	9304      	str	r3, [sp, #16]
 800920a:	9307      	str	r3, [sp, #28]
 800920c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009210:	931a      	str	r3, [sp, #104]	; 0x68
 8009212:	4654      	mov	r4, sl
 8009214:	2205      	movs	r2, #5
 8009216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800921a:	4858      	ldr	r0, [pc, #352]	; (800937c <_vfiprintf_r+0x24c>)
 800921c:	f7f7 f810 	bl	8000240 <memchr>
 8009220:	9a04      	ldr	r2, [sp, #16]
 8009222:	b9d8      	cbnz	r0, 800925c <_vfiprintf_r+0x12c>
 8009224:	06d1      	lsls	r1, r2, #27
 8009226:	bf44      	itt	mi
 8009228:	2320      	movmi	r3, #32
 800922a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800922e:	0713      	lsls	r3, r2, #28
 8009230:	bf44      	itt	mi
 8009232:	232b      	movmi	r3, #43	; 0x2b
 8009234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009238:	f89a 3000 	ldrb.w	r3, [sl]
 800923c:	2b2a      	cmp	r3, #42	; 0x2a
 800923e:	d015      	beq.n	800926c <_vfiprintf_r+0x13c>
 8009240:	9a07      	ldr	r2, [sp, #28]
 8009242:	4654      	mov	r4, sl
 8009244:	2000      	movs	r0, #0
 8009246:	f04f 0c0a 	mov.w	ip, #10
 800924a:	4621      	mov	r1, r4
 800924c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009250:	3b30      	subs	r3, #48	; 0x30
 8009252:	2b09      	cmp	r3, #9
 8009254:	d94e      	bls.n	80092f4 <_vfiprintf_r+0x1c4>
 8009256:	b1b0      	cbz	r0, 8009286 <_vfiprintf_r+0x156>
 8009258:	9207      	str	r2, [sp, #28]
 800925a:	e014      	b.n	8009286 <_vfiprintf_r+0x156>
 800925c:	eba0 0308 	sub.w	r3, r0, r8
 8009260:	fa09 f303 	lsl.w	r3, r9, r3
 8009264:	4313      	orrs	r3, r2
 8009266:	9304      	str	r3, [sp, #16]
 8009268:	46a2      	mov	sl, r4
 800926a:	e7d2      	b.n	8009212 <_vfiprintf_r+0xe2>
 800926c:	9b03      	ldr	r3, [sp, #12]
 800926e:	1d19      	adds	r1, r3, #4
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	9103      	str	r1, [sp, #12]
 8009274:	2b00      	cmp	r3, #0
 8009276:	bfbb      	ittet	lt
 8009278:	425b      	neglt	r3, r3
 800927a:	f042 0202 	orrlt.w	r2, r2, #2
 800927e:	9307      	strge	r3, [sp, #28]
 8009280:	9307      	strlt	r3, [sp, #28]
 8009282:	bfb8      	it	lt
 8009284:	9204      	strlt	r2, [sp, #16]
 8009286:	7823      	ldrb	r3, [r4, #0]
 8009288:	2b2e      	cmp	r3, #46	; 0x2e
 800928a:	d10c      	bne.n	80092a6 <_vfiprintf_r+0x176>
 800928c:	7863      	ldrb	r3, [r4, #1]
 800928e:	2b2a      	cmp	r3, #42	; 0x2a
 8009290:	d135      	bne.n	80092fe <_vfiprintf_r+0x1ce>
 8009292:	9b03      	ldr	r3, [sp, #12]
 8009294:	1d1a      	adds	r2, r3, #4
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	9203      	str	r2, [sp, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	bfb8      	it	lt
 800929e:	f04f 33ff 	movlt.w	r3, #4294967295
 80092a2:	3402      	adds	r4, #2
 80092a4:	9305      	str	r3, [sp, #20]
 80092a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800938c <_vfiprintf_r+0x25c>
 80092aa:	7821      	ldrb	r1, [r4, #0]
 80092ac:	2203      	movs	r2, #3
 80092ae:	4650      	mov	r0, sl
 80092b0:	f7f6 ffc6 	bl	8000240 <memchr>
 80092b4:	b140      	cbz	r0, 80092c8 <_vfiprintf_r+0x198>
 80092b6:	2340      	movs	r3, #64	; 0x40
 80092b8:	eba0 000a 	sub.w	r0, r0, sl
 80092bc:	fa03 f000 	lsl.w	r0, r3, r0
 80092c0:	9b04      	ldr	r3, [sp, #16]
 80092c2:	4303      	orrs	r3, r0
 80092c4:	3401      	adds	r4, #1
 80092c6:	9304      	str	r3, [sp, #16]
 80092c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092cc:	482c      	ldr	r0, [pc, #176]	; (8009380 <_vfiprintf_r+0x250>)
 80092ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092d2:	2206      	movs	r2, #6
 80092d4:	f7f6 ffb4 	bl	8000240 <memchr>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d03f      	beq.n	800935c <_vfiprintf_r+0x22c>
 80092dc:	4b29      	ldr	r3, [pc, #164]	; (8009384 <_vfiprintf_r+0x254>)
 80092de:	bb1b      	cbnz	r3, 8009328 <_vfiprintf_r+0x1f8>
 80092e0:	9b03      	ldr	r3, [sp, #12]
 80092e2:	3307      	adds	r3, #7
 80092e4:	f023 0307 	bic.w	r3, r3, #7
 80092e8:	3308      	adds	r3, #8
 80092ea:	9303      	str	r3, [sp, #12]
 80092ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ee:	443b      	add	r3, r7
 80092f0:	9309      	str	r3, [sp, #36]	; 0x24
 80092f2:	e767      	b.n	80091c4 <_vfiprintf_r+0x94>
 80092f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80092f8:	460c      	mov	r4, r1
 80092fa:	2001      	movs	r0, #1
 80092fc:	e7a5      	b.n	800924a <_vfiprintf_r+0x11a>
 80092fe:	2300      	movs	r3, #0
 8009300:	3401      	adds	r4, #1
 8009302:	9305      	str	r3, [sp, #20]
 8009304:	4619      	mov	r1, r3
 8009306:	f04f 0c0a 	mov.w	ip, #10
 800930a:	4620      	mov	r0, r4
 800930c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009310:	3a30      	subs	r2, #48	; 0x30
 8009312:	2a09      	cmp	r2, #9
 8009314:	d903      	bls.n	800931e <_vfiprintf_r+0x1ee>
 8009316:	2b00      	cmp	r3, #0
 8009318:	d0c5      	beq.n	80092a6 <_vfiprintf_r+0x176>
 800931a:	9105      	str	r1, [sp, #20]
 800931c:	e7c3      	b.n	80092a6 <_vfiprintf_r+0x176>
 800931e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009322:	4604      	mov	r4, r0
 8009324:	2301      	movs	r3, #1
 8009326:	e7f0      	b.n	800930a <_vfiprintf_r+0x1da>
 8009328:	ab03      	add	r3, sp, #12
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	462a      	mov	r2, r5
 800932e:	4b16      	ldr	r3, [pc, #88]	; (8009388 <_vfiprintf_r+0x258>)
 8009330:	a904      	add	r1, sp, #16
 8009332:	4630      	mov	r0, r6
 8009334:	f3af 8000 	nop.w
 8009338:	4607      	mov	r7, r0
 800933a:	1c78      	adds	r0, r7, #1
 800933c:	d1d6      	bne.n	80092ec <_vfiprintf_r+0x1bc>
 800933e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009340:	07d9      	lsls	r1, r3, #31
 8009342:	d405      	bmi.n	8009350 <_vfiprintf_r+0x220>
 8009344:	89ab      	ldrh	r3, [r5, #12]
 8009346:	059a      	lsls	r2, r3, #22
 8009348:	d402      	bmi.n	8009350 <_vfiprintf_r+0x220>
 800934a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800934c:	f000 fc45 	bl	8009bda <__retarget_lock_release_recursive>
 8009350:	89ab      	ldrh	r3, [r5, #12]
 8009352:	065b      	lsls	r3, r3, #25
 8009354:	f53f af12 	bmi.w	800917c <_vfiprintf_r+0x4c>
 8009358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800935a:	e711      	b.n	8009180 <_vfiprintf_r+0x50>
 800935c:	ab03      	add	r3, sp, #12
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	462a      	mov	r2, r5
 8009362:	4b09      	ldr	r3, [pc, #36]	; (8009388 <_vfiprintf_r+0x258>)
 8009364:	a904      	add	r1, sp, #16
 8009366:	4630      	mov	r0, r6
 8009368:	f000 f880 	bl	800946c <_printf_i>
 800936c:	e7e4      	b.n	8009338 <_vfiprintf_r+0x208>
 800936e:	bf00      	nop
 8009370:	0800a57c 	.word	0x0800a57c
 8009374:	0800a59c 	.word	0x0800a59c
 8009378:	0800a55c 	.word	0x0800a55c
 800937c:	0800a529 	.word	0x0800a529
 8009380:	0800a533 	.word	0x0800a533
 8009384:	00000000 	.word	0x00000000
 8009388:	0800910b 	.word	0x0800910b
 800938c:	0800a52f 	.word	0x0800a52f

08009390 <_printf_common>:
 8009390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009394:	4616      	mov	r6, r2
 8009396:	4699      	mov	r9, r3
 8009398:	688a      	ldr	r2, [r1, #8]
 800939a:	690b      	ldr	r3, [r1, #16]
 800939c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093a0:	4293      	cmp	r3, r2
 80093a2:	bfb8      	it	lt
 80093a4:	4613      	movlt	r3, r2
 80093a6:	6033      	str	r3, [r6, #0]
 80093a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093ac:	4607      	mov	r7, r0
 80093ae:	460c      	mov	r4, r1
 80093b0:	b10a      	cbz	r2, 80093b6 <_printf_common+0x26>
 80093b2:	3301      	adds	r3, #1
 80093b4:	6033      	str	r3, [r6, #0]
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	0699      	lsls	r1, r3, #26
 80093ba:	bf42      	ittt	mi
 80093bc:	6833      	ldrmi	r3, [r6, #0]
 80093be:	3302      	addmi	r3, #2
 80093c0:	6033      	strmi	r3, [r6, #0]
 80093c2:	6825      	ldr	r5, [r4, #0]
 80093c4:	f015 0506 	ands.w	r5, r5, #6
 80093c8:	d106      	bne.n	80093d8 <_printf_common+0x48>
 80093ca:	f104 0a19 	add.w	sl, r4, #25
 80093ce:	68e3      	ldr	r3, [r4, #12]
 80093d0:	6832      	ldr	r2, [r6, #0]
 80093d2:	1a9b      	subs	r3, r3, r2
 80093d4:	42ab      	cmp	r3, r5
 80093d6:	dc26      	bgt.n	8009426 <_printf_common+0x96>
 80093d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093dc:	1e13      	subs	r3, r2, #0
 80093de:	6822      	ldr	r2, [r4, #0]
 80093e0:	bf18      	it	ne
 80093e2:	2301      	movne	r3, #1
 80093e4:	0692      	lsls	r2, r2, #26
 80093e6:	d42b      	bmi.n	8009440 <_printf_common+0xb0>
 80093e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093ec:	4649      	mov	r1, r9
 80093ee:	4638      	mov	r0, r7
 80093f0:	47c0      	blx	r8
 80093f2:	3001      	adds	r0, #1
 80093f4:	d01e      	beq.n	8009434 <_printf_common+0xa4>
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	68e5      	ldr	r5, [r4, #12]
 80093fa:	6832      	ldr	r2, [r6, #0]
 80093fc:	f003 0306 	and.w	r3, r3, #6
 8009400:	2b04      	cmp	r3, #4
 8009402:	bf08      	it	eq
 8009404:	1aad      	subeq	r5, r5, r2
 8009406:	68a3      	ldr	r3, [r4, #8]
 8009408:	6922      	ldr	r2, [r4, #16]
 800940a:	bf0c      	ite	eq
 800940c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009410:	2500      	movne	r5, #0
 8009412:	4293      	cmp	r3, r2
 8009414:	bfc4      	itt	gt
 8009416:	1a9b      	subgt	r3, r3, r2
 8009418:	18ed      	addgt	r5, r5, r3
 800941a:	2600      	movs	r6, #0
 800941c:	341a      	adds	r4, #26
 800941e:	42b5      	cmp	r5, r6
 8009420:	d11a      	bne.n	8009458 <_printf_common+0xc8>
 8009422:	2000      	movs	r0, #0
 8009424:	e008      	b.n	8009438 <_printf_common+0xa8>
 8009426:	2301      	movs	r3, #1
 8009428:	4652      	mov	r2, sl
 800942a:	4649      	mov	r1, r9
 800942c:	4638      	mov	r0, r7
 800942e:	47c0      	blx	r8
 8009430:	3001      	adds	r0, #1
 8009432:	d103      	bne.n	800943c <_printf_common+0xac>
 8009434:	f04f 30ff 	mov.w	r0, #4294967295
 8009438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943c:	3501      	adds	r5, #1
 800943e:	e7c6      	b.n	80093ce <_printf_common+0x3e>
 8009440:	18e1      	adds	r1, r4, r3
 8009442:	1c5a      	adds	r2, r3, #1
 8009444:	2030      	movs	r0, #48	; 0x30
 8009446:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800944a:	4422      	add	r2, r4
 800944c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009450:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009454:	3302      	adds	r3, #2
 8009456:	e7c7      	b.n	80093e8 <_printf_common+0x58>
 8009458:	2301      	movs	r3, #1
 800945a:	4622      	mov	r2, r4
 800945c:	4649      	mov	r1, r9
 800945e:	4638      	mov	r0, r7
 8009460:	47c0      	blx	r8
 8009462:	3001      	adds	r0, #1
 8009464:	d0e6      	beq.n	8009434 <_printf_common+0xa4>
 8009466:	3601      	adds	r6, #1
 8009468:	e7d9      	b.n	800941e <_printf_common+0x8e>
	...

0800946c <_printf_i>:
 800946c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009470:	7e0f      	ldrb	r7, [r1, #24]
 8009472:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009474:	2f78      	cmp	r7, #120	; 0x78
 8009476:	4691      	mov	r9, r2
 8009478:	4680      	mov	r8, r0
 800947a:	460c      	mov	r4, r1
 800947c:	469a      	mov	sl, r3
 800947e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009482:	d807      	bhi.n	8009494 <_printf_i+0x28>
 8009484:	2f62      	cmp	r7, #98	; 0x62
 8009486:	d80a      	bhi.n	800949e <_printf_i+0x32>
 8009488:	2f00      	cmp	r7, #0
 800948a:	f000 80d8 	beq.w	800963e <_printf_i+0x1d2>
 800948e:	2f58      	cmp	r7, #88	; 0x58
 8009490:	f000 80a3 	beq.w	80095da <_printf_i+0x16e>
 8009494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800949c:	e03a      	b.n	8009514 <_printf_i+0xa8>
 800949e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094a2:	2b15      	cmp	r3, #21
 80094a4:	d8f6      	bhi.n	8009494 <_printf_i+0x28>
 80094a6:	a101      	add	r1, pc, #4	; (adr r1, 80094ac <_printf_i+0x40>)
 80094a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094ac:	08009505 	.word	0x08009505
 80094b0:	08009519 	.word	0x08009519
 80094b4:	08009495 	.word	0x08009495
 80094b8:	08009495 	.word	0x08009495
 80094bc:	08009495 	.word	0x08009495
 80094c0:	08009495 	.word	0x08009495
 80094c4:	08009519 	.word	0x08009519
 80094c8:	08009495 	.word	0x08009495
 80094cc:	08009495 	.word	0x08009495
 80094d0:	08009495 	.word	0x08009495
 80094d4:	08009495 	.word	0x08009495
 80094d8:	08009625 	.word	0x08009625
 80094dc:	08009549 	.word	0x08009549
 80094e0:	08009607 	.word	0x08009607
 80094e4:	08009495 	.word	0x08009495
 80094e8:	08009495 	.word	0x08009495
 80094ec:	08009647 	.word	0x08009647
 80094f0:	08009495 	.word	0x08009495
 80094f4:	08009549 	.word	0x08009549
 80094f8:	08009495 	.word	0x08009495
 80094fc:	08009495 	.word	0x08009495
 8009500:	0800960f 	.word	0x0800960f
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	1d1a      	adds	r2, r3, #4
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	602a      	str	r2, [r5, #0]
 800950c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009514:	2301      	movs	r3, #1
 8009516:	e0a3      	b.n	8009660 <_printf_i+0x1f4>
 8009518:	6820      	ldr	r0, [r4, #0]
 800951a:	6829      	ldr	r1, [r5, #0]
 800951c:	0606      	lsls	r6, r0, #24
 800951e:	f101 0304 	add.w	r3, r1, #4
 8009522:	d50a      	bpl.n	800953a <_printf_i+0xce>
 8009524:	680e      	ldr	r6, [r1, #0]
 8009526:	602b      	str	r3, [r5, #0]
 8009528:	2e00      	cmp	r6, #0
 800952a:	da03      	bge.n	8009534 <_printf_i+0xc8>
 800952c:	232d      	movs	r3, #45	; 0x2d
 800952e:	4276      	negs	r6, r6
 8009530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009534:	485e      	ldr	r0, [pc, #376]	; (80096b0 <_printf_i+0x244>)
 8009536:	230a      	movs	r3, #10
 8009538:	e019      	b.n	800956e <_printf_i+0x102>
 800953a:	680e      	ldr	r6, [r1, #0]
 800953c:	602b      	str	r3, [r5, #0]
 800953e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009542:	bf18      	it	ne
 8009544:	b236      	sxthne	r6, r6
 8009546:	e7ef      	b.n	8009528 <_printf_i+0xbc>
 8009548:	682b      	ldr	r3, [r5, #0]
 800954a:	6820      	ldr	r0, [r4, #0]
 800954c:	1d19      	adds	r1, r3, #4
 800954e:	6029      	str	r1, [r5, #0]
 8009550:	0601      	lsls	r1, r0, #24
 8009552:	d501      	bpl.n	8009558 <_printf_i+0xec>
 8009554:	681e      	ldr	r6, [r3, #0]
 8009556:	e002      	b.n	800955e <_printf_i+0xf2>
 8009558:	0646      	lsls	r6, r0, #25
 800955a:	d5fb      	bpl.n	8009554 <_printf_i+0xe8>
 800955c:	881e      	ldrh	r6, [r3, #0]
 800955e:	4854      	ldr	r0, [pc, #336]	; (80096b0 <_printf_i+0x244>)
 8009560:	2f6f      	cmp	r7, #111	; 0x6f
 8009562:	bf0c      	ite	eq
 8009564:	2308      	moveq	r3, #8
 8009566:	230a      	movne	r3, #10
 8009568:	2100      	movs	r1, #0
 800956a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800956e:	6865      	ldr	r5, [r4, #4]
 8009570:	60a5      	str	r5, [r4, #8]
 8009572:	2d00      	cmp	r5, #0
 8009574:	bfa2      	ittt	ge
 8009576:	6821      	ldrge	r1, [r4, #0]
 8009578:	f021 0104 	bicge.w	r1, r1, #4
 800957c:	6021      	strge	r1, [r4, #0]
 800957e:	b90e      	cbnz	r6, 8009584 <_printf_i+0x118>
 8009580:	2d00      	cmp	r5, #0
 8009582:	d04d      	beq.n	8009620 <_printf_i+0x1b4>
 8009584:	4615      	mov	r5, r2
 8009586:	fbb6 f1f3 	udiv	r1, r6, r3
 800958a:	fb03 6711 	mls	r7, r3, r1, r6
 800958e:	5dc7      	ldrb	r7, [r0, r7]
 8009590:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009594:	4637      	mov	r7, r6
 8009596:	42bb      	cmp	r3, r7
 8009598:	460e      	mov	r6, r1
 800959a:	d9f4      	bls.n	8009586 <_printf_i+0x11a>
 800959c:	2b08      	cmp	r3, #8
 800959e:	d10b      	bne.n	80095b8 <_printf_i+0x14c>
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	07de      	lsls	r6, r3, #31
 80095a4:	d508      	bpl.n	80095b8 <_printf_i+0x14c>
 80095a6:	6923      	ldr	r3, [r4, #16]
 80095a8:	6861      	ldr	r1, [r4, #4]
 80095aa:	4299      	cmp	r1, r3
 80095ac:	bfde      	ittt	le
 80095ae:	2330      	movle	r3, #48	; 0x30
 80095b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80095b8:	1b52      	subs	r2, r2, r5
 80095ba:	6122      	str	r2, [r4, #16]
 80095bc:	f8cd a000 	str.w	sl, [sp]
 80095c0:	464b      	mov	r3, r9
 80095c2:	aa03      	add	r2, sp, #12
 80095c4:	4621      	mov	r1, r4
 80095c6:	4640      	mov	r0, r8
 80095c8:	f7ff fee2 	bl	8009390 <_printf_common>
 80095cc:	3001      	adds	r0, #1
 80095ce:	d14c      	bne.n	800966a <_printf_i+0x1fe>
 80095d0:	f04f 30ff 	mov.w	r0, #4294967295
 80095d4:	b004      	add	sp, #16
 80095d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095da:	4835      	ldr	r0, [pc, #212]	; (80096b0 <_printf_i+0x244>)
 80095dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80095e0:	6829      	ldr	r1, [r5, #0]
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80095e8:	6029      	str	r1, [r5, #0]
 80095ea:	061d      	lsls	r5, r3, #24
 80095ec:	d514      	bpl.n	8009618 <_printf_i+0x1ac>
 80095ee:	07df      	lsls	r7, r3, #31
 80095f0:	bf44      	itt	mi
 80095f2:	f043 0320 	orrmi.w	r3, r3, #32
 80095f6:	6023      	strmi	r3, [r4, #0]
 80095f8:	b91e      	cbnz	r6, 8009602 <_printf_i+0x196>
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	f023 0320 	bic.w	r3, r3, #32
 8009600:	6023      	str	r3, [r4, #0]
 8009602:	2310      	movs	r3, #16
 8009604:	e7b0      	b.n	8009568 <_printf_i+0xfc>
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	f043 0320 	orr.w	r3, r3, #32
 800960c:	6023      	str	r3, [r4, #0]
 800960e:	2378      	movs	r3, #120	; 0x78
 8009610:	4828      	ldr	r0, [pc, #160]	; (80096b4 <_printf_i+0x248>)
 8009612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009616:	e7e3      	b.n	80095e0 <_printf_i+0x174>
 8009618:	0659      	lsls	r1, r3, #25
 800961a:	bf48      	it	mi
 800961c:	b2b6      	uxthmi	r6, r6
 800961e:	e7e6      	b.n	80095ee <_printf_i+0x182>
 8009620:	4615      	mov	r5, r2
 8009622:	e7bb      	b.n	800959c <_printf_i+0x130>
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	6826      	ldr	r6, [r4, #0]
 8009628:	6961      	ldr	r1, [r4, #20]
 800962a:	1d18      	adds	r0, r3, #4
 800962c:	6028      	str	r0, [r5, #0]
 800962e:	0635      	lsls	r5, r6, #24
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	d501      	bpl.n	8009638 <_printf_i+0x1cc>
 8009634:	6019      	str	r1, [r3, #0]
 8009636:	e002      	b.n	800963e <_printf_i+0x1d2>
 8009638:	0670      	lsls	r0, r6, #25
 800963a:	d5fb      	bpl.n	8009634 <_printf_i+0x1c8>
 800963c:	8019      	strh	r1, [r3, #0]
 800963e:	2300      	movs	r3, #0
 8009640:	6123      	str	r3, [r4, #16]
 8009642:	4615      	mov	r5, r2
 8009644:	e7ba      	b.n	80095bc <_printf_i+0x150>
 8009646:	682b      	ldr	r3, [r5, #0]
 8009648:	1d1a      	adds	r2, r3, #4
 800964a:	602a      	str	r2, [r5, #0]
 800964c:	681d      	ldr	r5, [r3, #0]
 800964e:	6862      	ldr	r2, [r4, #4]
 8009650:	2100      	movs	r1, #0
 8009652:	4628      	mov	r0, r5
 8009654:	f7f6 fdf4 	bl	8000240 <memchr>
 8009658:	b108      	cbz	r0, 800965e <_printf_i+0x1f2>
 800965a:	1b40      	subs	r0, r0, r5
 800965c:	6060      	str	r0, [r4, #4]
 800965e:	6863      	ldr	r3, [r4, #4]
 8009660:	6123      	str	r3, [r4, #16]
 8009662:	2300      	movs	r3, #0
 8009664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009668:	e7a8      	b.n	80095bc <_printf_i+0x150>
 800966a:	6923      	ldr	r3, [r4, #16]
 800966c:	462a      	mov	r2, r5
 800966e:	4649      	mov	r1, r9
 8009670:	4640      	mov	r0, r8
 8009672:	47d0      	blx	sl
 8009674:	3001      	adds	r0, #1
 8009676:	d0ab      	beq.n	80095d0 <_printf_i+0x164>
 8009678:	6823      	ldr	r3, [r4, #0]
 800967a:	079b      	lsls	r3, r3, #30
 800967c:	d413      	bmi.n	80096a6 <_printf_i+0x23a>
 800967e:	68e0      	ldr	r0, [r4, #12]
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	4298      	cmp	r0, r3
 8009684:	bfb8      	it	lt
 8009686:	4618      	movlt	r0, r3
 8009688:	e7a4      	b.n	80095d4 <_printf_i+0x168>
 800968a:	2301      	movs	r3, #1
 800968c:	4632      	mov	r2, r6
 800968e:	4649      	mov	r1, r9
 8009690:	4640      	mov	r0, r8
 8009692:	47d0      	blx	sl
 8009694:	3001      	adds	r0, #1
 8009696:	d09b      	beq.n	80095d0 <_printf_i+0x164>
 8009698:	3501      	adds	r5, #1
 800969a:	68e3      	ldr	r3, [r4, #12]
 800969c:	9903      	ldr	r1, [sp, #12]
 800969e:	1a5b      	subs	r3, r3, r1
 80096a0:	42ab      	cmp	r3, r5
 80096a2:	dcf2      	bgt.n	800968a <_printf_i+0x21e>
 80096a4:	e7eb      	b.n	800967e <_printf_i+0x212>
 80096a6:	2500      	movs	r5, #0
 80096a8:	f104 0619 	add.w	r6, r4, #25
 80096ac:	e7f5      	b.n	800969a <_printf_i+0x22e>
 80096ae:	bf00      	nop
 80096b0:	0800a53a 	.word	0x0800a53a
 80096b4:	0800a54b 	.word	0x0800a54b

080096b8 <_sbrk_r>:
 80096b8:	b538      	push	{r3, r4, r5, lr}
 80096ba:	4d06      	ldr	r5, [pc, #24]	; (80096d4 <_sbrk_r+0x1c>)
 80096bc:	2300      	movs	r3, #0
 80096be:	4604      	mov	r4, r0
 80096c0:	4608      	mov	r0, r1
 80096c2:	602b      	str	r3, [r5, #0]
 80096c4:	f7f7 fd5a 	bl	800117c <_sbrk>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	d102      	bne.n	80096d2 <_sbrk_r+0x1a>
 80096cc:	682b      	ldr	r3, [r5, #0]
 80096ce:	b103      	cbz	r3, 80096d2 <_sbrk_r+0x1a>
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	bd38      	pop	{r3, r4, r5, pc}
 80096d4:	200002e4 	.word	0x200002e4

080096d8 <__swbuf_r>:
 80096d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096da:	460e      	mov	r6, r1
 80096dc:	4614      	mov	r4, r2
 80096de:	4605      	mov	r5, r0
 80096e0:	b118      	cbz	r0, 80096ea <__swbuf_r+0x12>
 80096e2:	6983      	ldr	r3, [r0, #24]
 80096e4:	b90b      	cbnz	r3, 80096ea <__swbuf_r+0x12>
 80096e6:	f000 f9d9 	bl	8009a9c <__sinit>
 80096ea:	4b21      	ldr	r3, [pc, #132]	; (8009770 <__swbuf_r+0x98>)
 80096ec:	429c      	cmp	r4, r3
 80096ee:	d12b      	bne.n	8009748 <__swbuf_r+0x70>
 80096f0:	686c      	ldr	r4, [r5, #4]
 80096f2:	69a3      	ldr	r3, [r4, #24]
 80096f4:	60a3      	str	r3, [r4, #8]
 80096f6:	89a3      	ldrh	r3, [r4, #12]
 80096f8:	071a      	lsls	r2, r3, #28
 80096fa:	d52f      	bpl.n	800975c <__swbuf_r+0x84>
 80096fc:	6923      	ldr	r3, [r4, #16]
 80096fe:	b36b      	cbz	r3, 800975c <__swbuf_r+0x84>
 8009700:	6923      	ldr	r3, [r4, #16]
 8009702:	6820      	ldr	r0, [r4, #0]
 8009704:	1ac0      	subs	r0, r0, r3
 8009706:	6963      	ldr	r3, [r4, #20]
 8009708:	b2f6      	uxtb	r6, r6
 800970a:	4283      	cmp	r3, r0
 800970c:	4637      	mov	r7, r6
 800970e:	dc04      	bgt.n	800971a <__swbuf_r+0x42>
 8009710:	4621      	mov	r1, r4
 8009712:	4628      	mov	r0, r5
 8009714:	f000 f92e 	bl	8009974 <_fflush_r>
 8009718:	bb30      	cbnz	r0, 8009768 <__swbuf_r+0x90>
 800971a:	68a3      	ldr	r3, [r4, #8]
 800971c:	3b01      	subs	r3, #1
 800971e:	60a3      	str	r3, [r4, #8]
 8009720:	6823      	ldr	r3, [r4, #0]
 8009722:	1c5a      	adds	r2, r3, #1
 8009724:	6022      	str	r2, [r4, #0]
 8009726:	701e      	strb	r6, [r3, #0]
 8009728:	6963      	ldr	r3, [r4, #20]
 800972a:	3001      	adds	r0, #1
 800972c:	4283      	cmp	r3, r0
 800972e:	d004      	beq.n	800973a <__swbuf_r+0x62>
 8009730:	89a3      	ldrh	r3, [r4, #12]
 8009732:	07db      	lsls	r3, r3, #31
 8009734:	d506      	bpl.n	8009744 <__swbuf_r+0x6c>
 8009736:	2e0a      	cmp	r6, #10
 8009738:	d104      	bne.n	8009744 <__swbuf_r+0x6c>
 800973a:	4621      	mov	r1, r4
 800973c:	4628      	mov	r0, r5
 800973e:	f000 f919 	bl	8009974 <_fflush_r>
 8009742:	b988      	cbnz	r0, 8009768 <__swbuf_r+0x90>
 8009744:	4638      	mov	r0, r7
 8009746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009748:	4b0a      	ldr	r3, [pc, #40]	; (8009774 <__swbuf_r+0x9c>)
 800974a:	429c      	cmp	r4, r3
 800974c:	d101      	bne.n	8009752 <__swbuf_r+0x7a>
 800974e:	68ac      	ldr	r4, [r5, #8]
 8009750:	e7cf      	b.n	80096f2 <__swbuf_r+0x1a>
 8009752:	4b09      	ldr	r3, [pc, #36]	; (8009778 <__swbuf_r+0xa0>)
 8009754:	429c      	cmp	r4, r3
 8009756:	bf08      	it	eq
 8009758:	68ec      	ldreq	r4, [r5, #12]
 800975a:	e7ca      	b.n	80096f2 <__swbuf_r+0x1a>
 800975c:	4621      	mov	r1, r4
 800975e:	4628      	mov	r0, r5
 8009760:	f000 f80c 	bl	800977c <__swsetup_r>
 8009764:	2800      	cmp	r0, #0
 8009766:	d0cb      	beq.n	8009700 <__swbuf_r+0x28>
 8009768:	f04f 37ff 	mov.w	r7, #4294967295
 800976c:	e7ea      	b.n	8009744 <__swbuf_r+0x6c>
 800976e:	bf00      	nop
 8009770:	0800a57c 	.word	0x0800a57c
 8009774:	0800a59c 	.word	0x0800a59c
 8009778:	0800a55c 	.word	0x0800a55c

0800977c <__swsetup_r>:
 800977c:	4b32      	ldr	r3, [pc, #200]	; (8009848 <__swsetup_r+0xcc>)
 800977e:	b570      	push	{r4, r5, r6, lr}
 8009780:	681d      	ldr	r5, [r3, #0]
 8009782:	4606      	mov	r6, r0
 8009784:	460c      	mov	r4, r1
 8009786:	b125      	cbz	r5, 8009792 <__swsetup_r+0x16>
 8009788:	69ab      	ldr	r3, [r5, #24]
 800978a:	b913      	cbnz	r3, 8009792 <__swsetup_r+0x16>
 800978c:	4628      	mov	r0, r5
 800978e:	f000 f985 	bl	8009a9c <__sinit>
 8009792:	4b2e      	ldr	r3, [pc, #184]	; (800984c <__swsetup_r+0xd0>)
 8009794:	429c      	cmp	r4, r3
 8009796:	d10f      	bne.n	80097b8 <__swsetup_r+0x3c>
 8009798:	686c      	ldr	r4, [r5, #4]
 800979a:	89a3      	ldrh	r3, [r4, #12]
 800979c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097a0:	0719      	lsls	r1, r3, #28
 80097a2:	d42c      	bmi.n	80097fe <__swsetup_r+0x82>
 80097a4:	06dd      	lsls	r5, r3, #27
 80097a6:	d411      	bmi.n	80097cc <__swsetup_r+0x50>
 80097a8:	2309      	movs	r3, #9
 80097aa:	6033      	str	r3, [r6, #0]
 80097ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097b0:	81a3      	strh	r3, [r4, #12]
 80097b2:	f04f 30ff 	mov.w	r0, #4294967295
 80097b6:	e03e      	b.n	8009836 <__swsetup_r+0xba>
 80097b8:	4b25      	ldr	r3, [pc, #148]	; (8009850 <__swsetup_r+0xd4>)
 80097ba:	429c      	cmp	r4, r3
 80097bc:	d101      	bne.n	80097c2 <__swsetup_r+0x46>
 80097be:	68ac      	ldr	r4, [r5, #8]
 80097c0:	e7eb      	b.n	800979a <__swsetup_r+0x1e>
 80097c2:	4b24      	ldr	r3, [pc, #144]	; (8009854 <__swsetup_r+0xd8>)
 80097c4:	429c      	cmp	r4, r3
 80097c6:	bf08      	it	eq
 80097c8:	68ec      	ldreq	r4, [r5, #12]
 80097ca:	e7e6      	b.n	800979a <__swsetup_r+0x1e>
 80097cc:	0758      	lsls	r0, r3, #29
 80097ce:	d512      	bpl.n	80097f6 <__swsetup_r+0x7a>
 80097d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097d2:	b141      	cbz	r1, 80097e6 <__swsetup_r+0x6a>
 80097d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097d8:	4299      	cmp	r1, r3
 80097da:	d002      	beq.n	80097e2 <__swsetup_r+0x66>
 80097dc:	4630      	mov	r0, r6
 80097de:	f7ff fa41 	bl	8008c64 <_free_r>
 80097e2:	2300      	movs	r3, #0
 80097e4:	6363      	str	r3, [r4, #52]	; 0x34
 80097e6:	89a3      	ldrh	r3, [r4, #12]
 80097e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097ec:	81a3      	strh	r3, [r4, #12]
 80097ee:	2300      	movs	r3, #0
 80097f0:	6063      	str	r3, [r4, #4]
 80097f2:	6923      	ldr	r3, [r4, #16]
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	89a3      	ldrh	r3, [r4, #12]
 80097f8:	f043 0308 	orr.w	r3, r3, #8
 80097fc:	81a3      	strh	r3, [r4, #12]
 80097fe:	6923      	ldr	r3, [r4, #16]
 8009800:	b94b      	cbnz	r3, 8009816 <__swsetup_r+0x9a>
 8009802:	89a3      	ldrh	r3, [r4, #12]
 8009804:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800980c:	d003      	beq.n	8009816 <__swsetup_r+0x9a>
 800980e:	4621      	mov	r1, r4
 8009810:	4630      	mov	r0, r6
 8009812:	f000 fa09 	bl	8009c28 <__smakebuf_r>
 8009816:	89a0      	ldrh	r0, [r4, #12]
 8009818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800981c:	f010 0301 	ands.w	r3, r0, #1
 8009820:	d00a      	beq.n	8009838 <__swsetup_r+0xbc>
 8009822:	2300      	movs	r3, #0
 8009824:	60a3      	str	r3, [r4, #8]
 8009826:	6963      	ldr	r3, [r4, #20]
 8009828:	425b      	negs	r3, r3
 800982a:	61a3      	str	r3, [r4, #24]
 800982c:	6923      	ldr	r3, [r4, #16]
 800982e:	b943      	cbnz	r3, 8009842 <__swsetup_r+0xc6>
 8009830:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009834:	d1ba      	bne.n	80097ac <__swsetup_r+0x30>
 8009836:	bd70      	pop	{r4, r5, r6, pc}
 8009838:	0781      	lsls	r1, r0, #30
 800983a:	bf58      	it	pl
 800983c:	6963      	ldrpl	r3, [r4, #20]
 800983e:	60a3      	str	r3, [r4, #8]
 8009840:	e7f4      	b.n	800982c <__swsetup_r+0xb0>
 8009842:	2000      	movs	r0, #0
 8009844:	e7f7      	b.n	8009836 <__swsetup_r+0xba>
 8009846:	bf00      	nop
 8009848:	20000010 	.word	0x20000010
 800984c:	0800a57c 	.word	0x0800a57c
 8009850:	0800a59c 	.word	0x0800a59c
 8009854:	0800a55c 	.word	0x0800a55c

08009858 <abort>:
 8009858:	b508      	push	{r3, lr}
 800985a:	2006      	movs	r0, #6
 800985c:	f000 fab0 	bl	8009dc0 <raise>
 8009860:	2001      	movs	r0, #1
 8009862:	f7f7 fc13 	bl	800108c <_exit>
	...

08009868 <__sflush_r>:
 8009868:	898a      	ldrh	r2, [r1, #12]
 800986a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800986e:	4605      	mov	r5, r0
 8009870:	0710      	lsls	r0, r2, #28
 8009872:	460c      	mov	r4, r1
 8009874:	d458      	bmi.n	8009928 <__sflush_r+0xc0>
 8009876:	684b      	ldr	r3, [r1, #4]
 8009878:	2b00      	cmp	r3, #0
 800987a:	dc05      	bgt.n	8009888 <__sflush_r+0x20>
 800987c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800987e:	2b00      	cmp	r3, #0
 8009880:	dc02      	bgt.n	8009888 <__sflush_r+0x20>
 8009882:	2000      	movs	r0, #0
 8009884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009888:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800988a:	2e00      	cmp	r6, #0
 800988c:	d0f9      	beq.n	8009882 <__sflush_r+0x1a>
 800988e:	2300      	movs	r3, #0
 8009890:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009894:	682f      	ldr	r7, [r5, #0]
 8009896:	602b      	str	r3, [r5, #0]
 8009898:	d032      	beq.n	8009900 <__sflush_r+0x98>
 800989a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	075a      	lsls	r2, r3, #29
 80098a0:	d505      	bpl.n	80098ae <__sflush_r+0x46>
 80098a2:	6863      	ldr	r3, [r4, #4]
 80098a4:	1ac0      	subs	r0, r0, r3
 80098a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098a8:	b10b      	cbz	r3, 80098ae <__sflush_r+0x46>
 80098aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098ac:	1ac0      	subs	r0, r0, r3
 80098ae:	2300      	movs	r3, #0
 80098b0:	4602      	mov	r2, r0
 80098b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098b4:	6a21      	ldr	r1, [r4, #32]
 80098b6:	4628      	mov	r0, r5
 80098b8:	47b0      	blx	r6
 80098ba:	1c43      	adds	r3, r0, #1
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	d106      	bne.n	80098ce <__sflush_r+0x66>
 80098c0:	6829      	ldr	r1, [r5, #0]
 80098c2:	291d      	cmp	r1, #29
 80098c4:	d82c      	bhi.n	8009920 <__sflush_r+0xb8>
 80098c6:	4a2a      	ldr	r2, [pc, #168]	; (8009970 <__sflush_r+0x108>)
 80098c8:	40ca      	lsrs	r2, r1
 80098ca:	07d6      	lsls	r6, r2, #31
 80098cc:	d528      	bpl.n	8009920 <__sflush_r+0xb8>
 80098ce:	2200      	movs	r2, #0
 80098d0:	6062      	str	r2, [r4, #4]
 80098d2:	04d9      	lsls	r1, r3, #19
 80098d4:	6922      	ldr	r2, [r4, #16]
 80098d6:	6022      	str	r2, [r4, #0]
 80098d8:	d504      	bpl.n	80098e4 <__sflush_r+0x7c>
 80098da:	1c42      	adds	r2, r0, #1
 80098dc:	d101      	bne.n	80098e2 <__sflush_r+0x7a>
 80098de:	682b      	ldr	r3, [r5, #0]
 80098e0:	b903      	cbnz	r3, 80098e4 <__sflush_r+0x7c>
 80098e2:	6560      	str	r0, [r4, #84]	; 0x54
 80098e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098e6:	602f      	str	r7, [r5, #0]
 80098e8:	2900      	cmp	r1, #0
 80098ea:	d0ca      	beq.n	8009882 <__sflush_r+0x1a>
 80098ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098f0:	4299      	cmp	r1, r3
 80098f2:	d002      	beq.n	80098fa <__sflush_r+0x92>
 80098f4:	4628      	mov	r0, r5
 80098f6:	f7ff f9b5 	bl	8008c64 <_free_r>
 80098fa:	2000      	movs	r0, #0
 80098fc:	6360      	str	r0, [r4, #52]	; 0x34
 80098fe:	e7c1      	b.n	8009884 <__sflush_r+0x1c>
 8009900:	6a21      	ldr	r1, [r4, #32]
 8009902:	2301      	movs	r3, #1
 8009904:	4628      	mov	r0, r5
 8009906:	47b0      	blx	r6
 8009908:	1c41      	adds	r1, r0, #1
 800990a:	d1c7      	bne.n	800989c <__sflush_r+0x34>
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d0c4      	beq.n	800989c <__sflush_r+0x34>
 8009912:	2b1d      	cmp	r3, #29
 8009914:	d001      	beq.n	800991a <__sflush_r+0xb2>
 8009916:	2b16      	cmp	r3, #22
 8009918:	d101      	bne.n	800991e <__sflush_r+0xb6>
 800991a:	602f      	str	r7, [r5, #0]
 800991c:	e7b1      	b.n	8009882 <__sflush_r+0x1a>
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009924:	81a3      	strh	r3, [r4, #12]
 8009926:	e7ad      	b.n	8009884 <__sflush_r+0x1c>
 8009928:	690f      	ldr	r7, [r1, #16]
 800992a:	2f00      	cmp	r7, #0
 800992c:	d0a9      	beq.n	8009882 <__sflush_r+0x1a>
 800992e:	0793      	lsls	r3, r2, #30
 8009930:	680e      	ldr	r6, [r1, #0]
 8009932:	bf08      	it	eq
 8009934:	694b      	ldreq	r3, [r1, #20]
 8009936:	600f      	str	r7, [r1, #0]
 8009938:	bf18      	it	ne
 800993a:	2300      	movne	r3, #0
 800993c:	eba6 0807 	sub.w	r8, r6, r7
 8009940:	608b      	str	r3, [r1, #8]
 8009942:	f1b8 0f00 	cmp.w	r8, #0
 8009946:	dd9c      	ble.n	8009882 <__sflush_r+0x1a>
 8009948:	6a21      	ldr	r1, [r4, #32]
 800994a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800994c:	4643      	mov	r3, r8
 800994e:	463a      	mov	r2, r7
 8009950:	4628      	mov	r0, r5
 8009952:	47b0      	blx	r6
 8009954:	2800      	cmp	r0, #0
 8009956:	dc06      	bgt.n	8009966 <__sflush_r+0xfe>
 8009958:	89a3      	ldrh	r3, [r4, #12]
 800995a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800995e:	81a3      	strh	r3, [r4, #12]
 8009960:	f04f 30ff 	mov.w	r0, #4294967295
 8009964:	e78e      	b.n	8009884 <__sflush_r+0x1c>
 8009966:	4407      	add	r7, r0
 8009968:	eba8 0800 	sub.w	r8, r8, r0
 800996c:	e7e9      	b.n	8009942 <__sflush_r+0xda>
 800996e:	bf00      	nop
 8009970:	20400001 	.word	0x20400001

08009974 <_fflush_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	690b      	ldr	r3, [r1, #16]
 8009978:	4605      	mov	r5, r0
 800997a:	460c      	mov	r4, r1
 800997c:	b913      	cbnz	r3, 8009984 <_fflush_r+0x10>
 800997e:	2500      	movs	r5, #0
 8009980:	4628      	mov	r0, r5
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	b118      	cbz	r0, 800998e <_fflush_r+0x1a>
 8009986:	6983      	ldr	r3, [r0, #24]
 8009988:	b90b      	cbnz	r3, 800998e <_fflush_r+0x1a>
 800998a:	f000 f887 	bl	8009a9c <__sinit>
 800998e:	4b14      	ldr	r3, [pc, #80]	; (80099e0 <_fflush_r+0x6c>)
 8009990:	429c      	cmp	r4, r3
 8009992:	d11b      	bne.n	80099cc <_fflush_r+0x58>
 8009994:	686c      	ldr	r4, [r5, #4]
 8009996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0ef      	beq.n	800997e <_fflush_r+0xa>
 800999e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099a0:	07d0      	lsls	r0, r2, #31
 80099a2:	d404      	bmi.n	80099ae <_fflush_r+0x3a>
 80099a4:	0599      	lsls	r1, r3, #22
 80099a6:	d402      	bmi.n	80099ae <_fflush_r+0x3a>
 80099a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099aa:	f000 f915 	bl	8009bd8 <__retarget_lock_acquire_recursive>
 80099ae:	4628      	mov	r0, r5
 80099b0:	4621      	mov	r1, r4
 80099b2:	f7ff ff59 	bl	8009868 <__sflush_r>
 80099b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099b8:	07da      	lsls	r2, r3, #31
 80099ba:	4605      	mov	r5, r0
 80099bc:	d4e0      	bmi.n	8009980 <_fflush_r+0xc>
 80099be:	89a3      	ldrh	r3, [r4, #12]
 80099c0:	059b      	lsls	r3, r3, #22
 80099c2:	d4dd      	bmi.n	8009980 <_fflush_r+0xc>
 80099c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099c6:	f000 f908 	bl	8009bda <__retarget_lock_release_recursive>
 80099ca:	e7d9      	b.n	8009980 <_fflush_r+0xc>
 80099cc:	4b05      	ldr	r3, [pc, #20]	; (80099e4 <_fflush_r+0x70>)
 80099ce:	429c      	cmp	r4, r3
 80099d0:	d101      	bne.n	80099d6 <_fflush_r+0x62>
 80099d2:	68ac      	ldr	r4, [r5, #8]
 80099d4:	e7df      	b.n	8009996 <_fflush_r+0x22>
 80099d6:	4b04      	ldr	r3, [pc, #16]	; (80099e8 <_fflush_r+0x74>)
 80099d8:	429c      	cmp	r4, r3
 80099da:	bf08      	it	eq
 80099dc:	68ec      	ldreq	r4, [r5, #12]
 80099de:	e7da      	b.n	8009996 <_fflush_r+0x22>
 80099e0:	0800a57c 	.word	0x0800a57c
 80099e4:	0800a59c 	.word	0x0800a59c
 80099e8:	0800a55c 	.word	0x0800a55c

080099ec <std>:
 80099ec:	2300      	movs	r3, #0
 80099ee:	b510      	push	{r4, lr}
 80099f0:	4604      	mov	r4, r0
 80099f2:	e9c0 3300 	strd	r3, r3, [r0]
 80099f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099fa:	6083      	str	r3, [r0, #8]
 80099fc:	8181      	strh	r1, [r0, #12]
 80099fe:	6643      	str	r3, [r0, #100]	; 0x64
 8009a00:	81c2      	strh	r2, [r0, #14]
 8009a02:	6183      	str	r3, [r0, #24]
 8009a04:	4619      	mov	r1, r3
 8009a06:	2208      	movs	r2, #8
 8009a08:	305c      	adds	r0, #92	; 0x5c
 8009a0a:	f7fe ffe3 	bl	80089d4 <memset>
 8009a0e:	4b05      	ldr	r3, [pc, #20]	; (8009a24 <std+0x38>)
 8009a10:	6263      	str	r3, [r4, #36]	; 0x24
 8009a12:	4b05      	ldr	r3, [pc, #20]	; (8009a28 <std+0x3c>)
 8009a14:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a16:	4b05      	ldr	r3, [pc, #20]	; (8009a2c <std+0x40>)
 8009a18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a1a:	4b05      	ldr	r3, [pc, #20]	; (8009a30 <std+0x44>)
 8009a1c:	6224      	str	r4, [r4, #32]
 8009a1e:	6323      	str	r3, [r4, #48]	; 0x30
 8009a20:	bd10      	pop	{r4, pc}
 8009a22:	bf00      	nop
 8009a24:	08009df9 	.word	0x08009df9
 8009a28:	08009e1b 	.word	0x08009e1b
 8009a2c:	08009e53 	.word	0x08009e53
 8009a30:	08009e77 	.word	0x08009e77

08009a34 <_cleanup_r>:
 8009a34:	4901      	ldr	r1, [pc, #4]	; (8009a3c <_cleanup_r+0x8>)
 8009a36:	f000 b8af 	b.w	8009b98 <_fwalk_reent>
 8009a3a:	bf00      	nop
 8009a3c:	08009975 	.word	0x08009975

08009a40 <__sfmoreglue>:
 8009a40:	b570      	push	{r4, r5, r6, lr}
 8009a42:	2268      	movs	r2, #104	; 0x68
 8009a44:	1e4d      	subs	r5, r1, #1
 8009a46:	4355      	muls	r5, r2
 8009a48:	460e      	mov	r6, r1
 8009a4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a4e:	f7ff f975 	bl	8008d3c <_malloc_r>
 8009a52:	4604      	mov	r4, r0
 8009a54:	b140      	cbz	r0, 8009a68 <__sfmoreglue+0x28>
 8009a56:	2100      	movs	r1, #0
 8009a58:	e9c0 1600 	strd	r1, r6, [r0]
 8009a5c:	300c      	adds	r0, #12
 8009a5e:	60a0      	str	r0, [r4, #8]
 8009a60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a64:	f7fe ffb6 	bl	80089d4 <memset>
 8009a68:	4620      	mov	r0, r4
 8009a6a:	bd70      	pop	{r4, r5, r6, pc}

08009a6c <__sfp_lock_acquire>:
 8009a6c:	4801      	ldr	r0, [pc, #4]	; (8009a74 <__sfp_lock_acquire+0x8>)
 8009a6e:	f000 b8b3 	b.w	8009bd8 <__retarget_lock_acquire_recursive>
 8009a72:	bf00      	nop
 8009a74:	200002e1 	.word	0x200002e1

08009a78 <__sfp_lock_release>:
 8009a78:	4801      	ldr	r0, [pc, #4]	; (8009a80 <__sfp_lock_release+0x8>)
 8009a7a:	f000 b8ae 	b.w	8009bda <__retarget_lock_release_recursive>
 8009a7e:	bf00      	nop
 8009a80:	200002e1 	.word	0x200002e1

08009a84 <__sinit_lock_acquire>:
 8009a84:	4801      	ldr	r0, [pc, #4]	; (8009a8c <__sinit_lock_acquire+0x8>)
 8009a86:	f000 b8a7 	b.w	8009bd8 <__retarget_lock_acquire_recursive>
 8009a8a:	bf00      	nop
 8009a8c:	200002e2 	.word	0x200002e2

08009a90 <__sinit_lock_release>:
 8009a90:	4801      	ldr	r0, [pc, #4]	; (8009a98 <__sinit_lock_release+0x8>)
 8009a92:	f000 b8a2 	b.w	8009bda <__retarget_lock_release_recursive>
 8009a96:	bf00      	nop
 8009a98:	200002e2 	.word	0x200002e2

08009a9c <__sinit>:
 8009a9c:	b510      	push	{r4, lr}
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	f7ff fff0 	bl	8009a84 <__sinit_lock_acquire>
 8009aa4:	69a3      	ldr	r3, [r4, #24]
 8009aa6:	b11b      	cbz	r3, 8009ab0 <__sinit+0x14>
 8009aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aac:	f7ff bff0 	b.w	8009a90 <__sinit_lock_release>
 8009ab0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ab4:	6523      	str	r3, [r4, #80]	; 0x50
 8009ab6:	4b13      	ldr	r3, [pc, #76]	; (8009b04 <__sinit+0x68>)
 8009ab8:	4a13      	ldr	r2, [pc, #76]	; (8009b08 <__sinit+0x6c>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009abe:	42a3      	cmp	r3, r4
 8009ac0:	bf04      	itt	eq
 8009ac2:	2301      	moveq	r3, #1
 8009ac4:	61a3      	streq	r3, [r4, #24]
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	f000 f820 	bl	8009b0c <__sfp>
 8009acc:	6060      	str	r0, [r4, #4]
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f000 f81c 	bl	8009b0c <__sfp>
 8009ad4:	60a0      	str	r0, [r4, #8]
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f000 f818 	bl	8009b0c <__sfp>
 8009adc:	2200      	movs	r2, #0
 8009ade:	60e0      	str	r0, [r4, #12]
 8009ae0:	2104      	movs	r1, #4
 8009ae2:	6860      	ldr	r0, [r4, #4]
 8009ae4:	f7ff ff82 	bl	80099ec <std>
 8009ae8:	68a0      	ldr	r0, [r4, #8]
 8009aea:	2201      	movs	r2, #1
 8009aec:	2109      	movs	r1, #9
 8009aee:	f7ff ff7d 	bl	80099ec <std>
 8009af2:	68e0      	ldr	r0, [r4, #12]
 8009af4:	2202      	movs	r2, #2
 8009af6:	2112      	movs	r1, #18
 8009af8:	f7ff ff78 	bl	80099ec <std>
 8009afc:	2301      	movs	r3, #1
 8009afe:	61a3      	str	r3, [r4, #24]
 8009b00:	e7d2      	b.n	8009aa8 <__sinit+0xc>
 8009b02:	bf00      	nop
 8009b04:	0800a374 	.word	0x0800a374
 8009b08:	08009a35 	.word	0x08009a35

08009b0c <__sfp>:
 8009b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0e:	4607      	mov	r7, r0
 8009b10:	f7ff ffac 	bl	8009a6c <__sfp_lock_acquire>
 8009b14:	4b1e      	ldr	r3, [pc, #120]	; (8009b90 <__sfp+0x84>)
 8009b16:	681e      	ldr	r6, [r3, #0]
 8009b18:	69b3      	ldr	r3, [r6, #24]
 8009b1a:	b913      	cbnz	r3, 8009b22 <__sfp+0x16>
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	f7ff ffbd 	bl	8009a9c <__sinit>
 8009b22:	3648      	adds	r6, #72	; 0x48
 8009b24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	d503      	bpl.n	8009b34 <__sfp+0x28>
 8009b2c:	6833      	ldr	r3, [r6, #0]
 8009b2e:	b30b      	cbz	r3, 8009b74 <__sfp+0x68>
 8009b30:	6836      	ldr	r6, [r6, #0]
 8009b32:	e7f7      	b.n	8009b24 <__sfp+0x18>
 8009b34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b38:	b9d5      	cbnz	r5, 8009b70 <__sfp+0x64>
 8009b3a:	4b16      	ldr	r3, [pc, #88]	; (8009b94 <__sfp+0x88>)
 8009b3c:	60e3      	str	r3, [r4, #12]
 8009b3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b42:	6665      	str	r5, [r4, #100]	; 0x64
 8009b44:	f000 f847 	bl	8009bd6 <__retarget_lock_init_recursive>
 8009b48:	f7ff ff96 	bl	8009a78 <__sfp_lock_release>
 8009b4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b54:	6025      	str	r5, [r4, #0]
 8009b56:	61a5      	str	r5, [r4, #24]
 8009b58:	2208      	movs	r2, #8
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b60:	f7fe ff38 	bl	80089d4 <memset>
 8009b64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b70:	3468      	adds	r4, #104	; 0x68
 8009b72:	e7d9      	b.n	8009b28 <__sfp+0x1c>
 8009b74:	2104      	movs	r1, #4
 8009b76:	4638      	mov	r0, r7
 8009b78:	f7ff ff62 	bl	8009a40 <__sfmoreglue>
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	6030      	str	r0, [r6, #0]
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d1d5      	bne.n	8009b30 <__sfp+0x24>
 8009b84:	f7ff ff78 	bl	8009a78 <__sfp_lock_release>
 8009b88:	230c      	movs	r3, #12
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	e7ee      	b.n	8009b6c <__sfp+0x60>
 8009b8e:	bf00      	nop
 8009b90:	0800a374 	.word	0x0800a374
 8009b94:	ffff0001 	.word	0xffff0001

08009b98 <_fwalk_reent>:
 8009b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b9c:	4606      	mov	r6, r0
 8009b9e:	4688      	mov	r8, r1
 8009ba0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ba4:	2700      	movs	r7, #0
 8009ba6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009baa:	f1b9 0901 	subs.w	r9, r9, #1
 8009bae:	d505      	bpl.n	8009bbc <_fwalk_reent+0x24>
 8009bb0:	6824      	ldr	r4, [r4, #0]
 8009bb2:	2c00      	cmp	r4, #0
 8009bb4:	d1f7      	bne.n	8009ba6 <_fwalk_reent+0xe>
 8009bb6:	4638      	mov	r0, r7
 8009bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bbc:	89ab      	ldrh	r3, [r5, #12]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d907      	bls.n	8009bd2 <_fwalk_reent+0x3a>
 8009bc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	d003      	beq.n	8009bd2 <_fwalk_reent+0x3a>
 8009bca:	4629      	mov	r1, r5
 8009bcc:	4630      	mov	r0, r6
 8009bce:	47c0      	blx	r8
 8009bd0:	4307      	orrs	r7, r0
 8009bd2:	3568      	adds	r5, #104	; 0x68
 8009bd4:	e7e9      	b.n	8009baa <_fwalk_reent+0x12>

08009bd6 <__retarget_lock_init_recursive>:
 8009bd6:	4770      	bx	lr

08009bd8 <__retarget_lock_acquire_recursive>:
 8009bd8:	4770      	bx	lr

08009bda <__retarget_lock_release_recursive>:
 8009bda:	4770      	bx	lr

08009bdc <__swhatbuf_r>:
 8009bdc:	b570      	push	{r4, r5, r6, lr}
 8009bde:	460e      	mov	r6, r1
 8009be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009be4:	2900      	cmp	r1, #0
 8009be6:	b096      	sub	sp, #88	; 0x58
 8009be8:	4614      	mov	r4, r2
 8009bea:	461d      	mov	r5, r3
 8009bec:	da08      	bge.n	8009c00 <__swhatbuf_r+0x24>
 8009bee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	602a      	str	r2, [r5, #0]
 8009bf6:	061a      	lsls	r2, r3, #24
 8009bf8:	d410      	bmi.n	8009c1c <__swhatbuf_r+0x40>
 8009bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bfe:	e00e      	b.n	8009c1e <__swhatbuf_r+0x42>
 8009c00:	466a      	mov	r2, sp
 8009c02:	f000 f95f 	bl	8009ec4 <_fstat_r>
 8009c06:	2800      	cmp	r0, #0
 8009c08:	dbf1      	blt.n	8009bee <__swhatbuf_r+0x12>
 8009c0a:	9a01      	ldr	r2, [sp, #4]
 8009c0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c14:	425a      	negs	r2, r3
 8009c16:	415a      	adcs	r2, r3
 8009c18:	602a      	str	r2, [r5, #0]
 8009c1a:	e7ee      	b.n	8009bfa <__swhatbuf_r+0x1e>
 8009c1c:	2340      	movs	r3, #64	; 0x40
 8009c1e:	2000      	movs	r0, #0
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	b016      	add	sp, #88	; 0x58
 8009c24:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c28 <__smakebuf_r>:
 8009c28:	898b      	ldrh	r3, [r1, #12]
 8009c2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c2c:	079d      	lsls	r5, r3, #30
 8009c2e:	4606      	mov	r6, r0
 8009c30:	460c      	mov	r4, r1
 8009c32:	d507      	bpl.n	8009c44 <__smakebuf_r+0x1c>
 8009c34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c38:	6023      	str	r3, [r4, #0]
 8009c3a:	6123      	str	r3, [r4, #16]
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	6163      	str	r3, [r4, #20]
 8009c40:	b002      	add	sp, #8
 8009c42:	bd70      	pop	{r4, r5, r6, pc}
 8009c44:	ab01      	add	r3, sp, #4
 8009c46:	466a      	mov	r2, sp
 8009c48:	f7ff ffc8 	bl	8009bdc <__swhatbuf_r>
 8009c4c:	9900      	ldr	r1, [sp, #0]
 8009c4e:	4605      	mov	r5, r0
 8009c50:	4630      	mov	r0, r6
 8009c52:	f7ff f873 	bl	8008d3c <_malloc_r>
 8009c56:	b948      	cbnz	r0, 8009c6c <__smakebuf_r+0x44>
 8009c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c5c:	059a      	lsls	r2, r3, #22
 8009c5e:	d4ef      	bmi.n	8009c40 <__smakebuf_r+0x18>
 8009c60:	f023 0303 	bic.w	r3, r3, #3
 8009c64:	f043 0302 	orr.w	r3, r3, #2
 8009c68:	81a3      	strh	r3, [r4, #12]
 8009c6a:	e7e3      	b.n	8009c34 <__smakebuf_r+0xc>
 8009c6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ca4 <__smakebuf_r+0x7c>)
 8009c6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c70:	89a3      	ldrh	r3, [r4, #12]
 8009c72:	6020      	str	r0, [r4, #0]
 8009c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c78:	81a3      	strh	r3, [r4, #12]
 8009c7a:	9b00      	ldr	r3, [sp, #0]
 8009c7c:	6163      	str	r3, [r4, #20]
 8009c7e:	9b01      	ldr	r3, [sp, #4]
 8009c80:	6120      	str	r0, [r4, #16]
 8009c82:	b15b      	cbz	r3, 8009c9c <__smakebuf_r+0x74>
 8009c84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c88:	4630      	mov	r0, r6
 8009c8a:	f000 f92d 	bl	8009ee8 <_isatty_r>
 8009c8e:	b128      	cbz	r0, 8009c9c <__smakebuf_r+0x74>
 8009c90:	89a3      	ldrh	r3, [r4, #12]
 8009c92:	f023 0303 	bic.w	r3, r3, #3
 8009c96:	f043 0301 	orr.w	r3, r3, #1
 8009c9a:	81a3      	strh	r3, [r4, #12]
 8009c9c:	89a0      	ldrh	r0, [r4, #12]
 8009c9e:	4305      	orrs	r5, r0
 8009ca0:	81a5      	strh	r5, [r4, #12]
 8009ca2:	e7cd      	b.n	8009c40 <__smakebuf_r+0x18>
 8009ca4:	08009a35 	.word	0x08009a35

08009ca8 <memcpy>:
 8009ca8:	440a      	add	r2, r1
 8009caa:	4291      	cmp	r1, r2
 8009cac:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cb0:	d100      	bne.n	8009cb4 <memcpy+0xc>
 8009cb2:	4770      	bx	lr
 8009cb4:	b510      	push	{r4, lr}
 8009cb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cbe:	4291      	cmp	r1, r2
 8009cc0:	d1f9      	bne.n	8009cb6 <memcpy+0xe>
 8009cc2:	bd10      	pop	{r4, pc}

08009cc4 <memmove>:
 8009cc4:	4288      	cmp	r0, r1
 8009cc6:	b510      	push	{r4, lr}
 8009cc8:	eb01 0402 	add.w	r4, r1, r2
 8009ccc:	d902      	bls.n	8009cd4 <memmove+0x10>
 8009cce:	4284      	cmp	r4, r0
 8009cd0:	4623      	mov	r3, r4
 8009cd2:	d807      	bhi.n	8009ce4 <memmove+0x20>
 8009cd4:	1e43      	subs	r3, r0, #1
 8009cd6:	42a1      	cmp	r1, r4
 8009cd8:	d008      	beq.n	8009cec <memmove+0x28>
 8009cda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ce2:	e7f8      	b.n	8009cd6 <memmove+0x12>
 8009ce4:	4402      	add	r2, r0
 8009ce6:	4601      	mov	r1, r0
 8009ce8:	428a      	cmp	r2, r1
 8009cea:	d100      	bne.n	8009cee <memmove+0x2a>
 8009cec:	bd10      	pop	{r4, pc}
 8009cee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009cf6:	e7f7      	b.n	8009ce8 <memmove+0x24>

08009cf8 <__malloc_lock>:
 8009cf8:	4801      	ldr	r0, [pc, #4]	; (8009d00 <__malloc_lock+0x8>)
 8009cfa:	f7ff bf6d 	b.w	8009bd8 <__retarget_lock_acquire_recursive>
 8009cfe:	bf00      	nop
 8009d00:	200002e0 	.word	0x200002e0

08009d04 <__malloc_unlock>:
 8009d04:	4801      	ldr	r0, [pc, #4]	; (8009d0c <__malloc_unlock+0x8>)
 8009d06:	f7ff bf68 	b.w	8009bda <__retarget_lock_release_recursive>
 8009d0a:	bf00      	nop
 8009d0c:	200002e0 	.word	0x200002e0

08009d10 <_realloc_r>:
 8009d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d14:	4680      	mov	r8, r0
 8009d16:	4614      	mov	r4, r2
 8009d18:	460e      	mov	r6, r1
 8009d1a:	b921      	cbnz	r1, 8009d26 <_realloc_r+0x16>
 8009d1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d20:	4611      	mov	r1, r2
 8009d22:	f7ff b80b 	b.w	8008d3c <_malloc_r>
 8009d26:	b92a      	cbnz	r2, 8009d34 <_realloc_r+0x24>
 8009d28:	f7fe ff9c 	bl	8008c64 <_free_r>
 8009d2c:	4625      	mov	r5, r4
 8009d2e:	4628      	mov	r0, r5
 8009d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d34:	f000 f8fa 	bl	8009f2c <_malloc_usable_size_r>
 8009d38:	4284      	cmp	r4, r0
 8009d3a:	4607      	mov	r7, r0
 8009d3c:	d802      	bhi.n	8009d44 <_realloc_r+0x34>
 8009d3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d42:	d812      	bhi.n	8009d6a <_realloc_r+0x5a>
 8009d44:	4621      	mov	r1, r4
 8009d46:	4640      	mov	r0, r8
 8009d48:	f7fe fff8 	bl	8008d3c <_malloc_r>
 8009d4c:	4605      	mov	r5, r0
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d0ed      	beq.n	8009d2e <_realloc_r+0x1e>
 8009d52:	42bc      	cmp	r4, r7
 8009d54:	4622      	mov	r2, r4
 8009d56:	4631      	mov	r1, r6
 8009d58:	bf28      	it	cs
 8009d5a:	463a      	movcs	r2, r7
 8009d5c:	f7ff ffa4 	bl	8009ca8 <memcpy>
 8009d60:	4631      	mov	r1, r6
 8009d62:	4640      	mov	r0, r8
 8009d64:	f7fe ff7e 	bl	8008c64 <_free_r>
 8009d68:	e7e1      	b.n	8009d2e <_realloc_r+0x1e>
 8009d6a:	4635      	mov	r5, r6
 8009d6c:	e7df      	b.n	8009d2e <_realloc_r+0x1e>

08009d6e <_raise_r>:
 8009d6e:	291f      	cmp	r1, #31
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	4604      	mov	r4, r0
 8009d74:	460d      	mov	r5, r1
 8009d76:	d904      	bls.n	8009d82 <_raise_r+0x14>
 8009d78:	2316      	movs	r3, #22
 8009d7a:	6003      	str	r3, [r0, #0]
 8009d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d80:	bd38      	pop	{r3, r4, r5, pc}
 8009d82:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d84:	b112      	cbz	r2, 8009d8c <_raise_r+0x1e>
 8009d86:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d8a:	b94b      	cbnz	r3, 8009da0 <_raise_r+0x32>
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f000 f831 	bl	8009df4 <_getpid_r>
 8009d92:	462a      	mov	r2, r5
 8009d94:	4601      	mov	r1, r0
 8009d96:	4620      	mov	r0, r4
 8009d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d9c:	f000 b818 	b.w	8009dd0 <_kill_r>
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d00a      	beq.n	8009dba <_raise_r+0x4c>
 8009da4:	1c59      	adds	r1, r3, #1
 8009da6:	d103      	bne.n	8009db0 <_raise_r+0x42>
 8009da8:	2316      	movs	r3, #22
 8009daa:	6003      	str	r3, [r0, #0]
 8009dac:	2001      	movs	r0, #1
 8009dae:	e7e7      	b.n	8009d80 <_raise_r+0x12>
 8009db0:	2400      	movs	r4, #0
 8009db2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009db6:	4628      	mov	r0, r5
 8009db8:	4798      	blx	r3
 8009dba:	2000      	movs	r0, #0
 8009dbc:	e7e0      	b.n	8009d80 <_raise_r+0x12>
	...

08009dc0 <raise>:
 8009dc0:	4b02      	ldr	r3, [pc, #8]	; (8009dcc <raise+0xc>)
 8009dc2:	4601      	mov	r1, r0
 8009dc4:	6818      	ldr	r0, [r3, #0]
 8009dc6:	f7ff bfd2 	b.w	8009d6e <_raise_r>
 8009dca:	bf00      	nop
 8009dcc:	20000010 	.word	0x20000010

08009dd0 <_kill_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	4d07      	ldr	r5, [pc, #28]	; (8009df0 <_kill_r+0x20>)
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	4608      	mov	r0, r1
 8009dda:	4611      	mov	r1, r2
 8009ddc:	602b      	str	r3, [r5, #0]
 8009dde:	f7f7 f945 	bl	800106c <_kill>
 8009de2:	1c43      	adds	r3, r0, #1
 8009de4:	d102      	bne.n	8009dec <_kill_r+0x1c>
 8009de6:	682b      	ldr	r3, [r5, #0]
 8009de8:	b103      	cbz	r3, 8009dec <_kill_r+0x1c>
 8009dea:	6023      	str	r3, [r4, #0]
 8009dec:	bd38      	pop	{r3, r4, r5, pc}
 8009dee:	bf00      	nop
 8009df0:	200002e4 	.word	0x200002e4

08009df4 <_getpid_r>:
 8009df4:	f7f7 b932 	b.w	800105c <_getpid>

08009df8 <__sread>:
 8009df8:	b510      	push	{r4, lr}
 8009dfa:	460c      	mov	r4, r1
 8009dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e00:	f000 f89c 	bl	8009f3c <_read_r>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	bfab      	itete	ge
 8009e08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e0a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e0c:	181b      	addge	r3, r3, r0
 8009e0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e12:	bfac      	ite	ge
 8009e14:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e16:	81a3      	strhlt	r3, [r4, #12]
 8009e18:	bd10      	pop	{r4, pc}

08009e1a <__swrite>:
 8009e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e1e:	461f      	mov	r7, r3
 8009e20:	898b      	ldrh	r3, [r1, #12]
 8009e22:	05db      	lsls	r3, r3, #23
 8009e24:	4605      	mov	r5, r0
 8009e26:	460c      	mov	r4, r1
 8009e28:	4616      	mov	r6, r2
 8009e2a:	d505      	bpl.n	8009e38 <__swrite+0x1e>
 8009e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e30:	2302      	movs	r3, #2
 8009e32:	2200      	movs	r2, #0
 8009e34:	f000 f868 	bl	8009f08 <_lseek_r>
 8009e38:	89a3      	ldrh	r3, [r4, #12]
 8009e3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e42:	81a3      	strh	r3, [r4, #12]
 8009e44:	4632      	mov	r2, r6
 8009e46:	463b      	mov	r3, r7
 8009e48:	4628      	mov	r0, r5
 8009e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4e:	f000 b817 	b.w	8009e80 <_write_r>

08009e52 <__sseek>:
 8009e52:	b510      	push	{r4, lr}
 8009e54:	460c      	mov	r4, r1
 8009e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e5a:	f000 f855 	bl	8009f08 <_lseek_r>
 8009e5e:	1c43      	adds	r3, r0, #1
 8009e60:	89a3      	ldrh	r3, [r4, #12]
 8009e62:	bf15      	itete	ne
 8009e64:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e6e:	81a3      	strheq	r3, [r4, #12]
 8009e70:	bf18      	it	ne
 8009e72:	81a3      	strhne	r3, [r4, #12]
 8009e74:	bd10      	pop	{r4, pc}

08009e76 <__sclose>:
 8009e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e7a:	f000 b813 	b.w	8009ea4 <_close_r>
	...

08009e80 <_write_r>:
 8009e80:	b538      	push	{r3, r4, r5, lr}
 8009e82:	4d07      	ldr	r5, [pc, #28]	; (8009ea0 <_write_r+0x20>)
 8009e84:	4604      	mov	r4, r0
 8009e86:	4608      	mov	r0, r1
 8009e88:	4611      	mov	r1, r2
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	602a      	str	r2, [r5, #0]
 8009e8e:	461a      	mov	r2, r3
 8009e90:	f7f7 f923 	bl	80010da <_write>
 8009e94:	1c43      	adds	r3, r0, #1
 8009e96:	d102      	bne.n	8009e9e <_write_r+0x1e>
 8009e98:	682b      	ldr	r3, [r5, #0]
 8009e9a:	b103      	cbz	r3, 8009e9e <_write_r+0x1e>
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ea0:	200002e4 	.word	0x200002e4

08009ea4 <_close_r>:
 8009ea4:	b538      	push	{r3, r4, r5, lr}
 8009ea6:	4d06      	ldr	r5, [pc, #24]	; (8009ec0 <_close_r+0x1c>)
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4604      	mov	r4, r0
 8009eac:	4608      	mov	r0, r1
 8009eae:	602b      	str	r3, [r5, #0]
 8009eb0:	f7f7 f92f 	bl	8001112 <_close>
 8009eb4:	1c43      	adds	r3, r0, #1
 8009eb6:	d102      	bne.n	8009ebe <_close_r+0x1a>
 8009eb8:	682b      	ldr	r3, [r5, #0]
 8009eba:	b103      	cbz	r3, 8009ebe <_close_r+0x1a>
 8009ebc:	6023      	str	r3, [r4, #0]
 8009ebe:	bd38      	pop	{r3, r4, r5, pc}
 8009ec0:	200002e4 	.word	0x200002e4

08009ec4 <_fstat_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	4d07      	ldr	r5, [pc, #28]	; (8009ee4 <_fstat_r+0x20>)
 8009ec8:	2300      	movs	r3, #0
 8009eca:	4604      	mov	r4, r0
 8009ecc:	4608      	mov	r0, r1
 8009ece:	4611      	mov	r1, r2
 8009ed0:	602b      	str	r3, [r5, #0]
 8009ed2:	f7f7 f92a 	bl	800112a <_fstat>
 8009ed6:	1c43      	adds	r3, r0, #1
 8009ed8:	d102      	bne.n	8009ee0 <_fstat_r+0x1c>
 8009eda:	682b      	ldr	r3, [r5, #0]
 8009edc:	b103      	cbz	r3, 8009ee0 <_fstat_r+0x1c>
 8009ede:	6023      	str	r3, [r4, #0]
 8009ee0:	bd38      	pop	{r3, r4, r5, pc}
 8009ee2:	bf00      	nop
 8009ee4:	200002e4 	.word	0x200002e4

08009ee8 <_isatty_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d06      	ldr	r5, [pc, #24]	; (8009f04 <_isatty_r+0x1c>)
 8009eec:	2300      	movs	r3, #0
 8009eee:	4604      	mov	r4, r0
 8009ef0:	4608      	mov	r0, r1
 8009ef2:	602b      	str	r3, [r5, #0]
 8009ef4:	f7f7 f929 	bl	800114a <_isatty>
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	d102      	bne.n	8009f02 <_isatty_r+0x1a>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	b103      	cbz	r3, 8009f02 <_isatty_r+0x1a>
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	bd38      	pop	{r3, r4, r5, pc}
 8009f04:	200002e4 	.word	0x200002e4

08009f08 <_lseek_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	4d07      	ldr	r5, [pc, #28]	; (8009f28 <_lseek_r+0x20>)
 8009f0c:	4604      	mov	r4, r0
 8009f0e:	4608      	mov	r0, r1
 8009f10:	4611      	mov	r1, r2
 8009f12:	2200      	movs	r2, #0
 8009f14:	602a      	str	r2, [r5, #0]
 8009f16:	461a      	mov	r2, r3
 8009f18:	f7f7 f922 	bl	8001160 <_lseek>
 8009f1c:	1c43      	adds	r3, r0, #1
 8009f1e:	d102      	bne.n	8009f26 <_lseek_r+0x1e>
 8009f20:	682b      	ldr	r3, [r5, #0]
 8009f22:	b103      	cbz	r3, 8009f26 <_lseek_r+0x1e>
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	bd38      	pop	{r3, r4, r5, pc}
 8009f28:	200002e4 	.word	0x200002e4

08009f2c <_malloc_usable_size_r>:
 8009f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f30:	1f18      	subs	r0, r3, #4
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	bfbc      	itt	lt
 8009f36:	580b      	ldrlt	r3, [r1, r0]
 8009f38:	18c0      	addlt	r0, r0, r3
 8009f3a:	4770      	bx	lr

08009f3c <_read_r>:
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4d07      	ldr	r5, [pc, #28]	; (8009f5c <_read_r+0x20>)
 8009f40:	4604      	mov	r4, r0
 8009f42:	4608      	mov	r0, r1
 8009f44:	4611      	mov	r1, r2
 8009f46:	2200      	movs	r2, #0
 8009f48:	602a      	str	r2, [r5, #0]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	f7f7 f8a8 	bl	80010a0 <_read>
 8009f50:	1c43      	adds	r3, r0, #1
 8009f52:	d102      	bne.n	8009f5a <_read_r+0x1e>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	b103      	cbz	r3, 8009f5a <_read_r+0x1e>
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	bd38      	pop	{r3, r4, r5, pc}
 8009f5c:	200002e4 	.word	0x200002e4

08009f60 <_init>:
 8009f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f62:	bf00      	nop
 8009f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f66:	bc08      	pop	{r3}
 8009f68:	469e      	mov	lr, r3
 8009f6a:	4770      	bx	lr

08009f6c <_fini>:
 8009f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6e:	bf00      	nop
 8009f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f72:	bc08      	pop	{r3}
 8009f74:	469e      	mov	lr, r3
 8009f76:	4770      	bx	lr
